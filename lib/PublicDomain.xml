<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PublicDomain</name>
    </assembly>
    <members>
        <member name="T:PublicDomain.ReadOnlyDictionary`2">
            <summary>
            Represents a read only wrapper around a generic IDictionary. The design pattern
            mirrors ReadOnlyCollection, and follows the apparent pattern that write operations
            do not throw an exception, but simply make no change to the underlying collection.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:PublicDomain.ReadOnlyDictionary`2.dict">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ReadOnlyDictionary`2.idict">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.AsReadOnly(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Returns a read only dictionary.
            </summary>
            <param name="dictionaryToWrap">The dictionary to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Clear">
            <summary>
            Clear does not change a read only Dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove does not change a read only Dictionary
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Add(System.Object,System.Object)">
            <summary>
            Add does not change a read only Dictionary
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.Remove(System.Object)">
            <summary>
            Remove does not affect a read only Dictionary
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:PublicDomain.ReadOnlyDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets a read only <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value with the specified key. Set
            does not change a read only Dictionary
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.Item(System.Object)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key. Set
            does not affect a ReadOnlyDictionary
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:PublicDomain.PendingPublicDomainAttribute">
            <summary>
            Code marked with this attribute should be moved to the PublicDomain package.
            </summary>
        </member>
        <member name="T:PublicDomain.Iso8601">
            <summary>
            http://www.w3.org/TR/NOTE-datetime
            http://www.cl.cam.ac.uk/~mgk25/iso-time.html
            </summary>
        </member>
        <member name="F:PublicDomain.Iso8601.UtcZuluIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Iso8601.TryParse(System.String,PublicDomain.TzDateTime@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The STR.</param>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Iso8601.TryParse(System.String,PublicDomain.TzTimeZone,PublicDomain.TzDateTime@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The STR.</param>
            <param name="localTimeZone">The local time zone.</param>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Iso8601.Parse(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Iso8601.Parse(System.String,PublicDomain.TzTimeZone)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <param name="localTimeZone">The local time zone.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Iso8601.GetTimeZoneData(System.TimeSpan,System.Boolean)">
            <summary>
            Gets the time zone data.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="useZuluModifier">if set to <c>true</c> [use zulu modifier].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Logging.RollingFileLogger">
            <summary>
            Writes to a file, rolling over to a new version of a file
            when the previous file has filled to capacity.
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.FileLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.Logger">
            <summary>
            There is no interface for this class to allow for certain methods
            to be overriden and removed in debug builds.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.Logger.ProcessMessages">
            <summary>
            Global property which specifies wether or not to process messages. It
            is enabled by default and affects the entire AppDomain. If this is disabled,
            messages will pile up in memory.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.Logger.BackgroundThreadInterval">
            <summary>
            In milliseconds
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LoggerThread(System.Boolean)">
            <summary>
            Actually does the processing of the background thread to call the writes
            </summary>
            <param name="isFinal">if set to <c>true</c> [is final].</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.Logger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.Logger.#ctor(PublicDomain.Logging.ILogFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.Logger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.Logger.PushArtifact(PublicDomain.Logging.LogArtifact)">
            <summary>
            Pushes the artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="F:PublicDomain.Logging.Logger.Enabled">
            <summary>
            Can be used as a log guard
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.Logger.AddLogFilter(PublicDomain.Logging.ILogFilter)">
            <summary>
            Adds the log filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.RemoveLogFilter(PublicDomain.Logging.ILogFilter)">
            <summary>
            Removes the log filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.ClearLogFilters">
            <summary>
            Clears the log filters.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.Logger.Log(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="severity"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.DoLog(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String)">
            <summary>
            High level final log that is called with all of the detailed information
            and the final log line as the last parameter.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="logLine">The log line.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.Write(PublicDomain.Logging.LogArtifact[])">
            <summary>
            Writes the specified artifacts.
            </summary>
            <param name="artifacts">The artifacts.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogDebug10(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogInfo20(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogWarn30(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogError40(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogFatal50(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogException(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogException(System.Exception,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The ex.</param>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.DebugDumpEntry(System.Object[])">
            <summary>
            Prints method information and the arguments passed.
            This code is only compiled in with DEBUG set as
            the configuration mode.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.DebugDumpExit(System.Object[])">
            <summary>
            Prints method information and the arguments passed.
            This code is only compiled in with DEBUG set as
            the configuration mode.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.Entry(System.String,System.Object[])">
            <summary>
            Dumps the entry.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.LogEntryExit(System.String,System.Boolean,System.Object[])">
            <summary>
            Logs the entry exit.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="isEntry">if set to <c>true</c> [is entry].</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.Exit(System.String,System.Object[])">
            <summary>
            Exits
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.DumpStack(System.Object[])">
            <summary>
            Prints method information and the arguments passed.
            This code is only compiled in with DEBUG set as
            the configuration mode.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:PublicDomain.Logging.Logger.DebugLogEntryExit(System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Logs the entry exit.
            </summary>
            <param name="isEntry">if set to <c>true</c> [is entry].</param>
            <param name="useMarker">if set to <c>true</c> [use marker].</param>
            <param name="args">The args.</param>
        </member>
        <member name="P:PublicDomain.Logging.Logger.Threshold">
            <summary>
            The severity threshold at which point a log message
            is logged. For example, if the threshold is Debug,
            all messages with severity greater than or equal to Debug
            will be logged. All other messages will be discarded.
            The default threshold is Warn.
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Logging.Logger.Formatter">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Logging.Logger.TimestampProvider">
            <summary>
            Gets or sets the timestamp provider.
            </summary>
            <value>The timestamp provider.</value>
        </member>
        <member name="P:PublicDomain.Logging.Logger.Filters">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Logging.Logger.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:PublicDomain.Logging.Logger.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="F:PublicDomain.Logging.FileLogger.UseCarriageReturn">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.FileLogger.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.FileLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.FileLogger"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.WriteInternal(PublicDomain.Logging.LogArtifact[])">
            <summary>
            Writes the internal.
            </summary>
            <param name="artifacts">The artifacts.</param>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.Write(PublicDomain.Logging.LogArtifact[])">
            <summary>
            Writes the specified artifacts.
            </summary>
            <param name="artifacts">The artifacts.</param>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.GetStream(System.String)">
            <summary>
            Gets the stream.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.FileLogger.GetFileName(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,PublicDomain.Logging.LogArtifact[])">
            <summary>
            Gets the name of the file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.FileLogger.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="M:PublicDomain.Logging.RollingFileLogger.#ctor(System.String)">
            <summary>
            Writes to a file, rolling over to a new version of a file
            when the previous file has filled to capacity.
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.RollingFileLogger"/> class.
            </summary>
            <param name="fileNameFormatted">The file name formatted.</param>
        </member>
        <member name="M:PublicDomain.Logging.RollingFileLogger.#ctor(System.String,PublicDomain.Logging.IRollOverStrategy)">
            <summary>
            Writes to a file, rolling over to a new version of a file
            when the previous file has filled to capacity.
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.RollingFileLogger"/> class.
            </summary>
            <param name="fileNameFormatted">The file name formatted.</param>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:PublicDomain.Logging.RollingFileLogger.GetFileName(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,PublicDomain.Logging.LogArtifact[])">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="severity"></param>
            <param name="timestamp"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
            <param name="logLine"></param>
            <param name="artifactSet"></param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.RollingFileLogger.Strategy">
            <summary>
            Gets or sets the strategy.
            </summary>
            <value>The strategy.</value>
        </member>
        <member name="T:PublicDomain.RemotingUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssImage">
            <summary>
            Specifies a GIF, JPEG or PNG image that can be displayed with the channel.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssImage.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssImage">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.CachedPropertiesProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ICachedPropertiesProvider">
            <summary>
            This class
            also provides a cache of property names to objects, similar in concept
            to the Properties collection, but representing concrete properties.
            </summary>
        </member>
        <member name="M:PublicDomain.ICachedPropertiesProvider.Setter(System.String,System.Object)">
            <summary>
            Setters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PublicDomain.ICachedPropertiesProvider.Getter(System.String)">
            <summary>
            Getters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ICachedPropertiesProvider.Getter``1(System.String,System.Converter{System.String,``0})">
            <summary>
            Getters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="convertDelegate">The convert delegate.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.ICachedPropertiesProvider.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.Setter(System.String,System.Object)">
            <summary>
            Setters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.Getter(System.String)">
            <summary>
            Getters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.Getter``1(System.String,System.Converter{System.String,``0})">
            <summary>
            Getters the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="convertDelegate">The convert delegate.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertStringToString(System.String)">
            <summary>
            Converts the string to string.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToTzDateTime(System.String)">
            <summary>
            Assumes input is in UTC.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToUri(System.String)">
            <summary>
            Converts to URI.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToCultureInfo(System.String)">
            <summary>
            Converts to culture info.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToUIntNullable(System.String)">
            <summary>
            Converts to U int nullable.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToIntNullable(System.String)">
            <summary>
            Converts to int nullable.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToUInt(System.String)">
            <summary>
            Converts to U int.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToInt(System.String)">
            <summary>
            Converts to int.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToBoolNullable(System.String)">
            <summary>
            Converts to bool nullable.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CachedPropertiesProvider.ConvertToUri(System.String,System.String)">
            <summary>
            Converts to URI.
            </summary>
            <param name="input">The input.</param>
            <param name="baseUri">The base URI.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.CachedPropertiesProvider.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssImage.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.IOpmlOutline">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.IOpmlOutlineProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlOutlineProvider.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlOutline.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlOutline.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlOutline.IsComment">
            <summary>
            Gets or sets the is comment.
            </summary>
            <value>The is comment.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlOutline.IsBreakpoint">
            <summary>
            Gets or sets the is breakpoint.
            </summary>
            <value>The is breakpoint.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.OpmlOutline">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.OpmlOutlineProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlOutlineProvider.Outlines">
            <summary>
            Gets or sets the outlines.
            </summary>
            <value>The outlines.</value>
        </member>
        <member name="M:PublicDomain.Feeder.Opml.OpmlOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Feeder.Opml.OpmlOutline"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.Opml.OpmlOutline.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Feeder.Opml.OpmlOutline"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:PublicDomain.Feeder.Opml.OpmlOutline.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Feeder.Opml.OpmlOutline"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlOutline.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlOutline.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlOutline.IsComment">
            <summary>
            Gets or sets the is comment.
            </summary>
            <value>The is comment.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlOutline.IsBreakpoint">
            <summary>
            Gets or sets the is breakpoint.
            </summary>
            <value>The is breakpoint.</value>
        </member>
        <member name="T:PublicDomain.Feeder.IAtomFeed">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IFeed">
            <summary>
            Common denominator for a feed. If you are looking for
            specific properties, yet you don't want to lose information
            through distilling, then you need to conditionally check
            the dynamic type of this instance and cast to that type
            (e.g. IRssFeed or IAtomFeed). If you are expecting a specific
            type of feed, then you can just cast to that type of feed; however,
            note that you can never guarantee the dynamic type of the
            instance, since the type that is instantiated is determined at
            run-time by sniffing out the feed.
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IXmlFeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IXmlFeed.RawContents">
            <summary>
            Gets or sets the raw contents.
            </summary>
            <value>The raw contents.</value>
        </member>
        <member name="M:PublicDomain.Feeder.IFeed.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.IFeed.FeedUri">
            <summary>
            Gets or sets the feed URI.
            </summary>
            <value>The feed URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IFeed.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Authors">
            <summary>
            Gets or sets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Links">
            <summary>
            Gets or sets the links.
            </summary>
            <value>The links.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Contributors">
            <summary>
            Gets or sets the contributors.
            </summary>
            <value>The contributors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Logo">
            <summary>
            Gets or sets the logo.
            </summary>
            <value>The logo.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Rights">
            <summary>
            Gets or sets the rights.
            </summary>
            <value>The rights.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeed.Subtitle">
            <summary>
            Gets or sets the subtitle.
            </summary>
            <value>The subtitle.</value>
        </member>
        <member name="T:PublicDomain.Feeder.AtomFeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.FeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IFeedItem">
            <summary>
            Base interface that represents a feed item or entry.
            As for IFeed, the best way to get to intelligible properties,
            if not distilling into a IDistilledFeedItem, is
            to cast to specific sub-interfaces of IFeedItem and conditionally
            use those or assume that it is a specific item type. Again,
            casting to a specific sub-interface is not completely predictable.
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.IFeedItem.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.FeedItem.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.IAtomFeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Authors">
            <summary>
            Gets or sets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Links">
            <summary>
            Gets or sets the links.
            </summary>
            <value>The links.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Contributors">
            <summary>
            Gets or sets the contributors.
            </summary>
            <value>The contributors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Published">
            <summary>
            Gets or sets the published.
            </summary>
            <value>The published.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IAtomFeedItem.Rights">
            <summary>
            Gets or sets the rights.
            </summary>
            <value>The rights.</value>
        </member>
        <member name="M:PublicDomain.Feeder.AtomFeedItem.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Authors">
            <summary>
            Gets or sets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Links">
            <summary>
            Gets or sets the links.
            </summary>
            <value>The links.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Summary">
            <summary>
            Gets or sets the summary.
            </summary>
            <value>The summary.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Contributors">
            <summary>
            Gets or sets the contributors.
            </summary>
            <value>The contributors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Published">
            <summary>
            Gets or sets the published.
            </summary>
            <value>The published.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeedItem.Rights">
            <summary>
            Gets or sets the rights.
            </summary>
            <value>The rights.</value>
        </member>
        <member name="T:PublicDomain.Data.SQLHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.SQLHelper.DefaultShortVarcharLength">
            <summary>
            255
            </summary>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.Normalize(PublicDomain.Data.DatabaseType,System.String)">
            <summary>
            Normalizes the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.ObjectToDbString(PublicDomain.Data.DatabaseType,System.Object)">
            <summary>
            Objects to db string.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.ObjectToDbString(PublicDomain.Data.DatabaseType,System.Object,System.Data.DbType)">
            <summary>
            Objects to db string.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="val">The val.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.ConcatFunction(PublicDomain.Data.DatabaseType,System.Boolean,System.Object[])">
            <summary>
            Concats the function.
            </summary>
            <param name="targetDB">The target DB.</param>
            <param name="skipFirst">if set to <c>true</c> [skip first].</param>
            <param name="toConcat">To concat.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.GetDatabaseType(PublicDomain.Data.DatabaseType,System.Type)">
            <summary>
            Gets the type of the database.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.GenerateCreateTablesQuery(System.Data.DataTable[])">
            <summary>
            Generates the create tables query.
            </summary>
            <param name="tables">The tables.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.AddForeignKeyConstraint(System.Data.DataTable,System.String,System.Data.DataTable,System.String)">
            <summary>
            Adds the foreign key constraint.
            </summary>
            <param name="localTable">The local table.</param>
            <param name="localColumnName">Name of the local column.</param>
            <param name="foreignTable">The foreign table.</param>
            <param name="foreignColumnName">Name of the foreign column.</param>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.AddPrimaryKeyConstraint(System.Data.DataTable,System.String[])">
            <summary>
            Adds the primary key constraint.
            </summary>
            <param name="table">The table.</param>
            <param name="columnNames">The column names.</param>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.AddColumn(System.Data.DataTable,System.String,System.Type)">
            <summary>
            Adds the column.
            </summary>
            <param name="table">The table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.AddColumn(System.Data.DataTable,System.String,System.Type,System.Boolean)">
            <summary>
            Adds the column.
            </summary>
            <param name="table">The table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="allowDBNull">if set to <c>true</c> [allow DB null].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.AddColumn(System.Data.DataTable,System.String,System.Type,System.Boolean,System.Object)">
            <summary>
            Adds the column.
            </summary>
            <param name="table">The table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="allowDBNull">if set to <c>true</c> [allow DB null].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.SetMaxLength(System.Data.DataColumn,System.Int32)">
            <summary>
            Sets the length of the max.
            </summary>
            <param name="col">The col.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.GetMaxLength(System.Data.DataColumn)">
            <summary>
            Gets the length of the max.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.SetIsUnicode(System.Data.DataColumn,System.Boolean)">
            <summary>
            Sets the is unicode.
            </summary>
            <param name="col">The col.</param>
            <param name="isUnicode">if set to <c>true</c> [is unicode].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.IsUnicode(System.Data.DataColumn)">
            <summary>
            Determines whether the specified col is unicode.
            </summary>
            <param name="col">The col.</param>
            <returns>
            	<c>true</c> if the specified col is unicode; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.GetScale(System.Data.DataColumn)">
            <summary>
            Gets the scale.
            </summary>
            <param name="col">The col.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.GetStatementEndCharacter(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the statement end character.
            </summary>
            <param name="supportedDBType">Type of the supported DB.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.SQLHelper.IsExceptionForeignKeyConstraintError(System.Exception)">
            <summary>
            Determines whether [is exception foreing key constraint] [the specified se].
            </summary>
            <param name="e">The e.</param>
            <returns>
            	<c>true</c> if [is exception foreing key constraint] [the specified se]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PublicDomain.Data.DatabaseType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.Unknown">
            <summary>
            Unknown database type
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.Db2">
            <summary>
            http://www.ibm.com/db2/
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.MySql">
            <summary>
            http://www.mysql.com/
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.Odbc">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.OleDb">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.Oracle">
            <summary>
            http://www.oracle.com/database/
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.PostgreSql">
            <summary>
            http://www.postgresql.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseType.SqlServer">
            <summary>
            http://www.microsoft.com/sql/
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptSourceElement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.EcmaScript.EcmaScriptNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.EcmaScript.EcmaScriptNode.InnerScript">
            <summary>
            Gets the inner script.
            </summary>
            <value>The inner script.</value>
        </member>
        <member name="P:PublicDomain.EcmaScript.EcmaScriptNode.OuterScript">
            <summary>
            Gets the outer script.
            </summary>
            <value>The outer script.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptGotoStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptBlock">
            <summary>
            Represents code within {}
            </summary>
        </member>
        <member name="P:PublicDomain.EcmaScript.EcmaScriptBlock.ForcedNoBraces">
            <summary>
            Gets a value indicating whether [forced no braces].
            </summary>
            <value><c>true</c> if [forced no braces]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PublicDomain.Win32">
            <summary>
            Interfaces into Win32 calls.
            http://www.codeproject.com/csharp/essentialpinvoke.asp
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GetFreeDiskSpaceOfMainSystemVolume">
            <summary>
            Gets the free disk space of the main system volume.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetFreeDiskSpace(System.String)">
            <summary>
            Gets the free disk space.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetTotalDiskSpaceOfMainSystemVolume">
            <summary>
            Gets the total disk space of main system volume.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetTotalDiskSpace(System.String)">
            <summary>
            Gets the total disk space.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetAddRemoveProgramList">
            <summary>
            Gets the add remove program list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetAddRemoveProgramList(System.String)">
            <summary>
            Gets the add remove program list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.LogoffCurrentUser">
            <summary>
            Logoffs the current user.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.LogoffCurrentUser(System.Boolean)">
            <summary>
            Logoffs the current user.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
        </member>
        <member name="M:PublicDomain.Win32.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Shutdown(System.Boolean)">
            <summary>
            Shutdowns the specified force.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
        </member>
        <member name="M:PublicDomain.Win32.Shutdown(System.Boolean,System.Boolean)">
            <summary>
            Shutdowns the specified force.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
            <param name="powerOff">if set to <c>true</c> [power off].</param>
        </member>
        <member name="M:PublicDomain.Win32.RestartWindows">
            <summary>
            Restarts the windows.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.RestartWindows(System.Boolean)">
            <summary>
            Restarts the windows.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
        </member>
        <member name="M:PublicDomain.Win32.RestartWindows(System.Boolean,System.Boolean)">
            <summary>
            Restarts the windows.
            </summary>
            <param name="force">if set to <c>true</c> [force].</param>
            <param name="restartApps">if set to <c>true</c> [restart apps].</param>
        </member>
        <member name="M:PublicDomain.Win32.ExitWindows(PublicDomain.Win32.WindowsControl)">
            <summary>
            Exits the windows.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExitWindows(PublicDomain.Win32.WindowsControl,System.Boolean)">
            <summary>
            Exits the windows.
            </summary>
            <param name="control">The control.</param>
            <param name="force">if set to <c>true</c> [force].</param>
        </member>
        <member name="M:PublicDomain.Win32.ExitWindows(PublicDomain.Win32.WindowsControl,System.Boolean,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Exits the windows.
            </summary>
            <param name="control">The control.</param>
            <param name="force">if set to <c>true</c> [force].</param>
            <param name="planned">if set to <c>true</c> [planned].</param>
            <param name="majorReason">The major reason.</param>
            <param name="minorReason">The minor reason.</param>
        </member>
        <member name="M:PublicDomain.Win32.GetLastError">
            <summary>
            Gets the last error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetLastErrorThrow">
            <summary>
            Gets the last error throw.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GetLocalTime">
            <summary>
            Gets the local time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetSystemTime">
            <summary>
            Gets the system time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetLocalTimeTz">
            <summary>
            Gets the local time tz.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GetSystemTimeTz">
            <summary>
            Gets the system time tz.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.SetSystemTimeZone(PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION)">
            <summary>
            Sets the system time zone.
            </summary>
            <param name="tzInfo">The tz info.</param>
        </member>
        <member name="M:PublicDomain.Win32.GetSystemTimeZones">
            <summary>
            Gets the system time zones.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.IComWrapper`1">
            <summary>
            Wraps a COM interface pointer.
            </summary>
            <typeparam name="T">The COM interface</typeparam>
        </member>
        <member name="P:PublicDomain.Win32.IComWrapper`1.ComInterface">
            <summary>
            Gets the COM interface.
            </summary>
            <value>The COM interface.</value>
        </member>
        <member name="T:PublicDomain.Win32.IInstalledProgram">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.IInstalledProgram.Uninstall">
            <summary>
            Uninstalls this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.IInstalledProgram.Uninstall(System.Boolean)">
            <summary>
            Uninstalls this instance.
            </summary>
            <param name="quiet">if set to <c>true</c> [quiet].</param>
        </member>
        <member name="M:PublicDomain.Win32.IInstalledProgram.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.RegistryKey">
            <summary>
            Gets the registry key.
            </summary>
            <value>The registry key.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.DisplayName">
            <summary>
            Gets or sets the name of the display.
            </summary>
            <value>The name of the display.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.DisplayIcon">
            <summary>
            Gets or sets the display icon.
            </summary>
            <value>The display icon.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.EstimatedSize">
            <summary>
            Gets or sets the size of the estimated.
            </summary>
            <value>The size of the estimated.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Contact">
            <summary>
            Gets or sets the contact.
            </summary>
            <value>The contact.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.DisplayVersion">
            <summary>
            Gets or sets the display version.
            </summary>
            <value>The display version.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.HelpLink">
            <summary>
            Gets or sets the help link.
            </summary>
            <value>The help link.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.HelpTelephone">
            <summary>
            Gets or sets the help telephone.
            </summary>
            <value>The help telephone.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.InstallDate">
            <summary>
            Gets or sets the install date.
            </summary>
            <value>The install date.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Publisher">
            <summary>
            Gets or sets the publisher.
            </summary>
            <value>The publisher.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.ModifyPath">
            <summary>
            Gets the modify path.
            </summary>
            <value>The modify path.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Readme">
            <summary>
            Gets or sets the readme.
            </summary>
            <value>The readme.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.UninstallString">
            <summary>
            Gets the uninstall string.
            </summary>
            <value>The uninstall string.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.UriInfoAbout">
            <summary>
            Gets or sets the URI info about.
            </summary>
            <value>The URI info about.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.UriUpdateInfo">
            <summary>
            Gets or sets the URI update info.
            </summary>
            <value>The URI update info.</value>
        </member>
        <member name="P:PublicDomain.Win32.IInstalledProgram.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:PublicDomain.Win32.InstalledProgram">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.InstalledProgram.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Win32.InstalledProgram"/> class.
            </summary>
            <param name="keyName">Name of the key.</param>
        </member>
        <member name="M:PublicDomain.Win32.InstalledProgram.Uninstall">
            <summary>
            Uninstalls this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.InstalledProgram.Uninstall(System.Boolean)">
            <summary>
            Uninstalls this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.InstalledProgram.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.InstalledProgram.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.RegistryKey">
            <summary>
            Gets the registry key.
            </summary>
            <value>The registry key.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.DisplayName">
            <summary>
            Gets or sets the name of the display.
            </summary>
            <value>The name of the display.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.DisplayIcon">
            <summary>
            Gets or sets the display icon.
            </summary>
            <value>The display icon.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.EstimatedSize">
            <summary>
            Gets or sets the size of the estimated.
            </summary>
            <value>The size of the estimated.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Contact">
            <summary>
            Gets or sets the contact.
            </summary>
            <value>The contact.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.DisplayVersion">
            <summary>
            Gets or sets the display version.
            </summary>
            <value>The display version.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.HelpLink">
            <summary>
            Gets or sets the help link.
            </summary>
            <value>The help link.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.HelpTelephone">
            <summary>
            Gets or sets the help telephone.
            </summary>
            <value>The help telephone.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.InstallDate">
            <summary>
            Gets or sets the install date.
            </summary>
            <value>The install date.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Publisher">
            <summary>
            Gets or sets the publisher.
            </summary>
            <value>The publisher.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.ModifyPath">
            <summary>
            Gets the modify path.
            </summary>
            <value>The modify path.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Readme">
            <summary>
            Gets or sets the readme.
            </summary>
            <value>The readme.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.UninstallString">
            <summary>
            Gets the uninstall string.
            </summary>
            <value>The uninstall string.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.UriInfoAbout">
            <summary>
            Gets or sets the URI info about.
            </summary>
            <value>The URI info about.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.UriUpdateInfo">
            <summary>
            Gets or sets the URI update info.
            </summary>
            <value>The URI update info.</value>
        </member>
        <member name="P:PublicDomain.Win32.InstalledProgram.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:PublicDomain.Win32.GacAssemblyName">
            <summary>
            Wrapper around <see cref="T:PublicDomain.Win32.Win32Interfaces.IAssemblyName"/>
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyName.#ctor(PublicDomain.Win32.Win32Interfaces.IAssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="P:PublicDomain.Win32.GacAssemblyName.AssemblyName"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyName.GetDisplayName(PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS)">
            <summary>
            Gets the name of the display.
            </summary>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyName.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.ComInterface">
            <summary>
            Gets the COM interface.
            </summary>
            <value>The COM interface.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.DisplayName">
            <summary>
            Gets the display name of the assembly. This
            is the common format strong name, with the Name of the assembly,
            followed by the version, followed by the Culture, and finally
            followed by the PublicKeyToken. For example:
            
            System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
            </summary>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.Name">
            <summary>
            Gets the simple display name.
            </summary>
            <value>The simple display name.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.PublicKeyToken">
            <summary>
            Gets the public key token.
            </summary>
            <value>The public key token.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.PublicKey">
            <summary>
            Gets the public key.
            </summary>
            <value>The public key.</value>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyName.Culture">
            <summary>
            Gets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="T:PublicDomain.Win32.GacAssemblyEnum">
            <summary>
            Wraps <see cref="T:PublicDomain.Win32.Win32Interfaces.IAssemblyEnum"/>
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.#ctor(PublicDomain.Win32.Win32Interfaces.IAssemblyEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Win32.GacAssemblyEnum"/> class.
            </summary>
            <param name="assemblyEnum">The assembly enum.</param>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyEnum.ComInterface">
            <summary>
            Gets the COM interface.
            </summary>
            <value>The COM interface.</value>
        </member>
        <member name="T:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.#ctor(PublicDomain.Win32.GacAssemblyEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator"/> class.
            </summary>
            <param name="assemblyEnum">The assembly enum.</param>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="P:PublicDomain.Win32.GacAssemblyEnum.AssemblyEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
        <member name="T:PublicDomain.Win32.GlobalAssemblyCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.GlobalAssemblyCache.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            The assembly is referenced by an application that has been
            installed by using Windows Installer. The szIdentifier field
            is set to MSI, and szNonCannonicalData is set to Windows Installer.
            This scheme must only be used by Windows Installer itself.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.GlobalAssemblyCache.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            The assembly is referenced by an application that appears
            in Add/Remove Programs. The szIdentifier field is the token
            that is used to register the application with Add/Remove programs.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.GlobalAssemblyCache.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            The assembly is referenced by an application that is represented
            by a file in the file system. The szIdentifier field is the path
            to this file.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.GlobalAssemblyCache.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            The assembly is referenced by an application that is only
            represented by an opaque string. The szIdentifier is this
            opaque string. The GAC does not perform existence checking
            for opaque references when you remove this.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyCache">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyCache(PublicDomain.Win32.Win32Interfaces.IAssemblyCache@,System.UInt32)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyName(System.String)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyNameObject(PublicDomain.Win32.Win32Interfaces.IAssemblyName@,System.String,PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS,System.IntPtr)"/>.
            Certain properties, such as processor architecture, are set to their default values.
            </summary>
            <param name="name">A string representation of the assembly name or of a full assembly reference that is determined by dwFlags. The string representation can be null.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyName(System.String,PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyNameObject(PublicDomain.Win32.Win32Interfaces.IAssemblyName@,System.String,PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS,System.IntPtr)"/>
            </summary>
            <param name="name">A string representation of the assembly name or of a full assembly reference that is determined by dwFlags. The string representation can be null.</param>
            <param name="flags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyEnum">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyEnum@,System.IntPtr,PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.IntPtr)"/>.
            Enumerates only the GAC with no filter.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyName)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyEnum@,System.IntPtr,PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.IntPtr)"/>.
            Enumerates only the GAC.
            </summary>
            <param name="filterName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyEnum@,System.IntPtr,PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.IntPtr)"/>
            </summary>
            <param name="filterName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="flags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32CreateInstallReferenceEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyName)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.CreateInstallReferenceEnum(PublicDomain.Win32.Win32Interfaces.IInstallReferenceEnum@,PublicDomain.Win32.Win32Interfaces.IAssemblyName,System.UInt32,System.IntPtr)"/>
            </summary>
            <param name="name">The assembly name for which the references are enumerated.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.Win32GetCachePath(PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS)">
            <summary>
            Wrapper around <see cref="M:PublicDomain.Win32.ExternalMethods.GetCachePath(PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)"/>
            </summary>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.GetAllAssemblies">
            <summary>
            Gets all the assemblies in the GAC.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.FindAssemblies(PublicDomain.Win32.GacAssemblyName)">
            <summary>
            Finds all the assemblies in the GAC, matching the <paramref name="filterName"/> filter
            and <paramref name="flags"/>.
            </summary>
            <param name="filterName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.FindAssemblies(System.String)">
            <summary>
            Finds the assemblies.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.FindAssemblies(PublicDomain.Win32.GacAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS)">
            <summary>
            Finds all the assemblies in the GAC, matching the <paramref name="filterName"/> filter
            and <paramref name="flags"/>.
            </summary>
            <param name="filterName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="flags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.CreateAssemblyName(System.String)">
            <summary>
            Creates the name of the assembly.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.FindAssemblyWithLargestVersion(System.String)">
            <summary>
            Finds the assembly with the largest version.
            </summary>
            <param name="filterName">Name of the filter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.InstallAssembly(System.String,PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE[])">
            <summary>
            Installs the assembly.
            </summary>
            <param name="dll">The DLL.</param>
            <param name="references">The references.</param>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.InstallAssembly(System.String,PublicDomain.Win32.Win32Enums.IASSEMBLYCACHE_INSTALL_FLAG,PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE[])">
            <summary>
            Installs the assembly.
            </summary>
            <param name="dll">The DLL.</param>
            <param name="flag">The flag.</param>
            <param name="references">The references.</param>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.InstallAssembly(System.String,PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE,System.String,System.String)">
            <summary>
            Installs the assembly.
            </summary>
            <param name="dll">Full path to the dll.</param>
            <param name="referenceType">Type of the reference.</param>
            <param name="referenceDetails">The reference details.</param>
            <param name="nonCanonicalData">The non canonical data.</param>
        </member>
        <member name="M:PublicDomain.Win32.GlobalAssemblyCache.UninstallAssembly(System.String)">
            <summary>
            Uninstalls the assembly from the GAC.
            </summary>
            <param name="assemblyStrongName">Name of the assembly strong.</param>
        </member>
        <member name="P:PublicDomain.Win32.GlobalAssemblyCache.Path">
            <summary>
            Gets the path of the GAC.
            </summary>
            <value>The path of the GAC.</value>
        </member>
        <member name="P:PublicDomain.Win32.GlobalAssemblyCache.ZapPath">
            <summary>
            Gets the zap path.
            </summary>
            <value>The zap path.</value>
        </member>
        <member name="P:PublicDomain.Win32.GlobalAssemblyCache.DownloadPath">
            <summary>
            Gets the download path.
            </summary>
            <value>The download path.</value>
        </member>
        <member name="T:PublicDomain.Win32.Win32Constants">
            <summary>
            Win32 constants
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.S_OK">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.S_FALSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_LOGOFF">
            <summary>
            Shuts down all processes running in the logon session of the process that called the ExitWindowsEx function. Then it logs the user off.
            This flag can be used only by processes running in an interactive user's logon session.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_POWEROFF">
            <summary>
            Shuts down the system and turns off the power. The system must support the power-off feature.
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_REBOOT">
            <summary>
            Shuts down the system and then restarts the system.
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_RESTARTAPPS">
            <summary>
            Shuts down the system and then restarts it, as well as any applications that have been registered for restart using the RegisterApplicationRestart function. These application receive the WM_QUERYENDSESSION message with lParam set to the ENDSESSION_CLOSEAPP value. For more information, see Guidelines for Applications.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_SHUTDOWN">
            <summary>
            Shuts down the system to a point at which it is safe to turn off the power. All file buffers have been flushed to disk, and all running processes have stopped.
            The calling process must have the SE_SHUTDOWN_NAME privilege. For more information, see the following Remarks section.
            Specifying this flag will not turn off the power even if the system supports the power-off feature. You must specify EWX_POWEROFF to do this.
            Windows XP SP1:  If the system supports the power-off feature, specifying this flag turns off the power.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_FORCE">
            <summary>
            This flag has no effect if terminal services is enabled. Otherwise, the system does not send the WM_QUERYENDSESSION and WM_ENDSESSION messages. This can cause applications to lose data. Therefore, you should only use this flag in an emergency.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.EWX_FORCEIFHUNG">
            <summary>
            Forces processes to terminate if they do not respond to the WM_QUERYENDSESSION or WM_ENDSESSION message within the timeout interval. For more information, see the Remarks.
            Windows NT and Windows Me/98/95:  This value is not supported.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_APPLICATION">
            <summary>
            Application issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_HARDWARE">
            <summary>
            Hardware issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_LEGACY_API">
            <summary>
            The InitiateSystemShutdown function was used instead of InitiateSystemShutdownEx.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_OPERATINGSYSTEM">
            <summary>
            Operating system issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_OTHER">
            <summary>
            Other issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_POWER">
            <summary>
            Power failure.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_SOFTWARE">
            <summary>
            Software issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MAJOR_SYSTEM">
            <summary>
            System failure.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_BLUESCREEN">
            <summary>
            Blue screen crash event.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_CORDUNPLUGGED">
            <summary>
            Unplugged.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_DISK">
            <summary>
            Disk.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_ENVIRONMENT">
            <summary>
            Environment.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_HARDWARE_DRIVER">
            <summary>
            Driver.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_HOTFIX">
            <summary>
            Hot fix.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_HOTFIX_UNINSTALL">
            <summary>
            Hot fix uninstallation.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_HUNG">
            <summary>
            Unresponsive.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_INSTALLATION">
            <summary>
            Installation.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_MAINTENANCE">
            <summary>
            Maintenance.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_MMC">
            <summary>
            MMC issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY">
            <summary>
            Network connectivity.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_NETWORKCARD">
            <summary>
            Network card.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_OTHER">
            <summary>
            Other issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_OTHERDRIVER">
            <summary>
            Other driver event.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_POWER_SUPPLY">
            <summary>
            Power supply.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_PROCESSOR">
            <summary>
            Processor.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_RECONFIG">
            <summary>
            Reconfigure.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_SECURITY">
            <summary>
            Security issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_SECURITYFIX">
            <summary>
            Security patch.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL">
            <summary>
            Security patch uninstallation.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_SERVICEPACK">
            <summary>
            Service pack.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL">
            <summary>
            Service pack uninstallation.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_TERMSRV">
            <summary>
            Terminal Services.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_UNSTABLE">
            <summary>
            Unstable.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_UPGRADE">
            <summary>
            Upgrade.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_MINOR_WMI">
            <summary>
            WMI issue.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Constants.SHTDN_REASON_FLAG_PLANNED">
            <summary>
            The shutdown was planned. The system generates a System State Data (SSD) file. This file contains system state information such as the processes, threads, memory usage, and configuration.
            If this flag is not present, the shutdown was unplanned. Notification and reporting options are controlled by a set of policies. For example, after logging in, the system displays a dialog box reporting the unplanned shutdown if the policy has been enabled. An SSD file is created only if the SSD policy is enabled on the system. The administrator can use Windows Error Reporting to send the SSD data to a central location, or to Microsoft.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.ExternalMethods">
            <summary>
            Class that contains PInvoke methods into Win32
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.ExitWindowsEx(System.UInt32,System.UInt32)">
            <summary>
            Logs off the interactive user, shuts down the system, or shuts down and restarts the system. It sends the WM_QUERYENDSESSION message to all applications to determine if they can be terminated.
            http://msdn2.microsoft.com/en-us/library/aa376868.aspx
            </summary>
            <param name="uFlags"></param>
            <param name="dwReason">The reason for initiating the shutdown. This parameter must be one of the system shutdown reason codes.
            If this parameter is zero, the SHTDN_REASON_FLAG_PLANNED reason code will not be set and therefore the default action is an undefined shutdown that is logged as "No title for this reason could be found". By default, it is also an unplanned shutdown. Depending on how the system is configured, an unplanned shutdown triggers the creation of a file that contains the system state information, which can delay shutdown. Therefore, do not use zero for this parameter.</param>
            <returns>If the function succeeds, the return value is nonzero. Because the function executes asynchronously, a nonzero return value indicates that the shutdown has been initiated. It does not indicate whether the shutdown will succeed. It is possible that the system, the user, or another application will abort the shutdown.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyCache(PublicDomain.Win32.Win32Interfaces.IAssemblyCache@,System.UInt32)">
            <summary>
            To obtain an instance of the CreateAssemblyCache API
            </summary>
            <param name="ppAsmCache">Pointer to return IAssemblyCache</param>
            <param name="dwReserved">Reserved, must be zero.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyNameObject(PublicDomain.Win32.Win32Interfaces.IAssemblyName@,System.String,PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS,System.IntPtr)">
            <summary>
            An instance of IAssemblyName is obtained by calling the CreateAssemblyNameObject API
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the IAssemblyName pointer that is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is determined by dwFlags. The string representation can be null.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CreateAssemblyEnum(PublicDomain.Win32.Win32Interfaces.IAssemblyEnum@,System.IntPtr,PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateAssemblyEnum API, call the CreateAssemblyNameObject API
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the IAssemblyEnum pointer.</param>
            <param name="pUnkReserved">Must be null.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pvReserved">Must be NULL.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CreateInstallReferenceEnum(PublicDomain.Win32.Win32Interfaces.IInstallReferenceEnum@,PublicDomain.Win32.Win32Interfaces.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateInstallReferenceEnum API, call the CreateInstallReferenceEnum API
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the IInstallReferenceEnum pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.GetCachePath(PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            The GetCachePath API returns the storage location of the GAC.
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the pwszCachePath buffer, in Unicode characters.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.GetDiskFreeSpaceEx(System.String,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            The GetDiskFreeSpaceEx function retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
            </summary>
            <param name="lpDirectoryName">A pointer to a null-terminated string that specifies a directory on a disk.
            If this parameter is NULL, the function uses the root of the current disk.
            If this parameter is a UNC name, it must include a trailing backslash, for example, \\MyServer\MyShare\.
            This parameter does not have to specify the root directory on a disk. The function accepts any directory on a disk.
            The calling application must have FILE_LIST_DIRECTORY access rights for this directory.</param>
            <param name="lpFreeBytesAvailableToCaller">A pointer to a variable that receives the total number of free bytes on a disk that are available to the user who is associated with the calling thread.
            This parameter can be NULL.
            Windows Me/98/95:  This parameter cannot be NULL.
            If per-user quotas are being used, this value may be less than the total number of free bytes on a disk.</param>
            <param name="lpTotalNumberOfBytes">A pointer to a variable that receives the total number of bytes on a disk that are available to the user who is associated with the calling thread.
            This parameter can be NULL.
            Windows Me/98/95 and Windows NT 4.0:  This parameter cannot be NULL.
            If per-user quotas are being used, this value may be less than the total number of bytes on a disk.
            To determine the total number of bytes on a disk or volume, use IOCTL_DISK_GET_LENGTH_INFO.</param>
            <param name="lpTotalNumberOfFreeBytes">A pointer to a variable that receives the total number of free bytes on a disk.
            This parameter can be NULL.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is 0 (zero). To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CreateJobObject(PublicDomain.Win32.Win32Structures.SECURITY_ATTRIBUTES@,System.String)">
            <summary>
            Creates or opens a job object.
            </summary>
            <param name="lpJobAttributes">A pointer to a SECURITY_ATTRIBUTES structure that specifies the security descriptor for the job object and determines whether child processes can inherit the returned handle. If lpJobAttributes is NULL, the job object gets a default security descriptor and the handle cannot be inherited. The ACLs in the default security descriptor for a job object come from the primary or impersonation token of the creator.</param>
            <param name="lpName">The name of the job. The name is limited to MAX_PATH characters. Name comparison is case-sensitive.
            If lpName is NULL, the job is created without a name.
            If lpName matches the name of an existing event, semaphore, mutex, waitable timer, or file-mapping object, the function fails and the GetLastError function returns ERROR_INVALID_HANDLE. This occurs because these objects share the same name space.
            The object can be created in a private namespace. For more information, see Object Namespaces.
            Terminal Services:  The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session name space. The remainder of the name can contain any character except the backslash character (\). For more information, see Kernel Object Namespaces.
            Windows 2000:  If Terminal Services is not running, the "Global\" and "Local\" prefixes are ignored. The remainder of the name can contain any character except the backslash character.</param>
            <returns>If the function succeeds, the return value is a handle to the job object. The handle has the JOB_OBJECT_ALL_ACCESS access right. If the object existed before the function call, the function returns a handle to the existing job object and GetLastError returns ERROR_ALREADY_EXISTS.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.CloseHandle(System.IntPtr)">
            <summary>
            Closes an open object handle.
            </summary>
            <param name="hObject">A valid handle to an open object.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            If the application is running under a debugger, the function will throw an exception if it receives either a handle value that is not valid or a pseudo-handle value. This can happen if you close a handle twice, or if you call CloseHandle on a handle returned by the FindFirstFile function.</returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.SetInformationJobObjectLimit(System.IntPtr,PublicDomain.Win32.Win32Enums.JobObjectInfoClass,PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION@,System.Int32)">
            <summary>
            
            </summary>
            <param name="hJob"></param>
            <param name="JobObjectInfoClass"></param>
            <param name="lpJobObjectInfo"></param>
            <param name="cbJobObjectInfoLength"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.QueryInformationJobObjectLimit(System.IntPtr,PublicDomain.Win32.Win32Enums.JobObjectInfoClass,PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION@,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="hJob"></param>
            <param name="JobObjectInfoClass"></param>
            <param name="lpJobObjectInfo"></param>
            <param name="cbJobObjectInfoLength"></param>
            <param name="lpReturnLength"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.AssignProcessToJobObject(System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hJob"></param>
            <param name="hProcess"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.GetSystemTime(PublicDomain.Win32.Win32Structures.SYSTEMTIME@)">
            <summary>
            Gets the system time.
            </summary>
            <param name="st">The st.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.GetLocalTime(PublicDomain.Win32.Win32Structures.SYSTEMTIME@)">
            <summary>
            Gets the local time.
            </summary>
            <param name="st">The st.</param>
        </member>
        <member name="M:PublicDomain.Win32.ExternalMethods.SetTimeZoneInformation(PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION@)">
            <summary>
            Sets the time zone information.
            </summary>
            <param name="lpTimeZoneInformation">The lp time zone information.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.Job">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Job.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Win32.Job"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:PublicDomain.Win32.Job.#ctor(System.String,System.Boolean,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Win32.Job"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="inheritSecurityHandle">if set to <c>true</c> [inherit security handle].</param>
            <param name="securityDescriptor">The security descriptor.</param>
        </member>
        <member name="M:PublicDomain.Win32.Job.CreateJobWithMemoryLimits(System.UInt32,System.UInt32,System.Diagnostics.Process[])">
            <summary>
            Creates the job with memory limits.
            </summary>
            <param name="minWorkingSetSize">Size of the min working set.</param>
            <param name="maxWorkingSetSize">Size of the max working set.</param>
            <param name="processesToLimit">The processes to limit.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Job.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:PublicDomain.Win32.Job"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Job.Create">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Job.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Job.SetLimitWorkingSetSize(System.UInt32,System.UInt32)">
            <summary>
            Sets the size of the limit maximum working set.
            </summary>
            <param name="minWorkingSetSize">Size of the min working set.</param>
            <param name="maxWorkingSetSize">Size of the max working set.</param>
        </member>
        <member name="M:PublicDomain.Win32.Job.QueryInformationJobObjectLimit">
            <summary>
            Queries the information job object limit.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Job.AssignProcess(System.Diagnostics.Process)">
            <summary>
            Assigns the process.
            </summary>
            <param name="process">The process.</param>
        </member>
        <member name="M:PublicDomain.Win32.Job.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Win32.Job.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Win32.Job.InheritSecurityHandle">
            <summary>
            Gets a value indicating whether [inherit security handle].
            </summary>
            <value>
            	<c>true</c> if [inherit security handle]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Win32.Job.SecurityDescriptor">
            <summary>
            Gets the security descriptor.
            </summary>
            <value>The security descriptor.</value>
        </member>
        <member name="T:PublicDomain.Win32.WindowsControl">
            <summary>
            Enumeration that directs a windows control action.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.WindowsControl.Logoff">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.WindowsControl.ShutdownAndPowerOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.WindowsControl.ShutdownNoPowerOff">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.WindowsControl.Restart">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.WindowsControl.RestartApps">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE.ApplicationInFilesystem">
            <summary>
            The assembly is referenced by an application that is represented
            by a file in the file system.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE.ProgramInAddRemoveProgramsList">
            <summary>
            The assembly is referenced by an application that appears
            in Add/Remove Programs.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE.OpaqueProgram">
            <summary>
            The assembly is referenced by an application that is only
            represented by an opaque string. The GAC does not perform existence checking
            for opaque references when you remove this.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.INSTALL_GAC_REFERENCE.MSI">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.Uninstalled">
            <summary>
            The assembly files have been removed from the GAC.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.StillInUs">
            <summary>
            An application is using the assembly. This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.AlreadyUninstalled">
            <summary>
            The assembly does not exist in the GAC.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.DeletePending">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.HasInstallReferences">
            <summary>
            The assembly has not been removed from the GAC because another application reference exists.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.AssemblyCacheUninstallDisposition.ReferenceNotFound">
            <summary>
            The reference that is specified in pRefData is not found in the GAC.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS.CANOF_PARSE_DISPLAY_NAME">
            <summary>
            If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.CREATE_ASM_NAME_OBJ_FLAGS.CANOF_SET_DEFAULT_VALUES">
            <summary>
            If this flag is specified, certain properties, such as processor architecture, are set to their default values.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_PUBLIC_KEY">
            <summary>
            Property ID for the assembly's public key. The value is a byte array.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_PUBLIC_KEY_TOKEN">
            <summary>
            Property ID for the assembly's public key token. The value is a byte array.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_HASH_VALUE">
            <summary>
            Property ID for a reserved name-value pair. The value is a byte array.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_NAME">
            <summary>
            Property ID for the assembly's simple name. The value is a string value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_MAJOR_VERSION">
            <summary>
            Property ID for the assembly's major version. The value is a WORD value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_MINOR_VERSION">
            <summary>
            Property ID for the assembly's minor version. The value is a WORD value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_BUILD_NUMBER">
            <summary>
            Property ID for the assembly's build version. The value is a WORD value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_REVISION_NUMBER">
            <summary>
            Property ID for the assembly's revision version. The value is a WORD value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_CULTURE">
            <summary>
            Property ID for the assembly's culture. The value is a string value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_PROCESSOR_ID_ARRAY">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_OSINFO_ARRAY">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_HASH_ALGID">
            <summary>
            Property ID for a reserved name-value pair. The value is a DWORD value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_ALIAS">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_CODEBASE_URL">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_CODEBASE_LASTMOD">
            <summary>
            Property ID for a reserved name-value pair. The value is a FILETIME structure.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_NULL_PUBLIC_KEY">
            <summary>
            Property ID for the assembly as a simply named assembly that does not have a public key.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_NULL_PUBLIC_KEY_TOKEN">
            <summary>
            Property ID for the assembly as a simply named assembly that does not have a public key token.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_CUSTOM">
            <summary>
            Property ID for a reserved name-value pair. The value is a string value.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_NULL_CUSTOM">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_MVID">
            <summary>
            Property ID for a reserved name-value pair.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_NAME.ASM_NAME_MAX_PARAMS">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_VERSION">
            <summary>
            Includes the version number as part of the display name.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_CULTURE">
            <summary>
            Includes the culture.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_PUBLIC_KEY_TOKEN">
            <summary>
            Includes the public key token.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_PUBLIC_KEY">
            <summary>
            Includes the public key.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_CUSTOM">
            <summary>
            Includes the custom part of the assembly name.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_PROCESSORARCHITECTURE">
            <summary>
            Includes the processor architecture.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS.ASM_DISPLAYF_LANGUAGEID">
            <summary>
            Includes the language ID.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_NAME">
            <summary>
            Compare the name portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_MAJOR_VERSION">
            <summary>
            Compare the major version portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_MINOR_VERSION">
            <summary>
            Compare the minor version portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_BUILD_NUMBER">
            <summary>
            Compare the build version portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_REVISION_NUMBER">
            <summary>
            Compare the revision version portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_PUBLIC_KEY_TOKEN">
            <summary>
            Compare the public key token portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_CULTURE">
            <summary>
            Compare the culture portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_CUSTOM">
            <summary>
            Compare the custom portion of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_ALL">
            <summary>
            Compare all portions of the assembly names.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS.ASM_CMPF_DEFAULT">
            <summary>
            Ignore the version number to compare assemblies with simple names.
            
            For strongly named assemblies, ASM_CMPF_DEFAULT==ASM_CMPF_ALL.
            For simply named assemblies, this is also true. However, when
            performing IAssemblyName::IsEqual, the build number/revision 
            number will be removed from the comparison.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS.ASM_CACHE_ZAP">
            <summary>
            Enumerates the cache of precompiled assemblies by using Ngen.exe.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS.ASM_CACHE_GAC">
            <summary>
            Enumerates the GAC.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.ASM_CACHE_FLAGS.ASM_CACHE_DOWNLOAD">
            <summary>
            Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.IASSEMBLYCACHE_INSTALL_FLAG.IASSEMBLYCACHE_INSTALL_FLAG_REFRESH">
            <summary>
            If the assembly is already installed in the GAC and the file version numbers of the assembly being installed are the same or later, the files are replaced.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.IASSEMBLYCACHE_INSTALL_FLAG.IASSEMBLYCACHE_INSTALL_FLAG_FORCE_REFRESH">
            <summary>
            The files of an existing assembly are overwritten regardless of their version number.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.JobObjectInfoClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectBasicAccountingInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectBasicLimitInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectBasicProcessIdList">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectBasicUIRestrictions">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectSecurityLimitInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectEndOfJobTimeInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectAssociateCompletionPortInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectBasicAndIoAccountingInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.JobObjectInfoClass.JobObjectExtendedLimitInformation">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Enums.LimitFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_ACTIVE_PROCESS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_AFFINITY">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_BREAKAWAY_OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_JOB_MEMORY">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_JOB_TIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_PRIORITY_CLASS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_PROCESS_MEMORY">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_PROCESS_TIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_SCHEDULING_CLASS">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Enums.LimitFlags.JOB_OBJECT_LIMIT_WORKINGSET">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE">
            <summary>
            The FUSION_INSTALL_REFERENCE structure represents a reference
            that is made when an application has installed an assembly in the GAC.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE.cbSize">
            <summary>
            The size of the structure in bytes.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE.dwFlags">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE.guidScheme">
            <summary>
            The entity that adds the reference.
            
            Possible values for the guidScheme field can be one of the following:
            FUSION_REFCOUNT_MSI_GUID - The assembly is referenced by an application that has been installed by using Windows Installer. The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer. This scheme must only be used by Windows Installer itself.
            FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID - The assembly is referenced by an application that appears in Add/Remove Programs. The szIdentifier field is the token that is used to register the application with Add/Remove programs.
            FUSION_REFCOUNT_FILEPATH_GUID - The assembly is referenced by an application that is represented by a file in the file system. The szIdentifier field is the path to this file.
            FUSION_REFCOUNT_OPAQUE_STRING_GUID - The assembly is referenced by an application that is only represented by an opaque string. The szIdentifier is this opaque string. The GAC does not perform existence checking for opaque references when you remove this.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE.szIdentifier">
            <summary>
            A unique string that identifies the application that installed the assembly.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE.szNonCannonicalData">
            <summary>
            A string that is only understood by the entity that adds the reference. The GAC only stores this string.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO">
            <summary>
            The ASSEMBLY_INFO structure represents information about an
            assembly in the assembly cache.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO.cbAssemblyInfo">
            <summary>
            Size of the structure in bytes. Permits additions
            to the structure in future version of the .NET Framework.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO.dwAssemblyFlags">
            <summary>
            Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
            
            dwAssemblyFlags can have one of the following values:
            ASSEMBLYINFO_FLAG__INSTALLED - Indicates that the assembly is actually installed. Always set in current version of the .NET Framework.
            ASSEMBLYINFO_FLAG__PAYLOADRESIDENT - Never set in the current version of the .NET Framework.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO.uliAssemblySizeInKB">
            <summary>
            The size of the files that make up the assembly in kilobytes (KB).
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO.pszCurrentAssemblyPathBuf">
            <summary>
            A pointer to a string buffer that holds the current path of the directory that contains the files that make up the assembly. The path must end with a zero.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO.cchBuf">
            <summary>
            Size of the buffer that the pszCurrentAssemblyPathBug field points to.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.SECURITY_ATTRIBUTES">
            <summary>
            The SECURITY_ATTRIBUTES structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable. This structure provides security settings for objects created by various functions, such as CreateFile, CreatePipe, CreateProcess, RegCreateKeyEx, or RegSaveKeyEx.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SECURITY_ATTRIBUTES.nLength">
            <summary>
            The size, in bytes, of this structure. Set this value to the size of the SECURITY_ATTRIBUTES structure.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            A pointer to a security descriptor for the object that controls the sharing of it. If NULL is specified for this member, the object is assigned the default security descriptor of the calling process. This is not the same as granting access to everyone by assigning a NULL discretionary access control list (DACL). The default security descriptor is based on the default DACL of the access token belonging to the calling process. By default, the default DACL in the access token of a process allows access only to the user represented by the access token. If other users must access the object, you can either create a security descriptor with the appropriate access, or add ACEs to the DACL that grants access to a group of users.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is TRUE, the new process inherits the handle.
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.PerProcessUserTimeLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.PerJobUserTimeLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.LimitFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.MinimumWorkingSetSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.MaximumWorkingSetSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.ActiveProcessLimit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.Affinity">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.PriorityClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.JOBOBJECT_BASIC_LIMIT_INFORMATION.SchedulingClass">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.SYSTEMTIME">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wYear">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wMonth">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wDayOfWeek">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wDay">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wHour">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wMinute">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wSecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.SYSTEMTIME.wMilliseconds">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION">
            <summary>
            The TimeZoneInformation structure specifies information specific to the time zone.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.bias">
            <summary>
            Current bias for local time translation on this computer, in minutes. The bias is the difference, in minutes, between Coordinated Universal Time (UTC) and local time. All translations between UTC and local time are based on the following formula:
            <para>UTC = local time + bias</para>
            <para>This member is required.</para>
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.standardName">
            <summary>
            Pointer to a null-terminated string associated with standard time. For example, "EST" could indicate Eastern Standard Time. The string will be returned unchanged by the GetTimeZoneInformation function. This string can be empty.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.standardDate">
            <summary>
            A SystemTime structure that contains a date and local time when the transition from daylight saving time to standard time occurs on this operating system. If the time zone does not support daylight saving time or if the caller needs to disable daylight saving time, the wMonth member in the SystemTime structure must be zero. If this date is specified, the DaylightDate value in the TimeZoneInformation structure must also be specified. Otherwise, the system assumes the time zone data is invalid and no changes will be applied.
            <para>To select the correct day in the month, set the wYear member to zero, the wHour and wMinute members to the transition time, the wDayOfWeek member to the appropriate weekday, and the wDay member to indicate the occurence of the day of the week within the month (first through fifth).</para>
            <para>Using this notation, specify the 2:00a.m. on the first Sunday in April as follows: wHour = 2, wMonth = 4, wDayOfWeek = 0, wDay = 1. Specify 2:00a.m. on the last Thursday in October as follows: wHour = 2, wMonth = 10, wDayOfWeek = 4, wDay = 5.</para>
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.standardBias">
            <summary>
            Bias value to be used during local time translations that occur during standard time. This member is ignored if a value for the StandardDate member is not supplied.
            <para>This value is added to the value of the Bias member to form the bias used during standard time. In most time zones, the value of this member is zero.</para>
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.daylightName">
            <summary>
            Pointer to a null-terminated string associated with daylight saving time. For example, "PDT" could indicate Pacific Daylight Time. The string will be returned unchanged by the GetTimeZoneInformation function. This string can be empty.
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.daylightDate">
            <summary>
            A SystemTime structure that contains a date and local time when the transition from standard time to daylight saving time occurs on this operating system. If the time zone does not support daylight saving time or if the caller needs to disable daylight saving time, the wMonth member in the SystemTime structure must be zero. If this date is specified, the StandardDate value in the TimeZoneInformation structure must also be specified. Otherwise, the system assumes the time zone data is invalid and no changes will be applied.
            <para>To select the correct day in the month, set the wYear member to zero, the wHour and wMinute members to the transition time, the wDayOfWeek member to the appropriate weekday, and the wDay member to indicate the occurence of the day of the week within the month (first through fifth).</para>
            </summary>
        </member>
        <member name="F:PublicDomain.Win32.Win32Structures.TIME_ZONE_INFORMATION.daylightBias">
            <summary>
            Bias value to be used during local time translations that occur during daylight saving time. This member is ignored if a value for the DaylightDate member is not supplied.
            <para>This value is added to the value of the Bias member to form the bias used during daylight saving time. In most time zones, the value of this member is –60.</para>
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces.IAssemblyCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyCache.UninstallAssembly(System.Int32,System.String,PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE[],System.UInt32@)">
            <summary>
            The IAssemblyCache::UninstallAssembly method removes a reference to an assembly from the GAC. If other applications hold no other references to the assembly, the files that make up the assembly are removed from the GAC.
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. Although this is not recommended, this parameter can be null. The assembly is installed without an application reference, or all existing application references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.
            
            If pulDisposition is not null, pulDisposition contains one of the following values:
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED - The assembly files have been removed from the GAC.
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE - An application is using the assembly. This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED - The assembly does not exist in the GAC.
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING - Not used.
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES - The assembly has not been removed from the GAC because another application reference exists.
            IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND - The reference that is specified in pRefData is not found in the GAC.
            </param>
            <returns>S_OK - The assembly has been uninstalled.
            S_FALSE - The operation succeeded, but the assembly was not removed from the GAC. The reason is described in pulDisposition.</returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,PublicDomain.Win32.Win32Structures.ASSEMBLY_INFO@)">
            <summary>
            The IAssemblyCache::QueryAssemblyInfo method retrieves information about an assembly from the GAC.
            </summary>
            <param name="dwFlags">One of QUERYASMINFO_FLAG_VALIDATE or QUERYASMINFO_FLAG_GETSIZE:
            *_VALIDATE - Performs validation of the files in the GAC against the assembly manifest, including hash verification and strong name signature verification.
            *_GETSIZE - Returns the size of all files in the assembly (disk footprint). If this is not specified, the ASSEMBLY_INFO::uliAssemblySizeInKB field is not modified.</param>
            <param name="pszAssemblyName">Name of the assembly that is queried.</param>
            <param name="pAsmInfo">Pointer to the returned ASSEMBLY_INFO structure.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyCache.InstallAssembly(PublicDomain.Win32.Win32Enums.IASSEMBLYCACHE_INSTALL_FLAG,System.String,PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE[])">
            <summary>
            The IAssemblyCache::InstallAssembly method adds a new assembly to the GAC. The assembly must be persisted in the file system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the IASSEMBLYCACHE_INSTALL_FLAG_* values can be specified:
            *_REFRESH - If the assembly is already installed in the GAC and the file version numbers of the assembly being installed are the same or later, the files are replaced.
            *_FORCE_REFRESH - The files of an existing assembly are overwritten regardless of their version number.</param>
            <param name="pszManifestFilePath">A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest. Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE that indicates the application on whose behalf the assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the assembly without any application reference.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces.IAssemblyName">
            <summary>
            The IAssemblyName interface represents an assembly name. An assembly name includes a predetermined set of name-value pairs. The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.SetProperty(PublicDomain.Win32.Win32Enums.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            The IAssemblyName::SetProperty method adds a name-value pair to the assembly name, or, if a name-value pair with the same name already exists, modifies or deletes the value of a name-value pair.
            </summary>
            <param name="PropertyId">The ID that represents the name part of the name-value pair that is to be added or to be modified. Valid property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the pvProperty buffer in bytes. If cbProperty is zero, the name-value pair is removed from the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.GetProperty(PublicDomain.Win32.Win32Enums.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            The IAssemblyName::GetProperty method retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="PropertyId">The ID that represents the name of the name-value pair whose value is to be retrieved. Specified property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the pvProperty buffer, in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.Finalize">
            <summary>
            The IAssemblyName::Finalize method freezes an assembly name. Additional calls to IAssemblyName::SetProperty are unsuccessful after this method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,PublicDomain.Win32.Win32Enums.ASM_DISPLAY_FLAGS)">
            <summary>
            The IAssemblyName::GetDisplayName method returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the ASM_DISPLAY_FLAGS enumeration</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The IAssemblyName::GetName method returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the pwszName buffer (on input). Length of the name (on return).</param>
            <param name="pwszName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            The IAssemblyName::GetVersion method returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.IsEqual(PublicDomain.Win32.Win32Interfaces.IAssemblyName,PublicDomain.Win32.Win32Enums.ASM_CMP_FLAGS)">
            <summary>
            The IAssemblyName::IsEqual method compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison.</param>
            <returns>S_OK: - The names match according to the comparison criteria.
            S_FALSE: - The names do not match.</returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyName.Clone(PublicDomain.Win32.Win32Interfaces.IAssemblyName@)">
            <summary>
            The IAssemblyName::Clone method creates a copy of an assembly name.
            </summary>
            <param name="pName">New instance</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces.IAssemblyEnum">
            <summary>
            The IAssemblyEnum interface enumerates the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyEnum.GetNextAssembly(System.IntPtr,PublicDomain.Win32.Win32Interfaces.IAssemblyName@,System.UInt32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC.
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IAssemblyEnum.Reset">
            <summary>
            Resets this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces.IInstallReferenceItem">
            <summary>
            The IInstallReferenceItem interface represents a reference that has been set on an assembly in the GAC. Instances of IInstallReferenceIteam are returned by the IInstallReferenceEnum interface.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IInstallReferenceItem.GetReference(PublicDomain.Win32.Win32Structures.FUSION_INSTALL_REFERENCE[]@,System.UInt32,System.IntPtr)">
            <summary>
            The IInstallReferenceItem::GetReference method returns a FUSION_INSTALL_REFERENCE structure.
            </summary>
            <param name="ppRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. The memory is allocated by the GetReference method and is freed when IInstallReferenceItem is released. Callers must not hold a reference to this buffer after the IInstallReferenceItem object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Win32.Win32Interfaces.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC.
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated.
            </summary>
        </member>
        <member name="M:PublicDomain.Win32.Win32Interfaces.IInstallReferenceEnum.GetNextInstallReferenceItem(PublicDomain.Win32.Win32Interfaces.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly.
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the IInstallReferenceItem pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns>S_OK: - The next item is returned successfully.
            S_FALSE: - No more items.</returns>
        </member>
        <member name="T:PublicDomain.Web.DnsUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.DnsUtilities.IpProviders">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Web.DnsUtilities.GetPublicIpAddress">
            <summary>
            Gets the public ip address.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.VersionUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.VersionUtilities.MaxVersion">
            <summary>
            There cannot be a min version.
            </summary>
        </member>
        <member name="F:PublicDomain.VersionUtilities.ZeroVersion">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.VersionUtilities.AddMajor(System.Version,System.Int32)">
            <summary>
            Adds the major.
            </summary>
            <param name="version">The version.</param>
            <param name="majorAmount">The major amount.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.AddMinor(System.Version,System.Int32)">
            <summary>
            Adds the minor.
            </summary>
            <param name="version">The version.</param>
            <param name="minorAmount">The minor amount.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.AddBuild(System.Version,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:System.Version"/>, adding
            <paramref name="buildAmount"/> to the <see cref="P:System.Version.Build"/>
            portion of the version, the third portion.
            </summary>
            <param name="version">The version.</param>
            <param name="buildAmount">The build amount.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.AddRevision(System.Version,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:System.Version"/>, adding
            <paramref name="revisionAmount"/> to the <see cref="P:System.Version.Revision"/>
            portion of the version, the fourth portion.
            </summary>
            <param name="version">The version.</param>
            <param name="revisionAmount">The revision amount.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.IsNonZero(System.Version)">
            <summary>
            Determines whether [is non zero] [the specified version].
            </summary>
            <param name="version">The version.</param>
            <returns>
            	<c>true</c> if [is non zero] [the specified version]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.ParseFirstVersion(System.String)">
            <summary>
            Tries to extract a version from the beginning of <paramref name="str"/>.
            Discards anything that follows. Returns null if <paramref name="str"/>
            does not begin with an integer.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.VersionUtilities.AreEqual(System.Version,System.Version)">
            <summary>
            Ares the equal.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.TzDateTime">
            <summary>
            Wraps DateTime to provide time zone information
            with an <see cref="T:PublicDomain.TzTimeZone"/> from
            the Olson tz database.
            </summary>
        </member>
        <member name="F:PublicDomain.TzDateTime.UtcOffsetModifier">
            <summary>
            Represents the string: +00:00
            </summary>
        </member>
        <member name="F:PublicDomain.TzDateTime.MaxValue">
            <summary>
            Represents the largest possible value of PublicDomain.TzDateTime. This field is read-only.
            </summary>
        </member>
        <member name="F:PublicDomain.TzDateTime.MinValue">
            <summary>
                Represents the smallest possible value of PublicDomain.TzDateTime. This field is
                read-only.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDateTime.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDateTime"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDateTime"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDateTime"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="forceTimeAsUtc">if set to <c>true</c> force time as utc.</param>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.DateTime,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDateTime"/> class.
            </summary>
            <param name="time">The time.</param>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int64)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to a specified
                number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ticks is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int64,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to a specified
            number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ticks is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int64,System.DateTimeKind)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to a specified
                number of ticks and to Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
            <param name="kind">
                One of the PublicDomain.TzDateTimeKind values that indicates whether ticks specifies
                a local time, Coordinated Universal Time (UTC), or neither.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">ticks is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">kind is not one of the PublicDomain.TzDateTimeKind values.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int64,System.DateTimeKind,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to a specified
            number of ticks and to Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units.</param>
            <param name="kind">One of the PublicDomain.TzDateTimeKind values that indicates whether ticks specifies
            a local time, Coordinated Universal Time (UTC), or neither.</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ticks is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
            <exception cref="T:System.ArgumentException">kind is not one of the PublicDomain.TzDateTimeKind values.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is less than 1 or greater than 9999.-or- month is less than 1 or greater
                than 12.-or- day is less than 1 or greater than the number of days in month.
            </exception>
            <exception cref="T:System.ArgumentException">
                The specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or
                more than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is less than 1 or greater than 9999.-or- month is less than 1 or greater
            than 12.-or- day is less than 1 or greater than the number of days in month.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or
            more than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <exception cref="T:System.ArgumentException">
                Specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or more
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is less than 1 or greater than 9999. -or- month is less than 1 or greater
                than 12. -or- day is less than 1 or greater than the number of days in month.-or-
                hour is less than 0 or greater than 23. -or- minute is less than 0 or greater
                than 59. -or- second is less than 0 or greater than 59.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentException">
            Specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or more
            than PublicDomain.TzDateTime.MaxValue.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is less than 1 or greater than 9999. -or- month is less than 1 or greater
            than 12. -or- day is less than 1 or greater than the number of days in month.-or-
            hour is less than 0 or greater than 23. -or- minute is less than 0 or greater
            than 59. -or- second is less than 0 or greater than 59.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, day, hour, minute, second, and Coordinated Universal Time (UTC)
                or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="kind">
                One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
                day, hour, minute and second specify a local time, Coordinated Universal
                Time (UTC), or neither.
            </param>
            <exception cref="T:System.ArgumentException">
                The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
                or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
                values.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is less than 1 or greater than 9999. -or- month is less than 1 or greater
                than 12. -or- day is less than 1 or greater than the number of days in month.-or-
                hour is less than 0 or greater than 23. -or- minute is less than 0 or greater
                than 59. -or- second is less than 0 or greater than 59.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, day, hour, minute, second, and Coordinated Universal Time (UTC)
            or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="kind">One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
            day, hour, minute and second specify a local time, Coordinated Universal
            Time (UTC), or neither.</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentException">
            The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
            or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
            values.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is less than 1 or greater than 9999. -or- month is less than 1 or greater
            than 12. -or- day is less than 1 or greater than the number of days in month.-or-
            hour is less than 0 or greater than 23. -or- minute is less than 0 or greater
            than 59. -or- second is less than 0 or greater than 59.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is less than 1 or greater than 9999.-or- month is less than 1 or greater
                than 12.-or- day is less than 1 or greater than the number of days in month.-or-
                hour is less than 0 or greater than 23.-or- minute is less than 0 or greater
                than 59.-or- second is less than 0 or greater than 59.-or- millisecond is
                less than 0 or greater than 999.
            </exception>
            <exception cref="T:System.ArgumentException">
                Specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or more
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is less than 1 or greater than 9999.-or- month is less than 1 or greater
            than 12.-or- day is less than 1 or greater than the number of days in month.-or-
            hour is less than 0 or greater than 23.-or- minute is less than 0 or greater
            than 59.-or- second is less than 0 or greater than 59.-or- millisecond is
            less than 0 or greater than 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            Specified parameters evaluate to less than PublicDomain.TzDateTime.MinValue or more
            than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, day, hour, minute, second, millisecond, and Coordinated Universal
                Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="kind">
                One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
                day, hour, minute, second, and millisecond specify a local time, Coordinated
                Universal Time (UTC), or neither.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is less than 1 or greater than 9999.-or- month is less than 1 or greater
                than 12.-or- day is less than 1 or greater than the number of days in month.-or-
                hour is less than 0 or greater than 23.-or- minute is less than 0 or greater
                than 59.-or- second is less than 0 or greater than 59.-or- millisecond is
                less than 0 or greater than 999.
            </exception>
            <exception cref="T:System.ArgumentException">
                The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
                or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
                values.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, day, hour, minute, second, millisecond, and Coordinated Universal
            Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="kind">One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
            day, hour, minute, second, and millisecond specify a local time, Coordinated
            Universal Time (UTC), or neither.</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is less than 1 or greater than 9999.-or- month is less than 1 or greater
            than 12.-or- day is less than 1 or greater than the number of days in month.-or-
            hour is less than 0 or greater than 23.-or- minute is less than 0 or greater
            than 59.-or- second is less than 0 or greater than 59.-or- millisecond is
            less than 0 or greater than 999.
            </exception>
            <exception cref="T:System.ArgumentException">
            The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
            or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
            values.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
            <summary>
                Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
                year, month, day, hour, minute, second, millisecond, and Coordinated Universal
                Time (UTC) or local time for the specified calendar.
            </summary>
            <param name="year">The year (1 through the number of years in calendar).</param>
            <param name="month">The month (1 through the number of months in calendar).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="calendar">The System.Globalization.Calendar that applies to this PublicDomain.TzDateTime.</param>
            <param name="kind">
                One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
                day, hour, minute, second, and millisecond specify a local time, Coordinated
                Universal Time (UTC), or neither.
            </param>
            <exception cref="T:System.ArgumentException">
                The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
                or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
                values.
            </exception>
            <exception cref="T:System.ArgumentNullException">calendar is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                year is not in the range supported by calendar.-or- month is less than 1
                or greater than the number of months in calendar.-or- day is less than 1
                or greater than the number of days in month.-or- hour is less than 0 or greater
                than 23.-or- minute is less than 0 or greater than 59.-or- second is less
                than 0 or greater than 59.-or- millisecond is less than 0 or greater than
                999.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind,PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the PublicDomain.TzDateTime structure to the specified
            year, month, day, hour, minute, second, millisecond, and Coordinated Universal
            Time (UTC) or local time for the specified calendar.
            </summary>
            <param name="year">The year (1 through the number of years in calendar).</param>
            <param name="month">The month (1 through the number of months in calendar).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <param name="calendar">The System.Globalization.Calendar that applies to this PublicDomain.TzDateTime.</param>
            <param name="kind">One of the PublicDomain.TzDateTimeKind values that indicates whether year, month,
            day, hour, minute, second, and millisecond specify a local time, Coordinated
            Universal Time (UTC), or neither.</param>
            <param name="timeZone">The time zone.</param>
            <exception cref="T:System.ArgumentException">
            The specified time parameters evaluate to less than PublicDomain.TzDateTime.MinValue
            or more than PublicDomain.TzDateTime.MaxValue. -or-kind is not one of the PublicDomain.TzDateTimeKind
            values.
            </exception>
            <exception cref="T:System.ArgumentNullException">calendar is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            year is not in the range supported by calendar.-or- month is less than 1
            or greater than the number of months in calendar.-or- day is less than 1
            or greater than the number of days in month.-or- hour is less than 0 or greater
            than 23.-or- minute is less than 0 or greater than 59.-or- second is less
            than 0 or greater than 59.-or- millisecond is less than 0 or greater than
            999.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.SetDateTime(System.DateTime)">
            <summary>
            Sets the date time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDate">
            <summary>
            Returns a new instance with the saved time zone, but
            with the hours, minutes, and seconds set to 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateLocal">
            <summary>
            Returns a new instance with the saved time zone, but
            with the hours, minutes, and seconds set to 0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateLocal(PublicDomain.TzDateTime,PublicDomain.TzTimeZone)">
            <summary>
            Gets the date local.
            </summary>
            <param name="dt">The dt.</param>
            <param name="tz">The tz.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_Subtraction(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
                Subtracts a specified date and time from another specified date and time,
                yielding a time interval.
            </summary>
            <param name="d1">A PublicDomain.TzDateTime (the minuend).</param>
            <param name="d2">A PublicDomain.TzDateTime (the subtrahend).</param>
            <returns>
                A System.TimeSpan that is the time interval between d1 and d2; that is, d1
                minus d2.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_Subtraction(PublicDomain.TzDateTime,System.TimeSpan)">
            <summary>
                Subtracts a specified time interval from a specified date and time, yielding
                a new date and time.
            </summary>
            <param name="d">A PublicDomain.TzDateTime.</param>
            <param name="t">A System.TimeSpan.</param>
            <returns>A PublicDomain.TzDateTime whose value is the value of d minus the value of t.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_Inequality(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
            Determines whether two specified instances of PublicDomain.TzDateTime are not equal.
            </summary>
            <param name="d1">A PublicDomain.TzDateTime.</param>
            <param name="d2">A PublicDomain.TzDateTime.</param>
            <returns>true if d1 and d2 do not represent the same date and time; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_Addition(PublicDomain.TzDateTime,System.TimeSpan)">
            <summary>
                Adds a specified time interval to a specified date and time, yielding a new
                date and time.
            </summary>
            <param name="d">A PublicDomain.TzDateTime.</param>
            <param name="t">A System.TimeSpan.</param>
            <returns>A PublicDomain.TzDateTime that is the sum of the values of d and t.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_LessThan(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
                Determines whether one specified PublicDomain.TzDateTime is less than another specified
                PublicDomain.TzDateTime.
            </summary>
            <param name="t1">A PublicDomain.TzDateTime.</param>
            <param name="t2">A PublicDomain.TzDateTime.</param>
            <returns>true if t1 is less than t2; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_LessThanOrEqual(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
                Determines whether one specified PublicDomain.TzDateTime is less than or equal to
                another specified PublicDomain.TzDateTime.
            </summary>
            <param name="t1">A PublicDomain.TzDateTime.</param>
            <param name="t2">A PublicDomain.TzDateTime.</param>
            <returns>true if t1 is less than or equal to t2; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_Equality(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
            Determines whether two specified instances of PublicDomain.TzDateTime are equal.
            </summary>
            <param name="d1">A PublicDomain.TzDateTime.</param>
            <param name="d2">A PublicDomain.TzDateTime.</param>
            <returns>true if d1 and d2 represent the same date and time; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_GreaterThan(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
            Determines whether one specified PublicDomain.TzDateTime is greater than another specified PublicDomain.TzDateTime.
            </summary>
            <param name="t1">A PublicDomain.TzDateTime.</param>
            <param name="t2">A PublicDomain.TzDateTime.</param>
            <returns>true if t1 is greater than t2; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.op_GreaterThanOrEqual(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
            Determines whether one specified PublicDomain.TzDateTime is greater than or equal to another specified PublicDomain.TzDateTime.
            </summary>
            <param name="t1">A PublicDomain.TzDateTime.</param>
            <param name="t2">A PublicDomain.TzDateTime.</param>
            <returns>true if t1 is greater than or equal to t2; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.Now(PublicDomain.TzTimeZone)">
            <summary>
            Gets a PublicDomain.TzDateTime object that is set to the current date and time on
            this computer, expressed as the local time.
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>A PublicDomain.TzDateTime whose value is the current local date and time.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.Today(PublicDomain.TzTimeZone)">
            <summary>
            Gets the current date.
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>A PublicDomain.TzDateTime set to today's date, with the time component set to 00:00:00.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.UtcNow(PublicDomain.TzTimeZone)">
            <summary>
            Gets a PublicDomain.TzDateTime object that is set to the current date and time on
            this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <param name="timeZone">The time zone.</param>
            <returns>A PublicDomain.TzDateTime whose value is the current UTC date and time.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.Add(System.TimeSpan)">
            <summary>
            Adds the value of the specified System.TimeSpan to the value of this instance.
            </summary>
            <param name="value">A System.TimeSpan that contains the interval to add.</param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the time interval represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddDays(System.Double)">
            <summary>
            Adds the specified number of days to the value of this instance.
            </summary>
            <param name="value">
                A number of whole and fractional days. The value parameter can be negative
                or positive.
            </param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of days represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddHours(System.Double)">
            <summary>
            Adds the specified number of hours to the value of this instance.
            </summary>
            <param name="value">
                A number of whole and fractional hours. The value parameter can be negative
                or positive.
            </param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of hours represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddMilliseconds(System.Double)">
            <summary>
            Adds the specified number of milliseconds to the value of this instance.
            </summary>
            <param name="value">
            A number of whole and fractional milliseconds. The value parameter can be
            negative or positive.</param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of milliseconds represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddMinutes(System.Double)">
            <summary>
            Adds the specified number of minutes to the value of this instance.
            </summary>
            <param name="value">
                A number of whole and fractional minutes. The value parameter can be negative
                or positive.
            </param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of minutes represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddMonths(System.Int32)">
            <summary>
            Adds the specified number of months to the value of this instance.
            </summary>
            <param name="months">A number of months. The months parameter can be negative or positive.</param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and months.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.-or- months is less than -120,000 or greater
                than 120,000.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddSeconds(System.Double)">
            <summary>
            Adds the specified number of seconds to the value of this instance.
            </summary>
            <param name="value">
                A number of whole and fractional seconds. The value parameter can be negative
                or positive.
            </param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of seconds represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddTicks(System.Int64)">
            <summary>
            Adds the specified number of ticks to the value of this instance.
            </summary>
            <param name="value">
                A number of 100-nanosecond ticks. The value parameter can be positive or
                negative.
            </param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the time represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue or greater
                than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.AddYears(System.Int32)">
            <summary>
            Adds the specified number of years to the value of this instance.
            </summary>
            <param name="value">A number of years. The value parameter can be negative or positive.</param>
            <returns>
                A PublicDomain.TzDateTime whose value is the sum of the date and time represented
                by this instance and the number of years represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                value or the resulting PublicDomain.TzDateTime is less than PublicDomain.TzDateTime.MinValue
                or greater than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Compare(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
                Compares two instances of PublicDomain.TzDateTime and returns an indication of their
                relative values.
            </summary>
            <param name="t1">The first PublicDomain.TzDateTime.</param>
            <param name="t2">The second PublicDomain.TzDateTime.</param>
            <returns>
                A signed number indicating the relative values of t1 and t2.Value Type Condition
                Less than zero t1 is less than t2. Zero t1 equals t2. Greater than zero t1
                is greater than t2.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.CompareTo(PublicDomain.TzDateTime)">
            <summary>
                Compares this instance to a specified PublicDomain.TzDateTime object and returns
                an indication of their relative values.
            </summary>
            <param name="value">A PublicDomain.TzDateTime object to compare.</param>
            <returns>
                A signed number indicating the relative values of this instance and the value
                parameter.Value Description Less than zero This instance is less than value.
                Zero This instance is equal to value. Greater than zero This instance is
                greater than value.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.CompareTo(System.Object)">
            <summary>
                Compares this instance to a specified object and returns an indication of
                their relative values.
            </summary>
            <param name="value">A boxed PublicDomain.TzDateTime object to compare, or null.</param>
            <returns>
                A signed number indicating the relative values of this instance and value.Value
                Description Less than zero This instance is less than value. Zero This instance
                is equal to value. Greater than zero This instance is greater than value,
                or value is null.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a PublicDomain.TzDateTime.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (a number ranging from 1 to 12).</param>
            <returns>
                The number of days in month for the specified year.For example, if month
                equals 2 for February, the return value is 28 or 29 depending upon whether
                year is a leap year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                month is less than 1 or greater than 12.-or-year is less than 1 or greater
                than 9999.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Equals(PublicDomain.TzDateTime)">
            <summary>
                Returns a value indicating whether this instance is equal to the specified
                PublicDomain.TzDateTime instance.
            </summary>
            <param name="value">A PublicDomain.TzDateTime instance to compare to this instance.</param>
            <returns>true if the value parameter equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.Equals(System.Object)">
            <summary>
                Returns a value indicating whether this instance is equal to a specified
                object.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>
                true if value is an instance of PublicDomain.TzDateTime and equals the value of this
                instance; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.Equals(PublicDomain.TzDateTime,PublicDomain.TzDateTime)">
            <summary>
            Returns a value indicating whether two instances of PublicDomain.TzDateTime are equal.
            </summary>
            <param name="t1">The first PublicDomain.TzDateTime instance.</param>
            <param name="t2">The second PublicDomain.TzDateTime instance.</param>
            <returns>true if the two PublicDomain.TzDateTime values are equal; otherwise, false.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.FromBinary(System.Int64,PublicDomain.TzTimeZone)">
            <summary>
            Deserializes a 64-bit binary value and recreates an original serialized PublicDomain.TzDateTime
            object.
            </summary>
            <param name="dateData">A 64-bit signed integer that encodes the PublicDomain.TzDateTime.Kind property in
            a 2-bit field and the PublicDomain.TzDateTime.Ticks property in a 62-bit field.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime object that is equivalent to the PublicDomain.TzDateTime object
            that was serialized by the PublicDomain.TzDateTime.ToBinary() method.
            </returns>
            <exception cref="T:System.ArgumentException">
            dateData is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.FromFileTime(System.Int64,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified Windows file time to an equivalent local time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime object that represents a local time equivalent to the date
            and time represented by the fileTime parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fileTime is less than 0 or represents a time greater than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.FromFileTimeUtc(System.Int64,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified Windows file time to an equivalent UTC time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime object that represents a UTC time equivalent to the date
            and time represented by the fileTime parameter.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            fileTime is less than 0 or represents a time greater than PublicDomain.TzDateTime.MaxValue.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.FromOADate(System.Double,PublicDomain.TzTimeZone)">
            <summary>
            Returns a PublicDomain.TzDateTime equivalent to the specified OLE Automation Date.
            </summary>
            <param name="d">An OLE Automation Date value.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime that represents the same date and time as d.
            </returns>
            <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateTimeFormats">
            <summary>
                Converts the value of this instance to all the string representations supported
                by the standard PublicDomain.TzDateTime format specifiers.
            </summary>
            <returns>
                A string array where each element is the representation of the value of this
                instance formatted with one of the standard PublicDomain.TzDateTime formatting specifiers.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateTimeFormats(System.Char)">
            <summary>
                Converts the value of this instance to all the string representations supported
                by the specified standard PublicDomain.TzDateTime format specifier.
            </summary>
            <param name="format">A Unicode character containing a format specifier.</param>
            <returns>
                A string array where each element is the representation of the value of this
                instance formatted with the format standard PublicDomain.TzDateTime formatting specifier.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateTimeFormats(System.IFormatProvider)">
            <summary>
                Converts the value of this instance to all the string representations supported
                by the standard PublicDomain.TzDateTime format specifiers and the specified culture-specific
                formatting information.
            </summary>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific formatting information
                about this instance.
            </param>
            <returns>
                A string array where each element is the representation of the value of this
                instance formatted with one of the standard PublicDomain.TzDateTime formatting specifiers.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
            <summary>
                Converts the value of this instance to all the string representations supported
                by the specified standard PublicDomain.TzDateTime format specifier and culture-specific
                formatting information.
            </summary>
            <param name="format">A Unicode character containing a format specifier.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific formatting information
                about this instance.
            </param>
            <returns>
                A string array where each element is the representation of the value of this
                instance formatted with one of the standard PublicDomain.TzDateTime formatting specifiers.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type PublicDomain.TzDateTime.
            </summary>
            <returns>The enumerated constant, System.TypeCode.DateTime.</returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.IsDaylightSavingTime">
            <summary>
                Indicates whether this instance of PublicDomain.TzDateTime is within the Daylight
                Saving Time range for the current time zone.
            </summary>
            <returns>
                true if PublicDomain.TzDateTime.Kind is PublicDomain.TzDateTimeKind.Local or PublicDomain.TzDateTimeKind.Unspecified
                and the value of this instance of PublicDomain.TzDateTime is within the Daylight
                Saving Time range for the current time zone. false if PublicDomain.TzDateTime.Kind
                is PublicDomain.TzDateTimeKind.Utc.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.IsLeapYear(System.Int32)">
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year.</param>
            <returns>true if year is a leap year; otherwise, false.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Parse(System.String)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <returns>A PublicDomain.TzDateTime equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseTz(System.String,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified culture-specific format information.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific format information
                about s.
            </param>
            <returns>
                A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
                by provider.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseTz(System.String,System.IFormatProvider,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified culture-specific format information.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific format information
            about s.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
            by provider.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified culture-specific format information and formatting
                style.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific formatting information
                about s.
            </param>
            <param name="styles">
                A bitwise combination of System.Globalization.DateTimeStyles values that
                indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.
            </param>
            <returns>
                A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
                by provider and styles.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
            <exception cref="T:System.ArgumentException">
                styles contains an invalid combination of System.Globalization.DateTimeStyles
                values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
                and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseTz(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified culture-specific format information and formatting
            style.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information
            about s.</param>
            <param name="styles">A bitwise combination of System.Globalization.DateTimeStyles values that
            indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
            by provider and styles.
            </returns>
            <exception cref="T:System.ArgumentNullException">s is null.</exception>
            <exception cref="T:System.FormatException">s does not contain a valid string representation of a date and time.</exception>
            <exception cref="T:System.ArgumentException">
            styles contains an invalid combination of System.Globalization.DateTimeStyles
            values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
            and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified format and culture-specific format information.
                The format of the string representation must match the specified format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific format information
                about s.
            </param>
            <returns>
                A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
                by format and provider.
            </returns>
            <exception cref="T:System.ArgumentNullException">s or format is null.</exception>
            <exception cref="T:System.FormatException">
                s or format is an empty string. -or- s does not contain a date and time that
                corresponds to the pattern specified in format.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExactTz(System.String,System.String,System.IFormatProvider,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified format and culture-specific format information.
            The format of the string representation must match the specified format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific format information
            about s.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
            by format and provider.
            </returns>
            <exception cref="T:System.ArgumentNullException">s or format is null.</exception>
            <exception cref="T:System.FormatException">
            s or format is an empty string. -or- s does not contain a date and time that
            corresponds to the pattern specified in format.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified format, culture-specific format information,
                and style. The format of the string representation must match the specified
                format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific formatting information
                about s.
            </param>
            <param name="style">
                A bitwise combination of System.Globalization.DateTimeStyles values that
                indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.
            </param>
            <returns>
                A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
                by format, provider, and style.
            </returns>
            <exception cref="T:System.ArgumentException">
                style contains an invalid combination of System.Globalization.DateTimeStyles
                values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
                and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
            <exception cref="T:System.ArgumentNullException">s or format is null.</exception>
            <exception cref="T:System.FormatException">
                s or format is an empty string. -or- s does not contain a date and time that
                corresponds to the pattern specified in format.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExactTz(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified format, culture-specific format information,
            and style. The format of the string representation must match the specified
            format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information
            about s.</param>
            <param name="style">A bitwise combination of System.Globalization.DateTimeStyles values that
            indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
            by format, provider, and style.
            </returns>
            <exception cref="T:System.ArgumentException">
            style contains an invalid combination of System.Globalization.DateTimeStyles
            values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
            and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
            <exception cref="T:System.ArgumentNullException">s or format is null.</exception>
            <exception cref="T:System.FormatException">
            s or format is an empty string. -or- s does not contain a date and time that
            corresponds to the pattern specified in format.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified array of formats, culture-specific format
                information, and style. The format of the string representation must match
                at least one of the specified formats exactly.
            </summary>
            <param name="s">A string containing one or more dates and times to convert.</param>
            <param name="formats">An array of expected formats of s.</param>
            <param name="provider">
                An System.IFormatProvider that supplies culture-specific format information
                about s.
            </param>
            <param name="style">
                A bitwise combination of System.Globalization.DateTimeStyles values that
                indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.
            </param>
            <returns>
                A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
                by formats, provider, and style.
            </returns>
            <exception cref="T:System.FormatException">
                s is an empty string. -or- an element of formats is an empty string. -or-
                s does not contain a date and time that corresponds to any element of formats.
            </exception>
            <exception cref="T:System.ArgumentNullException">s or formats is null.</exception>
            <exception cref="T:System.ArgumentException">
                style contains an invalid combination of System.Globalization.DateTimeStyles
                values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
                and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ParseExactTz(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified array of formats, culture-specific format
            information, and style. The format of the string representation must match
            at least one of the specified formats exactly.
            </summary>
            <param name="s">A string containing one or more dates and times to convert.</param>
            <param name="formats">An array of expected formats of s.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific format information
            about s.</param>
            <param name="style">A bitwise combination of System.Globalization.DateTimeStyles values that
            indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            A PublicDomain.TzDateTime equivalent to the date and time contained in s as specified
            by formats, provider, and style.
            </returns>
            <exception cref="T:System.FormatException">
            s is an empty string. -or- an element of formats is an empty string. -or-
            s does not contain a date and time that corresponds to any element of formats.
            </exception>
            <exception cref="T:System.ArgumentNullException">s or formats is null.</exception>
            <exception cref="T:System.ArgumentException">
            style contains an invalid combination of System.Globalization.DateTimeStyles
            values. For example, both System.Globalization.DateTimeStyles.AssumeLocal
            and System.Globalization.DateTimeStyles.AssumeUniversal.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Subtract(PublicDomain.TzDateTime)">
            <summary>
                Subtracts the specified date and time from this instance.
            </summary>
            <param name="value">An instance of PublicDomain.TzDateTime.</param>
            <returns>
                A System.TimeSpan interval equal to the date and time represented by this
                instance minus the date and time represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The result is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Subtract(System.TimeSpan)">
            <summary>
            Subtracts the specified duration from this instance.
            </summary>
            <param name="value">An instance of System.TimeSpan.</param>
            <returns>
                A PublicDomain.TzDateTime equal to the date and time represented by this instance
                minus the time interval represented by value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The result is less than PublicDomain.TzDateTime.MinValue or greater than PublicDomain.TzDateTime.MaxValue.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToBinary">
            <summary>
                Serializes the current PublicDomain.TzDateTime object to a 64-bit binary value that
                subsequently can be used to recreate the PublicDomain.TzDateTime object.
            </summary>
            <returns>
                A 64-bit signed integer that encodes the PublicDomain.TzDateTime.Kind and PublicDomain.TzDateTime.Ticks
                properties.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToFileTime">
            <summary>
                Converts the value of the current PublicDomain.TzDateTime object to a Windows file
                time.
            </summary>
            <returns>
                The value of the current PublicDomain.TzDateTime object expressed as a Windows file
                time.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting file time would represent a date and time before 12:00 midnight
                January 1, 1601 C.E. UTC.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToFileTimeUtc">
            <summary>
                Converts the value of the current PublicDomain.TzDateTime object to a Windows file
                time.
            </summary>
            <returns>
                The value of the current PublicDomain.TzDateTime object expressed as a Windows file
                time.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                The resulting file time would represent a date and time before 12:00 midnight
                January 1, 1601 C.E. UTC.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToLongDateString">
            <summary>
                Converts the value of this instance to its equivalent long date string representation.
            </summary>
            <returns>
                A string containing the name of the day of the week, the name of the month,
                the numeric day of the month, and the year equivalent to the date value of
                this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToLongTimeString">
            <summary>
                Converts the value of this instance to its equivalent long time string representation.
            </summary>
            <returns>
                A string containing the name of the day of the week, the name of the month,
                the numeric day of the hours, minutes, and seconds equivalent to the time
                value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToOADate">
            <summary>
                Converts the value of this instance to the equivalent OLE Automation date.
            </summary>
            <returns>
                A double-precision floating-point number that contains an OLE Automation
                date equivalent to the value of this instance.
            </returns>
            <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToShortDateString">
            <summary>
                Converts the value of this instance to its equivalent short date string representation.
            </summary>
            <returns>
                A string containing the numeric month, the numeric day of the month, and
                the year equivalent to the date value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToShortTimeString">
            <summary>
                Converts the value of this instance to its equivalent short time string representation.
            </summary>
            <returns>
                A string containing the name of the day of the week, the name of the month,
                the numeric day of the hours, minutes, and seconds equivalent to the time
                value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToString(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            A string representation of value of this instance as specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            The length of format is 1, and it is not one of the format specifier characters
            defined for System.Globalization.DateTimeFormatInfo.-or- format does not
            contain a valid custom format pattern.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A format string.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of this instance as specified by format
            and provider.
            </returns>
            <exception cref="T:System.FormatException">
            The length of format is 1, and it is not one of the format specifier characters
            defined for System.Globalization.DateTimeFormatInfo.-or- format does not
            contain a valid custom format pattern.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToStringLocal">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A string representation of value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToStringLocal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of this instance as specified by provider.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToStringLocal(System.String)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format.
            </summary>
            <param name="format">A format string.</param>
            <returns>
            A string representation of value of this instance as specified by format.
            </returns>
            <exception cref="T:System.FormatException">
            The length of format is 1, and it is not one of the format specifier characters
            defined for System.Globalization.DateTimeFormatInfo.-or- format does not
            contain a valid custom format pattern.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToStringLocal(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to its equivalent string representation
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A format string.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>
            A string representation of value of this instance as specified by format
            and provider.
            </returns>
            <exception cref="T:System.FormatException">
            The length of format is 1, and it is not one of the format specifier characters
            defined for System.Globalization.DateTimeFormatInfo.-or- format does not
            contain a valid custom format pattern.
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParse(System.String,PublicDomain.TzDateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">
                When this method returns, contains the PublicDomain.TzDateTime value equivalent to
                the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
                if the conversion failed. The conversion fails if the s parameter is null,
                or does not contain a valid string representation of a date and time. This
                parameter is passed uninitialized.
            </param>
            <returns>
                true if the s parameter was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseTz(System.String,PublicDomain.TzDateTime@,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">When this method returns, contains the PublicDomain.TzDateTime value equivalent to
            the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
            if the conversion failed. The conversion fails if the s parameter is null,
            or does not contain a valid string representation of a date and time. This
            parameter is passed uninitialized.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            true if the s parameter was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseTz(System.String,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="styles">The styles.</param>
            <param name="result">When this method returns, contains the PublicDomain.TzDateTime value equivalent to
            the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
            if the conversion failed. The conversion fails if the s parameter is null,
            or does not contain a valid string representation of a date and time. This
            parameter is passed uninitialized.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            true if the s parameter was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified culture-specific format information and formatting
                style.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">
                An System.IFormatProvider object that supplies culture-specific formatting
                information about s.
            </param>
            <param name="styles">
                A bitwise combination of System.Globalization.DateTimeStyles values that
                indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.
            </param>
            <param name="result">
                When this method returns, contains the PublicDomain.TzDateTime value equivalent to
                the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
                if the conversion failed. The conversion fails if the s parameter is null,
                or does not contain a valid string representation of a date and time. This
                parameter is passed uninitialized.
            </param>
            <returns>
                true if the s parameter was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
                styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
                contains an invalid combination of System.Globalization.DateTimeStyles values
                (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseTz(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified culture-specific format information and formatting
            style.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific formatting
            information about s.</param>
            <param name="styles">A bitwise combination of System.Globalization.DateTimeStyles values that
            indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="result">When this method returns, contains the PublicDomain.TzDateTime value equivalent to
            the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
            if the conversion failed. The conversion fails if the s parameter is null,
            or does not contain a valid string representation of a date and time. This
            parameter is passed uninitialized.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            true if the s parameter was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
            contains an invalid combination of System.Globalization.DateTimeStyles values
            (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified format, culture-specific format information,
                and style. The format of the string representation must match the specified
                format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">
                An System.IFormatProvider object that supplies culture-specific formatting
                information about s.
            </param>
            <param name="style">
                A bitwise combination of one or more System.Globalization.DateTimeStyles
                values that indicate the permitted format of s.
            </param>
            <param name="result">
                When this method returns, contains the PublicDomain.TzDateTime value equivalent to
                the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
                if the conversion failed. The conversion fails if either the s or format
                parameter is null, is an empty string, or does not contain a date and time
                that correspond to the pattern specified in format. This parameter is passed
                uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
                styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
                contains an invalid combination of System.Globalization.DateTimeStyles values
                (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseExactTz(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified format, culture-specific format information,
            and style. The format of the string representation must match the specified
            format exactly.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The expected format of s.</param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific formatting
            information about s.</param>
            <param name="style">A bitwise combination of one or more System.Globalization.DateTimeStyles
            values that indicate the permitted format of s.</param>
            <param name="result">When this method returns, contains the PublicDomain.TzDateTime value equivalent to
            the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
            if the conversion failed. The conversion fails if either the s or format
            parameter is null, is an empty string, or does not contain a date and time
            that correspond to the pattern specified in format. This parameter is passed
            uninitialized.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            true if s was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
            contains an invalid combination of System.Globalization.DateTimeStyles values
            (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
                equivalent using the specified array of formats, culture-specific format
                information, and style. The format of the string representation must match
                at least one of the specified formats exactly.
            </summary>
            <param name="s">A string containing one or more dates and times to convert.</param>
            <param name="formats">An array of expected formats of s.</param>
            <param name="provider">
                An System.IFormatProvider object that supplies culture-specific format information
                about s.
            </param>
            <param name="style">
                A bitwise combination of System.Globalization.DateTimeStyles values that
                indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.
            </param>
            <param name="result">
                When this method returns, contains the PublicDomain.TzDateTime value equivalent to
                the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
                if the conversion failed. The conversion fails if s or formats is null, s
                or an element of formats is an empty string, or the format of s is not exactly
                as specified by at least one of the format patterns in formats. This parameter
                is passed uninitialized.
            </param>
            <returns>true if the s parameter was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
                styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
                contains an invalid combination of System.Globalization.DateTimeStyles values
                (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.TryParseExactTz(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,PublicDomain.TzDateTime@,PublicDomain.TzTimeZone)">
            <summary>
            Converts the specified string representation of a date and time to its PublicDomain.TzDateTime
            equivalent using the specified array of formats, culture-specific format
            information, and style. The format of the string representation must match
            at least one of the specified formats exactly.
            </summary>
            <param name="s">A string containing one or more dates and times to convert.</param>
            <param name="formats">An array of expected formats of s.</param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific format information
            about s.</param>
            <param name="style">A bitwise combination of System.Globalization.DateTimeStyles values that
            indicates the permitted format of s. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="result">When this method returns, contains the PublicDomain.TzDateTime value equivalent to
            the date and time contained in s, if the conversion succeeded, or PublicDomain.TzDateTime.MinValue
            if the conversion failed. The conversion fails if s or formats is null, s
            or an element of formats is an empty string, or the format of s is not exactly
            as specified by at least one of the format patterns in formats. This parameter
            is passed uninitialized.</param>
            <param name="timeZone">The time zone.</param>
            <returns>
            true if the s parameter was converted successfully; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentException">
            styles is not a valid System.Globalization.DateTimeStyles value.-or-styles
            contains an invalid combination of System.Globalization.DateTimeStyles values
            (for example, both System.Globalization.DateTimeStyles.AssumeLocal and System.Globalization.DateTimeStyles.AssumeUniversal).
            </exception>
        </member>
        <member name="M:PublicDomain.TzDateTime.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"></see> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.DateTime"></see> instance equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A <see cref="T:System.Decimal"></see> number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"></see> of the specified <see cref="T:System.Type"></see> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type"></see> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An <see cref="T:System.Object"></see> instance of type conversionType whose value is equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"></see> interface implementation that supplies culture-specific formatting information.</param>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDateTime.FromUnixTimestamp(System.Double,PublicDomain.TzTimeZone)">
            <summary>
            From the unix timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="timeZone">The time zone.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.TzDateTime.DateTimeUtc">
            <summary>
            Gets the System.DateTime which represents the UTC version of the date and time.
            </summary>
            <value>The System.DateTime which represents the UTC version of the date and time.</value>
        </member>
        <member name="P:PublicDomain.TzDateTime.DateTimeLocal">
            <summary>
            Gets the System.DateTime which represents the local version of the date and time
            with the specified PublicDomain.TzTimeZone. If no time zone has been 
            specified, an exception is thrown.
            </summary>
            <value>The System.DateTime which represents the local version of the date and time
            with the specified PublicDomain.TzTimeZone. If no time zone has been 
            specified, an exception is thrown.</value>
        </member>
        <member name="P:PublicDomain.TzDateTime.TimeZone">
            <summary>
            Gets the time zone.
            </summary>
            <value>The time zone.</value>
        </member>
        <member name="P:PublicDomain.TzDateTime.UtcOffset">
            <summary>
            Gets the UTC offset of the date/time.
            </summary>
            <value>Gets the UTC offset of the date/time</value>
        </member>
        <member name="T:PublicDomain.Logging.TextWriterLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.TextWriterLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.TextWriterLogger"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:PublicDomain.Logging.TextWriterLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="P:PublicDomain.Logging.TextWriterLogger.Writer">
            <summary>
            Gets or sets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="T:PublicDomain.Logging.LogArtifact">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LogArtifact.Severity">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LogArtifact.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LogArtifact.RawEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LogArtifact.RawFormatParameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LogArtifact.FormattedMessage">
            <summary>
            This is the actual log message that should be written.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LogArtifact.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LogArtifact"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LogArtifact.#ctor(PublicDomain.Logging.Logger,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LogArtifact"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="rawEntry">The raw entry.</param>
            <param name="rawFormatParameters">The raw format parameters.</param>
            <param name="formattedMessage">The formatted message.</param>
        </member>
        <member name="P:PublicDomain.Logging.LogArtifact.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:PublicDomain.Logging.DefaultLogFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.LogFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.ILogFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.ILogFormatter.FormatEntry(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Formats the entry.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="category">The category.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.ILogFormatter.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PublicDomain.Logging.ILogFormatter.UtcOffset">
            <summary>
            Gets or sets the utc offset.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="M:PublicDomain.Logging.LogFormatter.FormatEntry(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Formats the entry.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="category">The category.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LogFormatter.DoFormatEntry(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Does the format entry.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="logEntry">The log entry.</param>
            <param name="category">The category.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LogFormatter.PrepareEntry(System.Object,System.Object[])">
            <summary>
            Prepares the entry.
            </summary>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.LogFormatter.FormatString">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Logging.LogFormatter.UtcOffset">
            <summary>
            Gets or sets the utc offset.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="F:PublicDomain.Logging.DefaultLogFormatter.m_appDomainId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.DefaultLogFormatter.m_utcOffsetStr">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.DefaultLogFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.DefaultLogFormatter"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.DefaultLogFormatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.DefaultLogFormatter"/> class.
            </summary>
            <param name="str">The STR.</param>
        </member>
        <member name="M:PublicDomain.Logging.DefaultLogFormatter.DoFormatEntry(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Does the format entry.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="logEntry">The log entry.</param>
            <param name="category">The category.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.DefaultLogFormatter.UtcOffset">
            <summary>
            Gets or sets the utc offset.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="T:PublicDomain.IMonotonicNumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.INumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.INumberGenerator.GetNextNumber">
            <summary>
            Gets the next number in the range [Minimum, Maximum]
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.INumberGenerator.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:PublicDomain.INumberGenerator.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="T:PublicDomain.MonotonicNumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.NumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.NumberGenerator.m_maximum">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.NumberGenerator.m_minimum">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.NumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.NumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.NumberGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.NumberGenerator"/> class.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.NumberGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.NumberGenerator"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.NumberGenerator.GetNextNumber">
            <summary>
            Gets the next number in the range [Minimum, Maximum]
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.NumberGenerator.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:PublicDomain.NumberGenerator.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="F:PublicDomain.MonotonicNumberGenerator.Default">
            <summary>
            Monotonic number generator in the range [0, int.Max]
            </summary>
        </member>
        <member name="M:PublicDomain.MonotonicNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.MonotonicNumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.MonotonicNumberGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.MonotonicNumberGenerator"/> class.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.MonotonicNumberGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.MonotonicNumberGenerator"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.MonotonicNumberGenerator.GetNextNumber">
            <summary>
            Gets the next number in the range [Minimum, Maximum]
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.MonotonicNumberGenerator.Current">
            <summary>
            Gets or sets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomFeedParser">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.FeedParser">
            <summary>
            The FeedParser is, from the client's perspective, the
            entry point into the framework. The static methods of
            this class should be used to instantiate IFeeds
            which can then be manipulated.
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Parser">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.IParser.CreateFeed``1(System.Uri,System.Boolean)">
            <summary>
            Creates the feed.
            </summary>
            <param name="feedUri">The feed URI.</param>
            <param name="saveStream">if set to <c>true</c> [save stream].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.IParser.CreateFeed``1(System.IO.Stream)">
            <summary>
            Creates the feed.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.IParser.CreateFeed``1(System.String)">
            <summary>
            Creates the feed.
            </summary>
            <param name="feedUri">The feed URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.IParser.CreateFeedFromStream``1(System.String)">
            <summary>
            Creates the feed from stream.
            </summary>
            <param name="rawContent">Content of the raw.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.IParser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.GetDefaultXmlReaderSettings">
            <summary>
            Gets the default XML reader settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateXmlReaderFromString(System.String)">
            <summary>
            Creates the XML reader from string.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.ReadUriStream(System.String)">
            <summary>
            Reads the URI stream.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.ReadUriStream(System.String,System.Int32)">
            <summary>
            Reads the URI stream.
            </summary>
            <param name="uri">The URI.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.ReadUriStream(System.Uri)">
            <summary>
            Reads the URI stream.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.ReadUriStream(System.Uri,System.Int32)">
            <summary>
            Reads the URI stream.
            </summary>
            <param name="uri">The URI.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateFeedFromStream``1(System.String)">
            <summary>
            Creates the feed from stream.
            </summary>
            <param name="rawContent">Content of the raw.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateFeed``1(System.String)">
            <summary>
            Parses the specified URI into an IFeed.
            </summary>
            <param name="feedUri">Valid URI to an accessible resource stream.</param>
            <returns>IFeed representing the feed.</returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateFeed``1(System.Uri,System.Boolean)">
            <summary>
            Parses the specified URI into an IFeed.
            </summary>
            <param name="feedUri">Valid URI to an accessible resource stream.</param>
            <param name="saveStream">if set to <c>true</c> [save stream].</param>
            <returns>IFeed representing the feed.</returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateFeed``1(System.IO.Stream)">
            <summary>
            Parses the specified stream into an IFeed.
            The parser does not close the stream.
            </summary>
            <param name="input">An open stream to a feed stream.</param>
            <returns>IFeed representing the feed.</returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.CreateFeedBase``1(System.Xml.XmlReader)">
            <summary>
            Creates the feed base.
            </summary>
            <param name="feedReader">The feed reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Parser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.FeedParser.CreateFeedBase``1(System.Xml.XmlReader)">
            <summary>
            Creates the feed base.
            </summary>
            <param name="feedReader">The feed reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.FeedParser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ParseItem(System.Xml.XmlReader)">
            <summary>
            Parses the item.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomGenerator(System.Xml.XmlReader)">
            <summary>
            Converts to I atom generator.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomGenerator(System.String)">
            <summary>
            Converts to I atom generator.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomText(System.Xml.XmlReader)">
            <summary>
            Converts to I atom text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomText(System.String)">
            <summary>
            Converts to I atom text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomContent(System.Xml.XmlReader)">
            <summary>
            Converts the content of to I atom.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomContent(System.String)">
            <summary>
            Converts the content of to I atom.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomFeed(System.String)">
            <summary>
            Converts to I atom feed.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomPerson(System.Xml.XmlReader)">
            <summary>
            Converts to I atom person.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomLink(System.Xml.XmlReader)">
            <summary>
            Converts to I atom link.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Atom.AtomFeedParser.ConvertToIAtomCategory(System.Xml.XmlReader)">
            <summary>
            Converts to I atom category.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Data.Blob">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.DisposableCallback">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableCallback.#ctor(PublicDomain.CallbackNoArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DisposableCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:PublicDomain.DisposableCallback.#ctor(PublicDomain.CallbackWithRock,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DisposableCallback"/> class.
            </summary>
            <param name="callback">The callback.</param>
            <param name="rock">The rock.</param>
        </member>
        <member name="M:PublicDomain.DisposableCallback.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.Quadruple`4">
            <summary>
            Generic class that encapsulates four objects of any type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
        </member>
        <member name="F:PublicDomain.Quadruple`4.First">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Quadruple`4.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Quadruple`4.Third">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Quadruple`4.Fourth">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Quadruple`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Quadruple`4"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Quadruple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Quadruple`4"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="third">The third.</param>
            <param name="fourth">The fourth.</param>
        </member>
        <member name="M:PublicDomain.Quadruple`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:PublicDomain.Iso3166">
            <summary>
            Codes for the representation of names of countries and their subdivisions.
            http://en.wikipedia.org/wiki/ISO_3166
            </summary>
        </member>
        <member name="F:PublicDomain.Iso3166.TwoLetterCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso3166.CountryName">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Iso3166.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Iso3166"/> class.
            </summary>
            <param name="twoLetterCode">The two letter code.</param>
            <param name="countryName">Name of the country.</param>
        </member>
        <member name="M:PublicDomain.Iso3166.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:PublicDomain.InvariantCultureContext">
            <summary>
            The class can be used in a using() {} block or a try, finally block with
            a dispose call and allows for setting the current Thread's culture
            to the invariant culture during the length of the scope. This is useful
            when it is critical to have invariant culture rules, for example, if
            you are dependent that a real number is of the form X.XXXX, then you
            will be thrown off if there is a European culture.
            </summary>
        </member>
        <member name="M:PublicDomain.InvariantCultureContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.InvariantCultureContext"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.InvariantCultureContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.IExposesReaderWriterLock">
            <summary>
            Interface that represents an object that can be locked by a reader/writer lock.
            </summary>
        </member>
        <member name="M:PublicDomain.IExposesReaderWriterLock.OnBeforeAcquire(PublicDomain.ReaderWriterLockSynchronizeType)">
            <summary>
            Called when [before acquire].
            </summary>
            <param name="desiredType">Type of the desired.</param>
        </member>
        <member name="P:PublicDomain.IExposesReaderWriterLock.Sync">
            <summary>
            Gets the sync.
            </summary>
            <value>The sync.</value>
        </member>
        <member name="T:PublicDomain.ReaderWriterLockSynchronizeType">
            <summary>
            The type of lock to acquire on a <see cref="T:PublicDomain.DisposableReaderWriter"/> lock.
            </summary>
        </member>
        <member name="F:PublicDomain.ReaderWriterLockSynchronizeType.Read">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ReaderWriterLockSynchronizeType.Write">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.FileSystemUtilities">
            <summary>
            Methods to help in file system related manipulations.
            TODO Directory.Copy()
            </summary>
        </member>
        <member name="F:PublicDomain.FileSystemUtilities.TrackbackChars">
            <summary>
            / and \
            </summary>
        </member>
        <member name="F:PublicDomain.FileSystemUtilities.FileUriPrefix">
            <summary>
            file:///
            </summary>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectoryEndingRef(System.String@)">
            <summary>
            Ensures the directory ending ref.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectoryEndingRef(System.String@,System.Char)">
            <summary>
            Ensures the directory ending.
            </summary>
            <param name="directory">The directory.</param>
            <param name="appendChar">The append char.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectoryEnding(System.String)">
            <summary>
            Ensures the directory ending.
            </summary>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectoryEnding(System.String,System.Char)">
            <summary>
            Ensures the directory ending.
            </summary>
            <param name="directory">The directory.</param>
            <param name="appendChar">The append char.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.PathCombine(System.String,System.String)">
            <summary>
            Combines the two paths, making sure no two slashes are combined.
            </summary>
            <param name="path1">The path1.</param>
            <param name="path2">The path2.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.DoesFileSystemObjectExist(System.String)">
            <summary>
            Checks whether the specified <paramref name="path"/>
            points to an existing file system object such as a
            directory or a file.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.MoveFileSystemObject(System.String,System.String)">
            <summary>
            Moves the file system object from <paramref name="fromPath"/>
            to <paramref name="toPath"/> whether the object is a file
            or a directory.
            </summary>
            <param name="fromPath">From path.</param>
            <param name="toPath">To path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.DeleteFileSystemObject(System.String)">
            <summary>
            Deletes the file system object, whether it is a file or
            a directory. If it is a directory, the directory is
            recursively deleted.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.DeleteFileSystemObject(System.String,System.Boolean)">
            <summary>
            Deletes the file system object, whether it is a file or
            a directory. If it is a directory, <paramref name="recurseIfDirectory"/>
            dictates whether the delete is recursive.
            </summary>
            <param name="path">The path.</param>
            <param name="recurseIfDirectory">if set to <c>true</c> [recurse if directory].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetTemporaryDirectory">
            <summary>
            Gets the temporary directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetTempFileName(System.String)">
            <summary>
            Gets the location of a new temporary file name with the given
            extension. Extension should not begin with a period (e.g. just html, not .html).
            The file is created on disk with a file size of 0. It is guaranteed
            that the file is a new file that did not exist before.
            </summary>
            <param name="extension">The preferred file extension. Extension should not begin with a period (e.g. just html, not .html).</param>
            <returns>Location of the 0-byte file in a temporary location with the specified extension.</returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetTempFileName(System.String,System.String)">
            <summary>
            Gets the location of a new temporary file name with the given file name and
            extension. Extension should not begin with a period (e.g. just html, not .html).
            File name should not end with a period and should not contain the extension
            (as that is in the extension parameter).
            The file is created on disk with a file size of 0. It is guaranteed
            that the file is a new file that did not exist before.
            </summary>
            <param name="extension">The preferred file extension. Extension should not begin with a period (e.g. just html, not .html).</param>
            <param name="fileName">The preferred name of the file, without a trailing period, and without an extension (as that is specified by the extension parameter).</param>
            <returns>Location of the 0-byte file in a temporary location with the specified extension and name.</returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.DeleteDirectoryForcefully(System.String)">
            <summary>
            Deletes the directory forcefully.
            </summary>
            <param name="dir">The dir.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.RemoveReadOnly(System.String)">
            <summary>
            Removes the read only.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.SaveInputStreamToFile(System.IO.Stream,System.String)">
            <summary>
            Saves the input stream to file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="newFile">The new file.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.SaveTextReaderToFile(System.IO.TextReader,System.String)">
            <summary>
            Saves the text reader to file.
            </summary>
            <param name="stream">The stream.</param>
            <param name="newFile">The new file.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.CombineTrackbacksInPath(System.String)">
            <summary>
            Combines the trackbacks in path.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetTrackbackIndex(System.String)">
            <summary>
            Gets the index of the trackback.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.ReplaceInFile(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of <paramref name="search"/> with
            <paramref name="replace"/> in the file located at <paramref name="path"/>.
            </summary>
            <param name="search">The search.</param>
            <param name="replace">The replace.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.ReplaceInFileDiff(System.String,System.String,System.String)">
            <summary>
            Replaces all occurrences of <paramref name="search"/> with
            <paramref name="replace"/> in the file located at <paramref name="path"/>.
            Returns true if the file has been changed, false otherwise.
            </summary>
            <param name="search">The search.</param>
            <param name="replace">The replace.</param>
            <param name="path">The path.</param>
            <returns>true if the file has been changed, false otherwise.</returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.SplitFileIntoDirectoryAndName(System.String)">
            <summary>
            Splits <paramref name="path"/> based on the last directory
            separator, return a string array of length 2. The first element
            is the left portion, the directory, and the second element
            is the right portion, the file name. The directory separator is
            stripped from both, so the first element does not end with a trailing
            separator, nor does the second element begin with a directory
            separator. The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.SplitFileIntoDirectoryAndName(System.String,System.Boolean)">
            <summary>
            Splits <paramref name="path"/> based on the last directory
            separator, return a string array of length 2. The first element
            is the left portion, the directory, and the second element
            is the right portion, the file name. The directory separator is
            stripped from the second element, so the second element never begins with a directory
            separator. <paramref name="ensureDirectoryElementEndingSlash"/> controls
            whether or not the first element retains a trailing directory separator.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="path">The path.</param>
            <param name="ensureDirectoryElementEndingSlash">if set to <c>true</c> [ensure directory element ending slash].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectoriesInPath(System.String)">
            <summary>
            Ensures the directory in <paramref name="path"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The full directory path that was extracted
            from <paramref name="path"/> which is ensured to be
            created if it did not already exist.</returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetFileUriAsString(System.String)">
            <summary>
            Gets the file URI as string.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetFileUri(System.String)">
            <summary>
            Gets the file URI.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetPathFromUri(System.Uri)">
            <summary>
            Gets the path from URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetExtension(System.String)">
            <summary>
            Gets the extension in lower case, without a period in the beginning
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetExtension(System.String,System.Boolean)">
            <summary>
            Gets the extension in lower case, without a period in the beginning
            </summary>
            <param name="uri">The URI.</param>
            <param name="lowerCase">if set to <c>true</c> [lower case].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetExtension(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the extension, without a period in the beginning
            </summary>
            <param name="uri">The URI.</param>
            <param name="lowerCase">if set to <c>true</c> [lower case].</param>
            <param name="allowCompoundExtensions">if set to <c>true</c> [allow compound extensions].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.ReplaceExtension(System.String,System.String)">
            <summary>
            Replaces the extension. <paramref name="newExtension"/> does not
            begin with a period.
            </summary>
            <param name="path">The path.</param>
            <param name="newExtension">The new extension.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.GetRelativeLocation(System.String,System.String)">
            <summary>
            Gets the relative location.
            </summary>
            <param name="fromPath">From path.</param>
            <param name="toPath">To path.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.CopyDirectory(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="recurse"></param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.MoveFilesUp(System.String)">
            <summary>
            
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.FileCompare(System.String,System.String)">
            <summary>
            Return true if the files are the same, byte for byte.
            http://support.microsoft.com/kb/320348
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.Touch(System.String)">
            <summary>
            <paramref name="file"/> is the absolute path to a file.
            If <paramref name="file"/> does not exist, a 0-length file
            is created and true is returned. If <paramref name="file"/> does exist,
            the LastWrite time of the file is updated to the current time
            and false is returned.
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.CutOffTrailingSlashes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.FileSystemUtilities.EnsureDirectories(System.String[])">
            <summary>
            
            </summary>
            <param name="dirs"></param>
        </member>
        <member name="T:PublicDomain.Web.AuthenticatedWebIpProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Web.WebIpProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Web.IpProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Web.IIpProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Web.IIpProvider.GetIpAddress">
            <summary>
            Gets the ip address.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Web.IIpProvider.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Web.IIpProvider.LastCheck">
            <summary>
            Gets or sets the last check.
            </summary>
            <value>The last check.</value>
        </member>
        <member name="M:PublicDomain.Web.IpProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.IpProvider"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Web.IpProvider.GetIpAddress">
            <summary>
            Gets the ip address.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Web.IpProvider.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this instance is enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Web.IpProvider.LastCheck">
            <summary>
            Gets or sets the last check.
            </summary>
            <value>The last check.</value>
        </member>
        <member name="M:PublicDomain.Web.WebIpProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.WebIpProvider"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:PublicDomain.Web.WebIpProvider.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.WebIpProvider"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="successRegex">The success regex.</param>
            <param name="captureIndex">Index of the capture.</param>
        </member>
        <member name="M:PublicDomain.Web.WebIpProvider.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.WebIpProvider"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="successRegex">The success regex.</param>
            <param name="captureIndex">Index of the capture.</param>
            <param name="excessiveMatch">The excessive match.</param>
        </member>
        <member name="M:PublicDomain.Web.WebIpProvider.GetIpAddress">
            <summary>
            Gets the ip address.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Web.WebIpProvider.PrepareScraper(PublicDomain.ScreenScraper.Scraper)">
            <summary>
            Prepares the scraper.
            </summary>
            <param name="scraper">The scraper.</param>
        </member>
        <member name="M:PublicDomain.Web.AuthenticatedWebIpProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.AuthenticatedWebIpProvider"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:PublicDomain.Web.AuthenticatedWebIpProvider.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.AuthenticatedWebIpProvider"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="url">The URL.</param>
            <param name="successRegex">The success regex.</param>
            <param name="captureIndex">Index of the capture.</param>
        </member>
        <member name="M:PublicDomain.Web.AuthenticatedWebIpProvider.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.AuthenticatedWebIpProvider"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="url">The URL.</param>
            <param name="successRegex">The success regex.</param>
            <param name="captureIndex">Index of the capture.</param>
            <param name="excessiveMatch">The excessive match.</param>
        </member>
        <member name="M:PublicDomain.Web.AuthenticatedWebIpProvider.PrepareScraper(PublicDomain.ScreenScraper.Scraper)">
            <summary>
            Prepares the scraper.
            </summary>
            <param name="scraper">The scraper.</param>
        </member>
        <member name="T:PublicDomain.ScreenScraper.Scraper">
            <summary>
            Entry point to scrape an HTML page.
            This class is not thread safe.
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper.DefaultExternalCallTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper.m_FollowEquivRefreshes">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper.m_Session">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper.m_Referer">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper._LastProcessResponseUri">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper.LastMetaFollow">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper._MetaRefreshScrapeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.Scraper._Domain">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ScreenScraper.Scraper"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.#ctor(System.String)">
            <summary>
            This is used for a requests referer attribute as well as setting any cookies.
            This should be in the form "www.domain.com," without the prepended scheme.
            </summary>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.SetNetworkCredentials(System.String,System.String)">
            <summary>
            Sets the network credentials.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.SetNetworkCredentials(System.String,System.String,System.String)">
            <summary>
            Sets the network credentials.
            </summary>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="domain">The domain.</param>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.Scrape(PublicDomain.ScreenScraper.ScrapeType,System.String,System.String[])">
            <summary>
            Scrapes the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="keyAndValuePairs">The key and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.SimpleScrape(PublicDomain.ScreenScraper.ScrapeType,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Simples the scrape.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.SimpleScrape(PublicDomain.ScreenScraper.ScrapeType,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Scrapes the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.SimpleScrape(PublicDomain.ScreenScraper.ScrapeType,System.String,System.String[])">
            <summary>
            Scrapes the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="keyAndValuePairs">The key and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.Scrape(PublicDomain.ScreenScraper.ScrapeType,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Scrapes the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.RequiresCredentials(PublicDomain.ScreenScraper.ScrapeType,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Requireses the credentials.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.RequiresCredentials(PublicDomain.ScreenScraper.ScrapeType,System.String,System.String[])">
            <summary>
            Requireses the credentials.
            </summary>
            <param name="type">The type.</param>
            <param name="uri">The URI.</param>
            <param name="keyAndValuePairs">The key and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.PostProcessData(PublicDomain.ScreenScraper.ScrapedPage)">
            <summary>
            Posts the process data.
            </summary>
            <param name="page">The page.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.BuildQueryString(System.String[])">
            <summary>
            Builds the query string.
            </summary>
            <param name="keyAndValuePairs">The key and value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.BuildQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds the query string.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.HttpGet(System.String)">
            <summary>
            HTTPs the get.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.HttpPost(System.String,System.String)">
            <summary>
            HTTPs the post.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.ProcessResponseStream(System.Net.HttpWebRequest)">
            <summary>
            Processes the response stream.
            </summary>
            <param name="req">The req.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.Scraper.CreateWebRequest(System.String)">
            <summary>
            Creates the web request.
            </summary>
            <param name="URI">The URI.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.Timeout">
            <summary>
            The number of milliseconds to wait before the request times out. The default
            is 100,000 milliseconds (100 seconds).
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.FollowEquivRefreshes">
            <summary>
            Gets or sets a value indicating whether [follow equiv refreshes].
            </summary>
            <value>
            	<c>true</c> if [follow equiv refreshes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.Referer">
            <summary>
            Gets or sets the referer.
            </summary>
            <value>The referer.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.LastProcessResponseUri">
            <summary>
            Gets or sets the last process response URI.
            </summary>
            <value>The last process response URI.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.MetaRefreshScrapeType">
            <summary>
            If there is a meta refresh, then this specified
            the scrape type to use to follow the link. If this
            value is null, then the scrape type of the previous request
            is used.
            </summary>
            <value>The type of the meta refresh scrape.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.Domain">
            <summary>
            This is used for a requests referer attribute as well as setting any cookies.
            This should be in the form "www.domain.com," without the prepended scheme.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.Scraper.UseCredentials">
            <summary>
            Gets or sets a value indicating whether [use credentials].
            </summary>
            <value><c>true</c> if [use credentials]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PublicDomain.LogicalDisposeScope">
            <summary>
            And IDisposable objects add to the Current property of this
            class within this scope of a LogicalDisposeScope will be disposed
            at the end of this or a containing scope (depending on combination logic).
            This ensures that Dispose is either manually called or, in the case of
            an exception, outside some logical context
            </summary>
        </member>
        <member name="T:PublicDomain.LogicalTransactionScope`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PublicDomain.LogicalTransactionScope`1.m_target">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.LogicalTransactionScope`1.Push(`0,PublicDomain.TransactionCombinationLogic)">
            <summary>
            Pushes the specified scope.
            </summary>
            <param name="scope">The scope.</param>
            <param name="combinationLogic">The combination logic.</param>
        </member>
        <member name="M:PublicDomain.LogicalTransactionScope`1.Pop">
            <summary>
            Pops this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.LogicalTransactionScope`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:PublicDomain.LogicalTransactionScope`1.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:PublicDomain.LogicalTransactionScope`1.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:PublicDomain.LogicalTransactionScope`1.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:PublicDomain.LogicalDisposeScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.LogicalDisposeScope"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.LogicalDisposeScope.#ctor(PublicDomain.TransactionCombinationLogic)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.LogicalDisposeScope"/> class.
            </summary>
            <param name="combinationLogic">The combination logic.</param>
        </member>
        <member name="M:PublicDomain.LogicalDisposeScope.AddDisposable(System.IDisposable)">
            <summary>
            Adds the disposable.
            </summary>
            <param name="disposable">The disposable.</param>
        </member>
        <member name="M:PublicDomain.LogicalDisposeScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.Web.Doctype">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html2DOT0">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html3DOT2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html4DOT1Strict">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html4DOT1Transitional">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html4DOT1Frameset">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.Html5">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.XHtml1DOT0Strict">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.XHtml1DOT0Transitional">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.XHtml1DOT0Frameset">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.Doctype.XHtml1DOT1">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Geography.Country">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.Country.DefaultRegionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.Country.DefaultCountryOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Geography.Country.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Country"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Geography.Country.#ctor(System.String,System.String,PublicDomain.Geography.Region[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Country"/> class.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
            <param name="name">The name.</param>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:PublicDomain.Geography.Country.#ctor(System.String,System.String,PublicDomain.Geography.RegionType,PublicDomain.Geography.Region[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Country"/> class.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
            <param name="name">The name.</param>
            <param name="assumedRegionType">Type of the assumed region.</param>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:PublicDomain.Geography.Country.#ctor(System.String,System.String,PublicDomain.Geography.CountryOptions,PublicDomain.Geography.Region[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Country"/> class.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
            <param name="name">The name.</param>
            <param name="options">The options.</param>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:PublicDomain.Geography.Country.#ctor(System.String,System.String,PublicDomain.Geography.RegionType,PublicDomain.Geography.CountryOptions,PublicDomain.Geography.Region[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Country"/> class.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
            <param name="name">The name.</param>
            <param name="assumedRegionType">Type of the assumed region.</param>
            <param name="options">The options.</param>
            <param name="regions">The regions.</param>
        </member>
        <member name="M:PublicDomain.Geography.Country.GetReadableRegionType(PublicDomain.Geography.RegionType)">
            <summary>
            Gets the type of the readable region.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Geography.Country.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Geography.Country.Abbreviation">
            <summary>
            Gets or sets the abbreviation.
            </summary>
            <value>The abbreviation.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.Regions">
            <summary>
            Gets the regions.
            </summary>
            <value>The regions.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.AssumedRegionType">
            <summary>
            Gets the type of the assumed region.
            </summary>
            <value>The type of the assumed region.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.Options">
            <summary>
            Gets the options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.AllCountries">
            <summary>
            Gets all countries.
            </summary>
            <value>All countries.</value>
        </member>
        <member name="P:PublicDomain.Geography.Country.AllCountriesMap">
            <summary>
            Gets all countries map.
            </summary>
            <value>All countries map.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomLink">
            <summary>
            Identifies a related Web page.
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.Href">
            <summary>
            Gets or sets the href.
            </summary>
            <value>The href.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.Relationship">
            <summary>
            Gets or sets the relationship.
            </summary>
            <value>The relationship.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.LinkLanguage">
            <summary>
            Gets or sets the link language.
            </summary>
            <value>The link language.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomLink.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.Href">
            <summary>
            Gets or sets the href.
            </summary>
            <value>The href.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.Relationship">
            <summary>
            Gets or sets the relationship.
            </summary>
            <value>The relationship.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.LinkLanguage">
            <summary>
            Gets or sets the link language.
            </summary>
            <value>The link language.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomLink.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomCategory">
            <summary>
            Specifies a category that the feed belongs to. A feed may have multiple category elements.
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomCategory.Term">
            <summary>
            Gets or sets the term.
            </summary>
            <value>The term.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomCategory.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomCategory.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomCategory.Term">
            <summary>
            Gets or sets the term.
            </summary>
            <value>The term.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomCategory.Scheme">
            <summary>
            Gets or sets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomCategory.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:PublicDomain.Data.DbConnectionScope">
            <summary>
            This object is used to create a scope in which one database connection
            is re-used. A stack of scopes exists, so that once the current instance
            is disposed, we back out to the previous contextual scope.
            
            You should not re-use connections across TransactionScope boundaries.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbConnectionScope"/> class.
            By default, this will inherit connections from containing scopes. To
            ensure a new connection, use the other constructor and pass true.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbConnectionScope.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbConnectionScope"/> class.
            If <paramref name="inheritConnections"/> is false, a new Database connection
            will be used in this scope.
            </summary>
            <param name="inheritConnections">if set to <c>true</c> [inherit connections].</param>
        </member>
        <member name="M:PublicDomain.Data.DbConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbConnectionScope.CloseConnections">
            <summary>
            Closes the connections.
            </summary>
        </member>
        <member name="P:PublicDomain.Data.DbConnectionScope.Current">
            <summary>
            Gets the current.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:PublicDomain.Data.DbConnectionScope.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:PublicDomain.Data.DbConnectionScope.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Data.DbConnectionScope.InheritConnections">
            <summary>
            Gets or sets a value indicating whether [inherit connections].
            </summary>
            <value><c>true</c> if [inherit connections]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PublicDomain.Data.DbConnectionScope.AllowConnectionInheritance">
            <summary>
            Gets or sets a value indicating whether [allow connection inheritance].
            </summary>
            <value>
            	<c>true</c> if [allow connection inheritance]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptDoWhileStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptComment">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptCatchStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ImageUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ImageUtilities.MaxFileSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ImageUtilities.ResizeImage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="thumbnailWidth"></param>
            <param name="thumbnailHeight"></param>
            <param name="thumbFileName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ImageUtilities.ResizeImage(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="thumbnailWidth"></param>
            <param name="thumbnailHeight"></param>
            <param name="thumbFileName"></param>
            <param name="highQuality"></param>
            <param name="keepAspectRatio"></param>
            <param name="cutToAspectRatio"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.StringUtilities">
            <summary>
            String manipulation and generation methods, as well as string array manipulation.
            </summary>
        </member>
        <member name="F:PublicDomain.StringUtilities.DefaultQuoteSensitiveChars">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.StringUtilities.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.StringUtilities.IsStringNullOrEmptyWithTrim(System.String)">
            <summary>
            Determines whether [is string null or empty with trim] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string null or empty with trim] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.Join(System.String,System.Char[])">
            <summary>
            Joins.
            </summary>
            <param name="separator">The separator.</param>
            <param name="chars">The chars.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetBytesFromString(System.String)">
            <summary>
            Gets the bytes from string.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetStringFromBytes(System.Byte[])">
            <summary>
            Gets the string from bytes.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.RandomString(System.Int32,System.Boolean)">
            <summary>
            Returns a string of length <paramref name="size"/> filled
            with random ASCII characters in the range A-Z, a-z. If <paramref name="lowerCase"/>
            is <c>true</c>, then the range is only a-z.
            </summary>
            <param name="size">The size.</param>
            <param name="lowerCase">if set to <c>true</c> [lower case].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.PadIntegerLeft(System.Int32,System.Int32)">
            <summary>
            Returns a string of length <paramref name="length"/> with
            0's padded to the left, if necessary.
            </summary>
            <param name="val">The val.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.PadIntegerLeft(System.Int32,System.Int32,System.Char)">
            <summary>
            Pads the integer left.
            </summary>
            <param name="val">The val.</param>
            <param name="length">The length.</param>
            <param name="pad">The pad.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.PadIntegerRight(System.Int32,System.Int32)">
            <summary>
            Returns a string of length <paramref name="length"/> with
            0's padded to the right, if necessary.
            </summary>
            <param name="val">The val.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.PadIntegerRight(System.Int32,System.Int32,System.Char)">
            <summary>
            Pads the integer right.
            </summary>
            <param name="val">The val.</param>
            <param name="length">The length.</param>
            <param name="pad">The pad.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replace the first occurrence of <paramref name="find"/> (case sensitive) with
            <paramref name="replace"/>.
            </summary>
            <param name="str">The STR.</param>
            <param name="find">The find.</param>
            <param name="replace">The replace.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.ReplaceFirst(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Replace the first occurrence of <paramref name="find"/> with
            <paramref name="replace"/>.
            </summary>
            <param name="str">The STR.</param>
            <param name="find">The find.</param>
            <param name="replace">The replace.</param>
            <param name="findComparison">The find comparison.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitAroundIndexOf(System.String,System.Char)">
            <summary>
            Splits <paramref name="str"/> based on finding the first location of <paramref name="ch"/>. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is not included in either portion.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="ch">The character to find.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitAroundIndexOfAny(System.String,System.Char[])">
            <summary>
            Splits <paramref name="str"/> based on finding the first location of any of the characters from
            <paramref name="anyOf"/>. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is not included in either portion.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="anyOf">Any of.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitAroundLastIndexOf(System.String,System.Char)">
            <summary>
            Splits <paramref name="str"/> based on finding the last location of <paramref name="ch"/>. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is not included in either portion.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="ch">The character to find.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitAroundLastIndexOfAny(System.String,System.Char[])">
            <summary>
            Splits <paramref name="str"/> based on finding the last location of any of the charactesr from
            <paramref name="anyOf"/>. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is not included in either portion.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="anyOf">Any of.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitAround(System.String,System.Int32)">
            <summary>
            Splits <paramref name="str"/> based on the index. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is not included in either portion.
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.Split(System.String[],System.Char,System.Int32[])">
            <summary>
            Splits the specified pieces.
            </summary>
            <param name="pieces">The pieces.</param>
            <param name="splitChar">The split char.</param>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitQuoteSensitive(System.String,System.Char[])">
            <summary>
            Splits the string based on whitespace, being sensitive to
            quotes. Always returns a non-null array, possibly zero-length.
            </summary>
            <param name="line">The line.</param>
            <param name="dividerChars">The divider chars.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitQuoteSensitive(System.String,System.Boolean,System.Char[])">
            <summary>
            Splits the string based on whitespace, being sensitive to
            quotes. Always returns a non-null array, possibly zero-length.
            </summary>
            <param name="line">The line.</param>
            <param name="retainDivider">if set to <c>true</c> [retain divider].</param>
            <param name="dividerChars">The divider chars.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.RemoveConsecutiveWhitespace(System.String)">
            <summary>
            Ensures that within <paramref name="str"/> there are no two
            consecutive whitespace characters.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.ReplaceConsecutiveWhitespace(System.String,System.String)">
            <summary>
            Ensures that within <paramref name="str"/> there are no two
            consecutive whitespace characters.
            </summary>
            <param name="str">The STR.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.RemoveCharacters(System.String,System.Char[])">
            <summary>
            Removes all characters passed in from the string.
            </summary>
            <param name="str"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.RemoveCharactersInverse(System.String,System.Char[])">
            <summary>
            Remove all characters that are not in the passed in array
            from the string.
            </summary>
            <param name="str"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.RemoveEmptyPieces(System.String[])">
            <summary>
            Removes the empty pieces.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.IndexOfEmptyPiece(System.String[])">
            <summary>
            Indexes the of empty piece.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.IndexOfEmptyPiece(System.String[],System.Int32)">
            <summary>
            Indexes the of empty piece.
            </summary>
            <param name="array">The array.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.FirstSplit(System.String,System.Char,System.Boolean,System.String@,System.String@)">
            <summary>
            Splits into two pieces based on the find character.
            </summary>
            <param name="str">The STR.</param>
            <param name="find">The find.</param>
            <param name="trim">if set to <c>true</c> [trim].</param>
            <param name="piece1">The piece1.</param>
            <param name="piece2">The piece2.</param>
        </member>
        <member name="M:PublicDomain.StringUtilities.ExtractFirstNumber(System.String)">
            <summary>
            Extracts the first number in the string, discarding the rest.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.LastIndexOfAny(System.String,System.String[])">
            <summary>
            Searches for all matches to the <paramref name="searches"/>
            parameters, and returns the index which is the furthest to
            the end of the string. Returns -1 if none of the strings
            can be found.
            </summary>
            <param name="str">The STR.</param>
            <param name="searches">The searches.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.ComputeNonCollidingHash(System.String)">
            <summary>
            Computes the non colliding hash
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.SplitOn(System.String,System.Int32,System.Boolean)">
            <summary>
            Splits <paramref name="str"/> based on the index. The first element
            is the left portion, and the second element
            is the right portion. The character at index <paramref name="index"/>
            is either included at the end of the left portion, or at the
            beginning of the right portion, depending on <paramref name="isIndexInFirstPortion"/>
            The return result is never null, and the elements
            are never null, so one of the elements may be an empty string.
            </summary>
            <param name="str">The STR.</param>
            <param name="index">The index.</param>
            <param name="isIndexInFirstPortion">if set to <c>true</c> [is index in first portion].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.FormatPrecision(System.Decimal,System.Int32)">
            <summary>
            Formats the precision.
            </summary>
            <param name="value">The value.</param>
            <param name="precision">The precision.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.FormatPrecision(System.Decimal,System.Int32,System.Boolean)">
            <summary>
            Formats the precision.
            </summary>
            <param name="value">The value.</param>
            <param name="precision">The precision.</param>
            <param name="chopOffZeros">if set to <c>true</c> [chop off zeros].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CutRight(System.String,System.Int32)">
            <summary>
            Cuts the right.
            </summary>
            <param name="str">The STR.</param>
            <param name="resultingLength">Length of the resulting.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.FormatNumberWithBytes(System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <param name="showDecimalPart"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.FormatNumberWithBytes(System.Int64,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="num">Bytes</param>
            <param name="showDecimalPart"></param>
            <param name="decimalPrecision"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CalculateMD5Sum(System.String)">
            <summary>
            Calculates the M d5 sum.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CalculateMD5Sum(System.String,System.Text.Encoding)">
            <summary>
            Calculates the M d5 sum.
            </summary>
            <param name="str">The STR.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CalculateCRC32(System.String)">
            <summary>
            Calculates the CR C32.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.TrimNewlines(System.String)">
            <summary>
            Trims the newlines.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.TrimNewlinesLeft(System.String)">
            <summary>
            Trims the newlines left.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.TrimNewlinesRight(System.String)">
            <summary>
            Trims the newlines right.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CreateString(System.String,System.Int32)">
            <summary>
            Creates the string.
            </summary>
            <param name="repeat">The repeat.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.Join(System.Int32[])">
            <summary>
            Joins the specified integers.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.Join(System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.Join(System.String,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="separator"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CountInstances(System.String,System.Char)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CountInstances(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="find"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.CutRightCharacters(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="numCharacters"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetUriAuthority(System.String)">
            <summary>
            Equivalent to new Uri(uri).GetLeftPart(UriPartial.Authority), except it attempts
            to be more efficient. Always ends in a trailing slash.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetPastUriAuthority(System.String)">
            <summary>
            Returns a non-null string (but it may be an empty string).
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetPastUriAuthority(System.String,System.Boolean)">
            <summary>
            Returns a non-null string (but it may be an empty string).
            </summary>
            <param name="uri"></param>
            <param name="cutOffQuery"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.GetHumandReadableText(System.String)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.StringUtilities.UppercaseWordStarts(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Pair`2">
            <summary>
            Generic class that encapsulates a pair of objects of any types. This class is similar
            to System.Collections.Generic.KeyValuePair except that it is a class, not
            a struct and also exposes the values as public fields and more generically than a "key" and
            a "value."
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
        </member>
        <member name="F:PublicDomain.Pair`2.First">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Pair`2.Second">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Pair`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Pair`2"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Pair`2"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:PublicDomain.Pair`2.FindPairByKey(PublicDomain.Pair{`0,`1}[],`0)">
            <summary>
            Finds the pair by key.
            </summary>
            <param name="search">The search.</param>
            <param name="find">The find.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Pair`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:PublicDomain.GenericUtilities">
            <summary>
            Various utilities that work on generics
            </summary>
        </member>
        <member name="M:PublicDomain.GenericUtilities.EqualsComparison``1(``0,``0)">
            <summary>
            Equalses the comparison.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.RevertAsserts">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RevertAsserts.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.RevertAsserts.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.ApplicationLogger">
            <summary>
            Provides a common application logger, which writes to a rolling
            log file in the application's working directory. The logger
            always logs severe log events using the <see cref="T:PublicDomain.Logging.SevereLogFilter"/>,
            and by default, uses the default Logger <see cref="P:PublicDomain.Logging.Logger.Threshold"/> value of Warn.
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.CompositeLogger">
            <summary>
            By default does not have any filters, and supposes that the composed logs will filter.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.CompositeLogger.m_loggers">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.CompositeLogger.#ctor(PublicDomain.Logging.Logger[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.CompositeLogger"/> class.
            </summary>
            <param name="loggers">The loggers.</param>
        </member>
        <member name="M:PublicDomain.Logging.CompositeLogger.AddLogger(PublicDomain.Logging.Logger)">
            <summary>
            Adds the logger.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.CompositeLogger.Log(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="severity"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.CompositeLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="P:PublicDomain.Logging.CompositeLogger.Loggers">
            <summary>
            Gets the loggers.
            </summary>
            <value>The loggers.</value>
        </member>
        <member name="P:PublicDomain.Logging.CompositeLogger.Threshold">
            <summary>
            The severity threshold at which point a log message
            is logged. For example, if the threshold is Debug,
            all messages with severity greater than or equal to Debug
            will be logged. All other messages will be discarded.
            The default threshold is Warn.
            </summary>
            <value></value>
        </member>
        <member name="F:PublicDomain.Logging.ApplicationLogger.Current">
            <summary>
            Static logger provides a common application logger, which writes to a rolling
            log file in the application's working directory. The logger
            always logs severe log events using the <see cref="T:PublicDomain.Logging.SevereLogFilter"/>,
            and by default, uses the default Logger <see cref="P:PublicDomain.Logging.Logger.Threshold"/> value of Warn.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.ApplicationLogger.#ctor">
            <summary>
            Provides a common application logger, which writes to a rolling
            log file in the application's working directory. The logger
            always logs severe log events using the <see cref="T:PublicDomain.Logging.SevereLogFilter"/>,
            and by default, uses the default Logger <see cref="P:PublicDomain.Logging.Logger.Threshold"/> value.
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.ApplicationLogger"/> class.
            </summary>
        </member>
        <member name="T:PublicDomain.Xml.LenientXmlDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.DefaultRootElementName">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.DefaultEmptyXml">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_current">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_lastElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_attributeTarget">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_sb">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_exclamationInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_createDefaultDocumentElement">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_isAllWhitespace">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_state">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_defaultRootElementName">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_ignoreDtd">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_attribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_attributeValueMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_comment">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_cdata">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.m_preEntityState">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientXmlDocument"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientXmlDocument"/> class.
            </summary>
            <param name="defaultRootElementName">Name of the default root element.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientXmlDocument"/> class.
            </summary>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.#ctor(System.Xml.XmlNameTable,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientXmlDocument"/> class.
            </summary>
            <param name="nt">The nt.</param>
            <param name="defaultRootElementName">Name of the default root element.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.LoadXml(System.String)">
            <summary>
            Loads the XML document from the specified string.
            </summary>
            <param name="xml">String containing the XML document to load.</param>
            <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.IsXmlWhitespace(System.Char)">
            <summary>
            Determines whether [is XML whitespace] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is XML whitespace] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.IsValidEntityCharacter(System.Char)">
            <summary>
            Determines whether [is valid entity character] [the specified p].
            </summary>
            <param name="p">The p.</param>
            <returns>
            	<c>true</c> if [is valid entity character] [the specified p]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.IsValidEntityFirstCharacter(System.Char)">
            <summary>
            Determines whether [is valid entity first character] [the specified p].
            </summary>
            <param name="p">The p.</param>
            <returns>
            	<c>true</c> if [is valid entity first character] [the specified p]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.ContextSwitch(PublicDomain.Xml.LenientXmlDocument.State)">
            <summary>
            Contexts the switch.
            </summary>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix"></see>, <see cref="P:System.Xml.XmlDocument.LocalName"></see>, and <see cref="P:System.Xml.XmlNode.NamespaceURI"></see>.
            </summary>
            <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent.</param>
            <param name="localName">The local name of the new element.</param>
            <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent.</param>
            <returns>
            The new <see cref="T:System.Xml.XmlElement"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.UpdateNamespaceForNewElement(System.String)">
            <summary>
            Updates the namespace for new element.
            </summary>
            <param name="namespaceURI">The namespace URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.SetCommentData(System.Xml.XmlComment,System.String)">
            <summary>
            Sets the comment data.
            </summary>
            <param name="comment">The comment.</param>
            <param name="token">The token.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.AddCommentData(System.Xml.XmlComment,System.String)">
            <summary>
            Adds the comment data.
            </summary>
            <param name="comment">The comment.</param>
            <param name="moreData">The more data.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PostProcessElement(System.Xml.XmlElement)">
            <summary>
            Posts the process element.
            </summary>
            <param name="lastElement">The last element.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.ConvertEntityToValue(System.String)">
            <summary>
            Converts the entity to value.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.GetNumericalCharacterReferenceValue(System.String)">
            <summary>
            Gets the numerical character reference value.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PostProcessSetCData(System.Xml.XmlCDataSection)">
            <summary>
            Posts the process set C data.
            </summary>
            <param name="m_cdata">The m_cdata.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PostProcessSetCommentData(System.Xml.XmlComment)">
            <summary>
            Posts the process set comment data.
            </summary>
            <param name="m_comment">The m_comment.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PostProcessSetAttributeValue(System.Xml.XmlAttribute)">
            <summary>
            Posts the process set attribute value.
            </summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.FindNamespaceByPrefix(System.String)">
            <summary>
            Finds the namespace by prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.TryChangeNamespace(System.String,System.String@,System.String@)">
            <summary>
            Tries the change namespace.
            </summary>
            <param name="token">The token.</param>
            <param name="ns">The ns.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.GetDefaultNamespaceUriForPrefix(System.String)">
            <summary>
            Gets the default namespace URI for prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.AddNewElementToParent(System.Xml.XmlElement)">
            <summary>
            Adds the new element to parent.
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PrepareEntityName(System.String)">
            <summary>
            Prepares the name of the entity.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.PrepareElementName(System.String)">
            <summary>
            Prepares the name of the element.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.IsValidFirstNameCharacter(System.Char)">
            <summary>
            Determines whether [is valid first name character] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is valid first name character] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.IsValidNameCharacter(System.Char)">
            <summary>
            Determines whether [is valid name character] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is valid name character] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.FinishNewElement(System.Xml.XmlElement)">
            <summary>
            Finishes the new element.
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.InternalAppendChild(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Internals the append child.
            </summary>
            <param name="child">The child.</param>
            <param name="mayHaveChildren">if set to <c>true</c> [may have children].</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.ResetAfterContextSwitch">
            <summary>
            Resets the after context switch.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientXmlDocument.GetDefaultDocumentNode">
            <summary>
            Gets the default document node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Xml.LenientXmlDocument.IgnoreDtd">
            <summary>
            Gets or sets a value indicating whether [ignore DTD].
            </summary>
            <value><c>true</c> if [ignore DTD]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PublicDomain.Xml.LenientXmlDocument.RootElementName">
            <summary>
            Gets or sets the name of the default root element.
            </summary>
            <value>The name of the default root element.</value>
        </member>
        <member name="P:PublicDomain.Xml.LenientXmlDocument.CreateDefaultDocumentElement">
            <summary>
            Creates the default document element.
            </summary>
        </member>
        <member name="T:PublicDomain.Xml.LenientXmlDocument.State">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.Element">
            <summary>
            Element has opened
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.InElement">
            <summary>
            Within whitespace in an element
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndElement">
            <summary>
            Opening of an element has finished. This is *not*
            the case of a self-enclosed tag.
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.CloseElement">
            <summary>
            Within closing tag
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndCloseElement">
            <summary>
            The end of a closing tag
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndElementImmediate">
            <summary>
            Self-enclosed tag is finished
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.Finished">
            <summary>
            Processing of the entire document is finished
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartAttributeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndAttributeValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartExclamationPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.InComment">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndComment">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.InCDATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.EndCDATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartEntity">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartDoctype">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientXmlDocument.State.StartProcessingInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Set`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:PublicDomain.Set`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Set`1.Put(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:PublicDomain.Set`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Set`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Set`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Set`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Interfaces.IIdProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Interfaces.IIdProvider.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Geography.RegionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.State">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.StateTerritory">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.City">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.Region">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.CityRegion">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.Province">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.County">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.Prefecture">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.AdministrativeDivision">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.RegionType.ConstituentCountry">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssTextInput">
            <summary>
            The purpose of the textInput element is something of a mystery. You can use it to specify a search engine box. Or to allow a reader to provide feedback. Most aggregators ignore it.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssTextInput.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssTextInput.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssTextInput.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssTextInput.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssTextInput">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssTextInput.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssTextInput.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssTextInput.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssTextInput.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.DotNetSolution">
            <summary>
            Represents a .NET solution which is countable
            </summary>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.Countable">
            <summary>
            Abstract implementation of <see cref="T:PublicDomain.Code.CodeCount.ICountable"/>
            </summary>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.ICountable">
            <summary>
            Represents something that can be counted.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.ICountable.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.ICountable.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.ICountable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.ICountable.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.ICountable.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.Countable.m_name">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.Countable.m_type">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.Countable.m_location">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.Countable.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.Countable.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.Countable.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.Countable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.Countable.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.Countable.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DotNetSolution.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.DotNetSolution"/> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DotNetSolution.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.CountStream">
            <summary>
            Abstract stream of countable items
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStream.m_first">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStream.m_length">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStream.m_type">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStream.m_location">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.#ctor(PublicDomain.Code.CodeCount.CountStreamType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.CountStream"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.Open(System.String,PublicDomain.Code.CodeCount.CountStreamType)">
            <summary>
            Opens the specified type.
            </summary>
            <param name="location">The location.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountStream.GetLength">
            <summary>
            Gets the length.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptWhileStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.AspRuntimeHost.wwWorkerRequest">
            <summary>
            A subclass of SimpleWorkerRequest that allows to push data to the ASP.Net request
            via the Context object.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.ParameterData">
            <summary>
            Optional parameter data sent to the ASP.Net page. This value is stored into the 
            Context object as Context["Content"]. Only a single parameter can be passed,
            but you can pass an object that contains additional properties.
            Objects passed must be serializable or inherit from MarshalByRefObject.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.Context">
            <summary>
            Contains a set of parameters
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.ResponseData">
            <summary>
            Returns optional Response data that is retrieved from the Context object
            via the Context["ResultContent"] key.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.PostData">
            <summary>
            Optional PostBuffer that allows sending Postable data to the ASPX page.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.PostContentType">
            <summary>
            The content type for the POST operation. Defaults to application/x-www-form-urlencoded.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.ResponseHeaders">
            <summary>
            Hashtable that contains the server headers as header/value pairs
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.Cookies">
            <summary>
            Collection that captures all the cookies in the request
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.RequestHeaders">
            <summary>
            Pass in a set of request headers as Header / Value pairs
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.ResponseStatusCode">
            <summary>
            Numeric Server Response Code
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.PhysicalPath">
            <summary>
            The physical path for this application
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwWorkerRequest.CurrentContext">
            <summary>
            Internal property used to keep track of the HTTP Context object.
            Used to retrieve the Context.Item["ResultContent"] value
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.#ctor(System.String,System.String,System.IO.TextWriter)">
            <summary>
            Callback to basic constructor
            </summary>
            <param name="Page">Name of the page to execute in the Web app. Must be in the VRoot defined for the app with the app host.</param>
            <param name="QueryString">Optional QueryString. Pass null if no query string data.</param>
            <param name="Output">TextWriter object that receives the output from the request.</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.GetAppPathTranslated">
            <summary>
            Returns the UNC-translated path to the currently executing server application.
            </summary>
            <returns>
            The physical path of the current application.
            </returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.SetEndOfSendNotification(System.Web.HttpWorkerRequest.EndOfSendNotification,System.Object)">
            <summary>
            Method that is called just before the ASP.Net page gets executed. Allows
            setting of the Context object item collection with arbitrary data. Also saves
            the Context object so it can be used later to retrieve any result data.
            Inbound: Context.Items["Content"] (Parameter data)
                     OR: you can add Context items directly by name and pick them up by name
            Outbound: Context.Items["ResultContent"]
            </summary>
            <param name="callback">callback delegate</param>
            <param name="extraData">extraData for system purpose</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.GetHttpVerbName">
            <summary>
            We must send the Verb so the server knows that it's a POST request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.GetKnownRequestHeader(System.Int32)">
            <summary>
            We must override this method to send the ContentType to the client
            when POSTing so that the request is recognized as a POST.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.GetPreloadedEntityBody">
            <summary>
            Return any POST data if provided
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.SendStatus(System.Int32,System.String)">
            <summary>
            Set the internal status code we can pick up
            Pick up ResultContent Content variable 
            </summary>
            <param name="statusCode"></param>
            <param name="statusDescription"></param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
            <summary>
            Retrieve Response Headers and store in ResponseHeaders() collection
            so we can simulate them from the browser.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
            <summary>
            Store custom headers to ResponseHeaders Hashtable collection
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:PublicDomain.ScreenScraper.ScrapeSession">
            <summary>
            Represents an HTTP session during a scraping of a page.
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapeSession.#ctor(PublicDomain.ScreenScraper.Scraper)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ScreenScraper.ScrapeSession"/> class.
            </summary>
            <param name="scraper">The scraper.</param>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapeSession.m_Cookies">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapeSession.AddCookie(System.String,System.String)">
            <summary>
            Adds the cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapeSession.ContainingScraper">
            <summary>
            Gets or sets the containing scraper.
            </summary>
            <value>The containing scraper.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapeSession.Cookies">
            <summary>
            Gets the cookies.
            </summary>
            <value>The cookies.</value>
        </member>
        <member name="T:PublicDomain.Logging.StringLogger">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.StringLogger.DefaultCapacity">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.StringLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.StringLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.StringLogger.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.StringLogger"/> class.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:PublicDomain.Logging.StringLogger.DoLog(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String)">
            <summary>
            High level final log that is called with all of the detailed information
            and the final log line as the last parameter.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="logLine">The log line.</param>
        </member>
        <member name="M:PublicDomain.Logging.StringLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:PublicDomain.Logging.StringLogger.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:PublicDomain.Logging.SevereLogFilter">
            <summary>
            Always logs severe events, otherwise defers to normal threshold
            conditions.
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.DefaultLogFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.ILogFilter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.ILogFilter.IsLoggable(PublicDomain.Logging.LoggerSeverity,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[])">
            <summary>
            Determines whether the specified severity is loggable.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns>
            	<c>true</c> if the specified severity is loggable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Logging.DefaultLogFilter.IsLoggable(PublicDomain.Logging.LoggerSeverity,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[])">
            <summary>
            Determines whether the specified severity is loggable.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns>
            	<c>true</c> if the specified severity is loggable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Logging.SevereLogFilter.#ctor">
            <summary>
            Always logs severe events, otherwise defers to normal threshold
            conditions. Initializes a new instance of the <see cref="T:PublicDomain.Logging.SevereLogFilter"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.SevereLogFilter.IsLoggable(PublicDomain.Logging.LoggerSeverity,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[])">
            <summary>
            Determines whether the specified severity is loggable.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns>
            	<c>true</c> if the specified severity is loggable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PublicDomain.Logging.LoggerBackgroundThread">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.FinalizableBackgroundThread">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.#ctor(System.Int32,PublicDomain.CallbackBackgroundThread)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.FinalizableBackgroundThread"/> class.
            </summary>
            <param name="intervalMs">The interval in milliseconds.</param>
            <param name="exec">The exec.</param>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.Initialize(System.Int32,PublicDomain.CallbackBackgroundThread)">
            <summary>
            Initializes the specified interval ms.
            </summary>
            <param name="intervalMs">The interval ms.</param>
            <param name="exec"></param>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.HandleExecutionException(System.Exception)">
            <summary>
            Handles the execution exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.Execute(System.Boolean)">
            <summary>
            Executes the specified is final.
            </summary>
            <param name="isFinal">if set to <c>true</c> [is final].</param>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:PublicDomain.FinalizableBackgroundThread"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:PublicDomain.FinalizableBackgroundThread.DoFinalize">
            <summary>
            Does the finalize.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggerBackgroundThread.#ctor(System.Int32,PublicDomain.CallbackBackgroundThread)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LoggerBackgroundThread"/> class.
            </summary>
            <param name="intervalMs">The interval in milliseconds.</param>
            <param name="exec">The exec.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggerBackgroundThread.HandleExecutionException(System.Exception)">
            <summary>
            Handles the execution exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="T:PublicDomain.Xml.LenientHtmlDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientHtmlDocument.DefaultRootHtmlElementName">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientHtmlDocument"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientHtmlDocument"/> class.
            </summary>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.FinishNewElement(System.Xml.XmlElement)">
            <summary>
            Finishes the new element.
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.PrepareEntityName(System.String)">
            <summary>
            Prepares the name of the entity.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.AddNewElementToParent(System.Xml.XmlElement)">
            <summary>
            Adds the new element to parent.
            </summary>
            <param name="el">The el.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlDocument.InternalAppendChild(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Internals the append child.
            </summary>
            <param name="child">The child.</param>
            <param name="mayHaveChildren">if set to <c>true</c> [may have children].</param>
        </member>
        <member name="P:PublicDomain.Xml.LenientHtmlDocument.OuterHtml">
            <summary>
            Gets the outer HTML.
            </summary>
            <value>The outer HTML.</value>
        </member>
        <member name="T:PublicDomain.CsvParser">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CsvParser.DefaultSeparator">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CsvParser.DefaultQuoteEncapsulation">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CsvParser.DefaultQuoteReplacementPrefix">
            <summary>
            \"
            </summary>
        </member>
        <member name="F:PublicDomain.CsvParser.DefaultKeyValueDelimeter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.CsvParser.Deserialize(System.String)">
            <summary>
            Deserializes the specified data. If data is null or an empty
            string, null is returned.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.DeserializeWithOptions(System.String)">
            <summary>
            Deserializes the with options.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.DeserializeWithOptions(System.String,System.Char)">
            <summary>
            Deserializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.DeserializeWithOptions(System.String,System.Char,System.Char)">
            <summary>
            Deserializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.DeserializeWithOptions(System.String,System.Char,System.Char,System.Char)">
            <summary>
            Deserializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <param name="quoteReplacementPrefix">The quote replacement.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.DeserializeWithOptions(System.String,System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Deserializes the with options. If data is null or an empty
            string, null is returned.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <param name="quoteReplacementPrefix">The quote replacement.</param>
            <param name="keyValueDelimeter">The key value delimeter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.Serialize(System.Object[])">
            <summary>
            Serializes the specified data. If there is no data,
            null is returned.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.SerializeWithOptions(System.Object[])">
            <summary>
            Serializes the with options.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.SerializeWithOptions(System.Object[],System.Char)">
            <summary>
            Serializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.SerializeWithOptions(System.Object[],System.Char,System.Char)">
            <summary>
            Serializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.SerializeWithOptions(System.Object[],System.Char,System.Char,System.Char)">
            <summary>
            Serializes the with options.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <param name="quoteReplacementPrefix">The quote replacement.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CsvParser.SerializeWithOptions(System.Object[],System.Char,System.Char,System.Char,System.Char)">
            <summary>
            Serializes the with options. If there is no data,
            null is returned.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="quoteEncapsulation">The quote encapsulation.</param>
            <param name="quoteReplacementPrefix">The quote replacement.</param>
            <param name="keyValueDelimeter">The key value delimeter.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Upc">
            <summary>
            http://www.codeproject.com/KB/graphics/upc_a_barcode.aspx
            </summary>
        </member>
        <member name="F:PublicDomain.Upc.DefaultProductType">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Upc.GetUpcCode(System.Int32)">
            <summary>
            Gets the upc code.
            </summary>
            <param name="manufacturerCode">Maximum 5 digits</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Upc.GetUpcCode(System.Int32,System.Int32)">
            <summary>
            Gets the upc code.
            </summary>
            <param name="manufacturerCode">Maximum 5 digits</param>
            <param name="productCode">Maximum 5 digits</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Upc.GetUpcCode(System.Int32,System.Int32,PublicDomain.UpcProductType)">
            <summary>
            Gets the upc code.
            </summary>
            <param name="manufacturerCode">Maximum 5 digits</param>
            <param name="productCode">Maximum 5 digits</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.UpcProductType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.RegularUpcCodes">
            <summary>
            Regular UPC codes
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.WeightItems">
            <summary>
            Weight items marked at the store
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.NationalDrugHealth">
            <summary>
            National Drug/Health-related code
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.InStoreNonFood">
            <summary>
            No format restrictions, in-store use on non-food items
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.Coupons">
            <summary>
            Coupons
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.Reserved6">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.RegularUpcCodes2">
            <summary>
            Regular UPC codes
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.Reserved8">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PublicDomain.UpcProductType.Reserved9">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:PublicDomain.MathUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetAverage(System.Double[])">
            <summary>
            Gets the average.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetVariance(System.Double[])">
            <summary>
            Gets the variance.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetVariance(System.Double[],System.Double)">
            <summary>
            Gets the variance.
            </summary>
            <param name="data">The data.</param>
            <param name="avg">The avg.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetStandardDeviation(System.Double[])">
            <summary>
            Gets the standard deviation.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetStandardDeviation(System.Double[],System.Double)">
            <summary>
            Gets the standard deviation.
            </summary>
            <param name="data">The data.</param>
            <param name="avg">The avg.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetMedian(System.Double[])">
            <summary>
            Gets the median.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.MathUtilities.GetMedian(System.Double[],System.Boolean)">
            <summary>
            Gets the median.
            </summary>
            <param name="data">The data.</param>
            <param name="isArraySorted">if set to <c>true</c> [is array sorted].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssEnclosure">
            <summary>
            Describes a media object that is attached to the item.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssEnclosure.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssEnclosure.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssEnclosure.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssEnclosure">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssEnclosure.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssEnclosure.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssEnclosure.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:PublicDomain.Feeder.DistilledFeed">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IDistilledFeed">
            <summary>
            Attempts to distill any feed format (RSS, Atom, etc.) into
            a form that can be dealt with more logically. Information IS
            lost in this process, and very few fields can be assumed to
            have any data. Actually, almost none *must* have content.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.FeedUri">
            <summary>
            Gets or sets the feed URI.
            </summary>
            <value>The feed URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.LastChanged">
            <summary>
            Gets or sets the last changed.
            </summary>
            <value>The last changed.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeed.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.FeedUri">
            <summary>
            Gets or sets the feed URI.
            </summary>
            <value>The feed URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.LastChanged">
            <summary>
            Gets or sets the last changed.
            </summary>
            <value>The last changed.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeed.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:PublicDomain.Feeder.AtomFeed">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Feed">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.Feed.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.Feed.FeedUri">
            <summary>
            Gets or sets the feed URI.
            </summary>
            <value>The feed URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Feed.RawContents">
            <summary>
            Gets or sets the raw contents.
            </summary>
            <value>The raw contents.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Feed.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:PublicDomain.Feeder.AtomFeed.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Authors">
            <summary>
            Gets or sets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Links">
            <summary>
            Gets or sets the links.
            </summary>
            <value>The links.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Contributors">
            <summary>
            Gets or sets the contributors.
            </summary>
            <value>The contributors.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
            <value>The icon.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Logo">
            <summary>
            Gets or sets the logo.
            </summary>
            <value>The logo.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Rights">
            <summary>
            Gets or sets the rights.
            </summary>
            <value>The rights.</value>
        </member>
        <member name="P:PublicDomain.Feeder.AtomFeed.Subtitle">
            <summary>
            Gets or sets the subtitle.
            </summary>
            <value>The subtitle.</value>
        </member>
        <member name="T:PublicDomain.Code.CodeUtilities">
            <summary>
            Methods for working with code and languages.
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeUtilities.DefaultNamespace">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeUtilities.DefaultClassName">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.StripNonFileNameCharacters(System.String,PublicDomain.Code.Language)">
            <summary>
            Strips the non file name characters.
            </summary>
            <param name="str">The STR.</param>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.StripNonIdentifierCharacters(PublicDomain.Code.Language,System.String)">
            <summary>
            
            </summary>
            <param name="lang"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.EvalSnippet(PublicDomain.Code.Language,System.String)">
            <summary>
            Evals the snippet.
            </summary>
            <param name="language">The language.</param>
            <param name="simpleCode">The simple code.</param>
            <returns></returns>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.Eval(PublicDomain.Code.Language,System.String,System.String[])">
            <summary>
            Runs a snippet of code.
            </summary>
            <param name="language">The language.</param>
            <param name="code">The code.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.Eval(PublicDomain.Code.Language,System.String,System.Boolean,System.String[])">
            <summary>
            Evals the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="code">The code.</param>
            <param name="isSnippet">if set to <c>true</c> [is snippet].</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.Compile(PublicDomain.Code.Language,System.String)">
            <summary>
            Compiles the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="code">The code.</param>
            <returns></returns>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.Compile(PublicDomain.Code.Language,System.String,System.Boolean,System.Boolean)">
            <summary>
            Compiles the specified language.
            </summary>
            <param name="language">The language.</param>
            <param name="code">The code.</param>
            <param name="isSnippet">if set to <c>true</c> then <paramref name="code"/> will be placed into
            templated "application code", such as a static void main.</param>
            <param name="throwExceptionOnCompileError">if set to <c>true</c> [throw exception on compile error].</param>
            <returns></returns>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.PrepareCompilerParameters(PublicDomain.Code.Language,System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Prepares the compiler parameters.
            </summary>
            <param name="language">The language.</param>
            <param name="compilerParameters">The compiler parameters.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetSupportedLanguages">
            <summary>
            Gets the supported languages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetCodeRunner(PublicDomain.Code.Language)">
            <summary>
            Gets the code runner.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetDefaultMainMethodName(PublicDomain.Code.Language)">
            <summary>
            Gets the name of the default main method.
            </summary>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetApplicationTemplateCode(PublicDomain.Code.Language)">
            <summary>
            Gets the application template code.
            Parameters:
            0: Code
            1: Class Name
            2: Namespace
            </summary>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetSnippetCode(PublicDomain.Code.Language,System.String)">
            <summary>
            Gets the snippet code.
            </summary>
            <param name="lang">The lang.</param>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetSnippetTemplateCode(PublicDomain.Code.Language)">
            <summary>
            Gets the snippet template code.
            </summary>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetApplicationCode(PublicDomain.Code.Language,System.String[])">
            <summary>
            Gets the application code.
            Parameters:
            0: Code
            1: Class Name
            2: Namespace
            </summary>
            <param name="lang">The lang.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.CheckCompilerResultsThrow(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            This method throws an Exception if it finds an error in the
            <c>results</c>, otherwise it returns without side effect.
            </summary>
            <param name="results">The results.</param>
            <exception cref="T:PublicDomain.Code.CodeUtilities.CompileException"/>
            <exception cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetCompilerErrorsAsString(System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            Gets the compiler errors as string.
            </summary>
            <param name="errors">The errors.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageDisplayName(PublicDomain.Code.Language)">
            <summary>
            Gets the name of the language display.
            </summary>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageDisplayName(PublicDomain.Code.Language,System.Boolean)">
            <summary>
            Gets the display name of the language.
            </summary>
            <param name="lang">The language.</param>
            <param name="appendIfDotNetEmulation">if set to <c>true</c> [append if dot net emulation].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageByName(System.String)">
            <summary>
            Gets the name of the language by.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageByName(System.String,System.Boolean)">
            <summary>
            Gets a <seealso cref="T:PublicDomain.Code.Language"/> given a string name.
            </summary>
            <param name="name">The name.</param>
            <param name="assumeDotNet">if set to <c>true</c> [assume dot net].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageByUri(System.String)">
            <summary>
            Gets the language by URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetLanguageUri(PublicDomain.Code.Language)">
            <summary>
            Gets the language URI.
            </summary>
            <param name="lang">The lang.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.GetPrimaryLanguageFileExtension(PublicDomain.Code.Language)">
            <summary>
            Gets the primary language file extension. This does not begin with a period.
            </summary>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Code.CodeUtilities.CompileException">
            <summary>
            Thrown when an error is encountered compiling.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.CompileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.CompileException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.CompileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.CompileException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.CompileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.CompileException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.CompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.CompileException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.Code.CodeUtilities.NativeCompileException">
            <summary>
            Thrown when the compiler returns an unexpected value.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.NativeCompileException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.NativeCompileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.NativeCompileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeUtilities.NativeCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeUtilities.NativeCompileException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.Data.IDatabaseConnectionProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.GetConnection">
            <summary>
            Gets a database connection which is opened and there
            is no explicit cache bypassing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.GetConnection(System.Boolean)">
            <summary>
            Gets a database connection. There is no explicit cache bypassing.
            </summary>
            <param name="open">if set to <c>true</c> [open].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.GetConnection(System.Boolean,System.Boolean)">
            <summary>
            Gets a database connection.
            </summary>
            <param name="open">if set to <c>true</c> [open].</param>
            <param name="bypassCache">if set to <c>true</c> [bypass cache].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.RemoveConnectionStringParameter(PublicDomain.Data.ConnectionParameterName)">
            <summary>
            Removes the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.RemoveConnectionStringParameter(System.String)">
            <summary>
            Removes the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.HasConnectionStringParameter(PublicDomain.Data.ConnectionParameterName)">
            <summary>
            Determines whether [has connection string parameter] [the specified parameter name].
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if [has connection string parameter] [the specified parameter name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.HasConnectionStringParameter(System.String)">
            <summary>
            Determines whether [has connection string parameter] [the specified parameter name].
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if [has connection string parameter] [the specified parameter name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.AddConnectionStringParameter(PublicDomain.Data.ConnectionParameterName,System.String)">
            <summary>
            Adds the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.AddConnectionStringParameter(System.String,System.String)">
            <summary>
            Adds the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.SetConnectionStringParameter(PublicDomain.Data.ConnectionParameterName,System.String)">
            <summary>
            Sets the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.IDatabaseConnectionProvider.SetConnectionStringParameter(System.String,System.String)">
            <summary>
            Sets the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="P:PublicDomain.Data.IDatabaseConnectionProvider.DatabaseType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:PublicDomain.Data.IDatabaseConnectionProvider.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PublicDomain.Data.IDatabaseConnectionProvider.DbProviderFactory">
            <summary>
            Gets or sets the db provider factory.
            </summary>
            <value>The db provider factory.</value>
        </member>
        <member name="T:PublicDomain.Data.DatabaseConnectionProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DatabaseConnectionProvider"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DatabaseConnectionProvider"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="dbProviderFactory">The db provider factory.</param>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.GetConnection">
            <summary>
            Gets a database connection which is unopened and there
            is no explicit cache bypassing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.GetConnection(System.Boolean)">
            <summary>
            Gets a database connection. There is no explicit cache bypassing.
            </summary>
            <param name="open">if set to <c>true</c> [open].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.GetConnection(System.Boolean,System.Boolean)">
            <summary>
            Gets a database connection.
            </summary>
            <param name="open">if set to <c>true</c> [open].</param>
            <param name="bypassCache">if set to <c>true</c> [bypass cache].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.RemoveConnectionStringParameter(PublicDomain.Data.ConnectionParameterName)">
            <summary>
            Removes the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.RemoveConnectionStringParameter(System.String)">
            <summary>
            Removes the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.HasConnectionStringParameter(System.String)">
            <summary>
            Determines whether [has connection string parameter] [the specified parameter name].
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if [has connection string parameter] [the specified parameter name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.HasConnectionStringParameter(PublicDomain.Data.ConnectionParameterName)">
            <summary>
            Determines whether [has connection string parameter] [the specified parameter name].
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>
            	<c>true</c> if [has connection string parameter] [the specified parameter name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.AddConnectionStringParameter(PublicDomain.Data.ConnectionParameterName,System.String)">
            <summary>
            Adds the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.AddConnectionStringParameter(System.String,System.String)">
            <summary>
            Adds the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.SetConnectionStringParameter(PublicDomain.Data.ConnectionParameterName,System.String)">
            <summary>
            Sets the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="M:PublicDomain.Data.DatabaseConnectionProvider.SetConnectionStringParameter(System.String,System.String)">
            <summary>
            Sets the connection string parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
        </member>
        <member name="P:PublicDomain.Data.DatabaseConnectionProvider.DatabaseType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="P:PublicDomain.Data.DatabaseConnectionProvider.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:PublicDomain.Data.DatabaseConnectionProvider.DbProviderFactory">
            <summary>
            Gets or sets the db provider factory.
            </summary>
            <value>The db provider factory.</value>
        </member>
        <member name="T:PublicDomain.CultureConstants">
            <summary>
            Windows culture constants such as LCIDs and culture names.
            See: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfsystemglobalizationcultureinfoclasstopic.asp
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureInvariant">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureInvariantIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAfrikaans">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAfrikaansIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAfrikaansSouthAfrica">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAfrikaansSouthAfricaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAlbanian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAlbanianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAlbanianAlbania">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAlbanianAlbaniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArabic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArabicIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArabicAlgeria">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArabicAlgeriaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicBahrain">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicBahrainIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicEgypt">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicEgyptIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicIraq">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicIraqIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicJordan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicJordanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicKuwait">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicKuwaitIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicLebanon">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicLebanonIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicLibya">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicLibyaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicMorocco">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicMoroccoIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicOman">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicOmanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicQatar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicQatarIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicSaudiArabia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicSaudiArabiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicSyria">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicSyriaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicTunisia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicTunisiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicUnitedArabEmirates">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicUnitedArabEmiratesIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicYemen">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArabicYemenIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArmenian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralArmenianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArmenianArmenia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificArmenianArmeniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAzeri">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralAzeriIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAzeriCyrillicAzerbaijan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAzeriCyrillicAzerbaijanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAzeriLatinAzerbaijan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificAzeriLatinAzerbaijanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBasque">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBasqueIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBasqueBasque">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBasqueBasqueIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBelarusian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBelarusianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBelarusianBelarus">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBelarusianBelarusIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBulgarian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralBulgarianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBulgarianBulgaria">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificBulgarianBulgariaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCatalan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCatalanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCatalanCatalan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCatalanCatalanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseHongKongSar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseHongKongSarIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseMacaoSar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseMacaoSarIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseChina">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseChinaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseSimplified">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseSimplifiedIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseSingapore">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseSingaporeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseTaiwan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseTaiwanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseTraditional">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificChineseTraditionalIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCroatian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCroatianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCroatianCroatia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCroatianCroatiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCzech">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralCzechIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCzechCzechRepublic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificCzechCzechRepublicIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDanish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDanishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDanishDenmark">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDanishDenmarkIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDhivehi">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDhivehiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDhivehiMaldives">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDhivehiMaldivesIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDutch">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralDutchIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDutchBelgium">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDutchBelgiumIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDutchTheNetherlands">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificDutchTheNetherlandsIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralEnglish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralEnglishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishAustralia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishAustraliaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishBelize">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishBelizeIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishCanada">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishCanadaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishCaribbean">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishCaribbeanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishIreland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishIrelandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishJamaica">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishJamaicaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishNewZealand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishNewZealandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishPhilippines">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishPhilippinesIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishSouthAfrica">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishSouthAfricaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishTrinidadAndTobago">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishTrinidadAndTobagoIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishUnitedKingdom">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishUnitedKingdomIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishUnitedStates">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishUnitedStatesIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishZimbabwe">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEnglishZimbabweIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralEstonian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralEstonianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEstonianEstonia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificEstonianEstoniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFaroese">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFaroeseIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFaroeseFaroeIslands">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFaroeseFaroeIslandsIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFarsi">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFarsiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFarsiIran">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFarsiIranIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFinnish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFinnishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFinnishFinland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFinnishFinlandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFrench">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralFrenchIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchBelgium">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchBelgiumIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchCanada">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchCanadaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchFrance">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchFranceIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchLuxembourg">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchLuxembourgIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchMonaco">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchMonacoIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchSwitzerland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificFrenchSwitzerlandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGalician">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGalicianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGalicianGalician">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGalicianGalicianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGeorgian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGeorgianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGeorgianGeorgia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGeorgianGeorgiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGerman">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGermanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanAustria">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanAustriaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanGermany">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanGermanyIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanLiechtenstein">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanLiechtensteinIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanLuxembourg">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanLuxembourgIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanSwitzerland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGermanSwitzerlandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGreek">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGreekIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGreekGreece">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGreekGreeceIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGujarati">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralGujaratiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGujaratiIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificGujaratiIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHebrew">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHebrewIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHebrewIsrael">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHebrewIsraelIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHindi">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHindiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHindiIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHindiIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHungarian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralHungarianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHungarianHungary">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificHungarianHungaryIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralIcelandic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralIcelandicIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificIcelandicIceland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificIcelandicIcelandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralIndonesian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralIndonesianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificIndonesianIndonesia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificIndonesianIndonesiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralItalian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralItalianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificItalianItaly">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificItalianItalyIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificItalianSwitzerland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificItalianSwitzerlandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralJapanese">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralJapaneseIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificJapaneseJapan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificJapaneseJapanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKannada">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKannadaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKannadaIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKannadaIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKazakh">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKazakhIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKazakhKazakhstan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKazakhKazakhstanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKonkani">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKonkaniIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKonkaniIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKonkaniIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKorean">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKoreanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKoreanKorea">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKoreanKoreaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKyrgyz">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralKyrgyzIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKyrgyzKyrgyzstan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificKyrgyzKyrgyzstanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralLatvian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralLatvianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificLatvianLatvia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificLatvianLatviaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralLithuanian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralLithuanianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificLithuanianLithuania">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificLithuanianLithuaniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMacedonian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMacedonianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMacedonianFormerYugoslavRepublicOfMacedonia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMacedonianFormerYugoslavRepublicOfMacedoniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMalay">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMalayIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMalayBrunei">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMalayBruneiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMalayMalaysia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMalayMalaysiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMarathi">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMarathiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMarathiIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMarathiIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMongolian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralMongolianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMongolianMongolia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificMongolianMongoliaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralNorwegian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralNorwegianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificNorwegianBokmlNorway">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificNorwegianBokmlNorwayIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificNorwegianNynorskNorway">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificNorwegianNynorskNorwayIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPolish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPolishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPolishPoland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPolishPolandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPortuguese">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPortugueseIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPortugueseBrazil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPortugueseBrazilIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPortuguesePortugal">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPortuguesePortugalIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPunjabi">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralPunjabiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPunjabiIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificPunjabiIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralRomanian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralRomanianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificRomanianRomania">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificRomanianRomaniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralRussian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralRussianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificRussianRussia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificRussianRussiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSanskrit">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSanskritIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSanskritIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSanskritIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSerbianCyrrilicSerbia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSerbianCyrrilicSerbiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSerbianLatinSerbia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSerbianLatinSerbiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSlovak">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSLOVAKIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSlovakSlovakia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSlovakSlovakiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSlovenian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSlovenianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSlovenianSlovenia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSlovenianSloveniaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSpanish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSPANISHIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishArgentina">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishArgentinaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishBolivia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishBoliviaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishChile">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishChileIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishColombia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishColombiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishCostaRica">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishCostaRicaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishDominicanRepublic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishDominicanRepublicIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishEcuador">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishEcuadorIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishElSalvador">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishElSalvadorIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishGuatemala">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishGuatemalaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishHonduras">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishHondurasIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishMexico">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishMexicoIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishNicaragua">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishNicaraguaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPanama">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPanamaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishParaguay">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishParaguayIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPeru">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPeruIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPuertoRico">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishPuertoRicoIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishSpain">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishSpainIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishUruguay">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishUruguayIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishVenezuela">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSpanishVenezuelaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSwahili">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSwahiliIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwahiliKenya">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwahiliKenyaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSwedish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSwedishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwedishFinland">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwedishFinlandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwedishSweden">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSwedishSwedenIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSyriac">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralSyriacIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSyriacSyria">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificSyriacSyriaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTamil">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTamilIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTamilIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTamilIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTatar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTatarIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTatarRussia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTatarRussiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTelugu">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTeluguIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTeluguIndia">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTeluguIndiaIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralThai">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralThaiIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificThaiThailand">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificThaiThailandIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTurkish">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralTurkishIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTurkishTurkey">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificTurkishTurkeyIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUkrainian">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUkrainianIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUkrainianUkraine">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUkrainianUkraineIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUrdu">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUrduIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUrduPakistan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUrduPakistanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUzbek">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralUzbekIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUzbekCyrillicUzbekistan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUzbekCyrillicUzbekistanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUzbekLatinUzbekistan">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificUzbekLatinUzbekistanIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralVietnamese">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureNeutralVietnameseIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificVietnameseVietnam">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CultureConstants.CultureSpecificVietnameseVietnamIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.CultureConstants.CreateClass">
            <summary>
            Used for parsing MSDN output into C# code.
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptExceptionStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptDecimalLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptCharacterLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.RssFeed">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IRssFeed">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Title">
            <summary>
            Required.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Description">
            <summary>
            Required.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.ManagingEditor">
            <summary>
            Gets or sets the managing editor.
            </summary>
            <value>The managing editor.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.WebMaster">
            <summary>
            Gets or sets the web master.
            </summary>
            <value>The web master.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.LastChanged">
            <summary>
            Gets or sets the last changed.
            </summary>
            <value>The last changed.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Doc">
            <summary>
            Gets or sets the doc.
            </summary>
            <value>The doc.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Cloud">
            <summary>
            Gets or sets the cloud.
            </summary>
            <value>The cloud.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.TextInput">
            <summary>
            Gets or sets the text input.
            </summary>
            <value>The text input.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.SkipHours">
            <summary>
            Gets or sets the skip hours.
            </summary>
            <value>The skip hours.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.SkipDays">
            <summary>
            Gets or sets the skip days.
            </summary>
            <value>The skip days.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeed.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="M:PublicDomain.Feeder.RssFeed.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Title">
            <summary>
            Required.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Description">
            <summary>
            Required.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.ManagingEditor">
            <summary>
            Gets or sets the managing editor.
            </summary>
            <value>The managing editor.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.WebMaster">
            <summary>
            Gets or sets the web master.
            </summary>
            <value>The web master.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Generator">
            <summary>
            Gets or sets the generator.
            </summary>
            <value>The generator.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.LastChanged">
            <summary>
            Gets or sets the last changed.
            </summary>
            <value>The last changed.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Doc">
            <summary>
            Gets or sets the doc.
            </summary>
            <value>The doc.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.TimeToLive">
            <summary>
            Gets or sets the time to live.
            </summary>
            <value>The time to live.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Cloud">
            <summary>
            Gets or sets the cloud.
            </summary>
            <value>The cloud.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.TextInput">
            <summary>
            Gets or sets the text input.
            </summary>
            <value>The text input.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.SkipHours">
            <summary>
            Gets or sets the skip hours.
            </summary>
            <value>The skip hours.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.SkipDays">
            <summary>
            Gets or sets the skip days.
            </summary>
            <value>The skip days.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeed.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:PublicDomain.Exceptions.TODONotImplementedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Exceptions.TODONotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.TODONotImplementedException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Exceptions.TODONotImplementedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.TODONotImplementedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.Exceptions.TODONotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.TODONotImplementedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.Exceptions.TODONotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.TODONotImplementedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.CountableFile">
            <summary>
            Represents a file that is countable
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.CountableFile"/> class.
            </summary>
            <param name="fileLocation">The file location.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableFile.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.CountableFile"/> class.
            </summary>
            <param name="fileInfo">The file info.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableFile.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableFile.IsCountable(System.String@)">
            <summary>
            Determines whether the specified line is countable.
            </summary>
            <param name="line">The line.</param>
            <returns>
            	<c>true</c> if the specified line is countable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableFile.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableFile.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableFile.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptForStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.OutputFile">
            <summary>
            Location for the generated HTML output.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.Context">
            <summary>
            Context parameters that can be read back in the page from the Context object.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.PostData">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.PostContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.AppDomain">
            <summary>
            Reference to the AppDomain to allow unloading the hosted application.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.PhysicalDirectory">
            <summary>
            Name of the Physical Directory assigned with Start(). Not used internally, only exposed for
            external apps to retrieve.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.VirtualPath">
            <summary>
            Name of the virtual directory assigned to the application with Start.Not used internally, only exposed for
            external apps to retrieve.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.ErrorMessage">
            <summary>
            An error message if bError is set. Only works for the ProcessRequest method
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.IdleTimeoutMinutes">
            <summary>
            The timeout for the ASP.Net runtime after which it is automatically unloaded when idle
            to release resources. Note this can't be externally set because the lease is set 
            during object construction. All you can do is change this property value here statically
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.ResponseHeaders">
            <summary>
            A hashtable that contains all the HTPP Headers the server sent in header / value pair
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.RequestHeaders">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.ResponseStatusCode">
            <summary>
            the Response status code the server sent. 200 on success, 500 on error, 404 for redirect etc.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.Cookies">
            <summary>
            Collection of cookies set by the request.
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.ProcessRequest(System.String,System.String)">
            <summary>
            Processes script execution on the specified page.
            </summary>
            <param name="Page">A page filename relative to the Virtual directory. Use subdir\sub2\test.aspx style syntax for subdirs. (note forward slash!)</param>
            <param name="QueryString">Optional - query string in key value pair format. Pass null for non.</param>
            <returns>true or false. False returns only if a real failure occurs - most page errors will result in an HTTP error page.</returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.ProcessRequestToString(System.String,System.String)">
            <summary>
            Processes a script and returns the result as a string.
            </summary>
            <param name="Page">Name of the page to return</param>
            <param name="QueryString">Optional query string</param>
            <returns>script result or null on failure. Script errors are returned as errors in the script result string.</returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.CreateApplicationHost(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of this class in the ASP.NET AppDomain
            </summary>
            <param name="hostType">Type of the application to be hosted. Essentially this class.</param>
            <param name="virtualDir">Name of the Virtual Directory that hosts this application. Not really used, other than on error messages and ASP Server Variable return values.</param>
            <param name="physicalDir">The physical location of the Virtual Directory for the application</param>
            <param name="PrivateBinPath">The private bin path.</param>
            <param name="ConfigurationFile">Location of the configuration file. Default to web.config in the bin directory.</param>
            <returns>
            object instance to the wwAspRuntimeProxy class you can call ProcessRequest on. Note this instance returned
            is a remoting proxy
            </returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.CaptureAppDomain">
            <summary>
            Internal method that captures the Proxy's AppDomain so we can shut
            the ASP.NET runtime down externally.
            Also serves as an
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.Start(System.String,System.String,System.String,System.String)">
            <summary>
            Starts the Runtime host by creating an AppDomain and loading the runtime into it
            </summary>
            <param name="PhysicalPath">The physical disk path for the 'Web' directory where files are executed</param>
            <param name="VirtualPath">The name of the virtual path. Typically this will be "/" or the root path.</param>
            <param name="PrivateBinPath">The private bin path.</param>
            <param name="ConfigFile">The config file.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.Stop(PublicDomain.AspRuntimeHost.wwAspRuntimeProxy)">
            <summary>
            Unloads the runtime host by unloading the AppDomain. Use this to free memory if you are compiling lots of pages or recycle the host.
            </summary>
            <param name="Host">The host.</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.UnloadRuntime">
            <summary>
            Method used to shut down the ASP.NET AppDomain from within
            the AppDomain. 
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeProxy.InitializeLifetimeService">
            <summary>
            Overrides the default Lease setting to allow the runtime to not
            expire after 5 minutes. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Web.WebUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Web.WebUtilities.RenderControlToString(System.Web.UI.Control)">
            <summary>
            Calls the render method of all the Controls in a control tree,
            but instead of rendering to the response stream, we render to an
            in-memory string stream and then return that.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Web.WebUtilities.GetEnumAsHtmlSelectOptions(System.Type,System.String)">
            <summary>
            Gets the enum as HTML select options.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="selectedValue">The selected value.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.ObjectUtilities">
            <summary>
            Methods to work with generic objects, such as serializing and deserializing
            them to byte arrays or memory streams.
            </summary>
        </member>
        <member name="M:PublicDomain.ObjectUtilities.SerializeObjectToBinaryStream(System.Object)">
            <summary>
            Serializes the object to binary stream.
            </summary>
            <param name="o">The o.</param>
            <returns>A closed MemoryStream</returns>
        </member>
        <member name="M:PublicDomain.ObjectUtilities.SerializeObjectToBinary(System.Object)">
            <summary>
            Serializes the object to binary.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ObjectUtilities.DeserializeObjectFromBinary``1(System.Byte[])">
            <summary>
            Deserializes the object from binary.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ObjectUtilities.Sort``1(``0,``0,``0@,``0@)">
            <summary>
            Sorts the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="T:PublicDomain.ManagementUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ManagementUtilities.GetTotalPhysicalMemory">
            <summary>
            Gets the total physical memory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Iso6709">
            <summary>
            Represents a latitude and longitude.
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LatitudeDegrees">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LatitudeMinutes">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LatitudeSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.IsLatitudeNorth">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LongitudeDegrees">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LongitudeMinutes">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.LongitudeSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.IsLongitudeEast">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.Iso6709Form1">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Iso6709.Iso6709Form2">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Iso6709.Parse(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Iso6709.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:PublicDomain.DateTimeUtlities">
            <summary>
            Methods to help in date and time manipulation.
            </summary>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ParseMonth(System.String)">
            <summary>
            Parses the month.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ParseDayOfWeek(System.String)">
            <summary>
            Parses the day of week.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.CloneDateTimeAsUTC(System.DateTime)">
            <summary>
            Clones the date time as UTC.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.AbsTimeSpan(System.TimeSpan)">
            <summary>
            Returns the absolute value of the specified TimeSpan.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.GetLastDay(System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Gets the last day.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="dayOfWeek">The day of week.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.IsTimeSpanNegative(System.TimeSpan)">
            <summary>
            Determines whether [is time span negative] [the specified time span].
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>
            	<c>true</c> if [is time span negative] [the specified time span]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ConvertTimeSpanToDouble(System.String)">
            <summary>
            Converts the time span to double.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ConvertTimeSpanToDouble(System.TimeSpan)">
            <summary>
            Converts the time span to integer.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.TryParseTimeSpan(System.String,System.TimeSpan@)">
            <summary>
            Tries the parse time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.TryParseTimeSpan(System.String,PublicDomain.DateTimeUtlities.TimeSpanAssumption,System.TimeSpan@)">
            <summary>
            Parses the time span. TimeSpan.Parse does not accept
            a plus (+) designator, only minus (-). This parse method
            accepts both. Does not throw any exceptions, but returns
            false on failure. Return true on success.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="noColonAssumption">The no colon assumption.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ParseTimeSpan(System.String)">
            <summary>
            Parses the time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ParseTimeSpan(System.String,PublicDomain.DateTimeUtlities.TimeSpanAssumption)">
            <summary>
            Parses the time span. TimeSpan.Parse does not accept
            a plus (+) designator, only minus (-). This parse method
            accepts both.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="noColonAssumption">The no colon assumption.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ToStringTimeSpan(System.TimeSpan)">
            <summary>
            Returns the value of the TimeSpan as a string, and ensures
            that there is a leading character specifying either whether
            it is positive or negative.
            </summary>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.ToStringTimeSpan(System.Nullable{System.TimeSpan})">
            <summary>
            Returns the value of the TimeSpan as a string, and ensures
            that there is a leading character specifying either whether
            it is positive or negative.
            </summary>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.TrimTimeSpan(System.String)">
            <summary>
            Trims the time span.
            </summary>
            <param name="span">The span.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.TrimTimeSpan(System.String,System.Boolean)">
            <summary>
            Trims the time span.
            </summary>
            <param name="span">The span.</param>
            <param name="trimZeroMinutes">if set to <c>true</c> [trim zero minutes].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.DateTimeUtlities.DateException">
            <summary>
            Thrown when there is an error relating to dates.
            </summary>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.DateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DateTimeUtlities.DateException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.DateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DateTimeUtlities.DateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.DateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DateTimeUtlities.DateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.DateTimeUtlities.DateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DateTimeUtlities.DateException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.DateTimeUtlities.TimeSpanAssumption">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DateTimeUtlities.TimeSpanAssumption.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DateTimeUtlities.TimeSpanAssumption.Days">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DateTimeUtlities.TimeSpanAssumption.Hours">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DateTimeUtlities.TimeSpanAssumption.Minutes">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DateTimeUtlities.TimeSpanAssumption.Seconds">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.LoggerSeverity">
            <summary>
            Severity of the log entry. The numeric value of the severity
            is in the name itself for immediate feedback.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.None0">
            <summary>
            Lowest severity.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Debug10">
            <summary>
            Detailed programmatic informational messages used
            as an aid in troubleshooting problems by programmers.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Info20">
            <summary>
            Brief informative messages to use as an aid in
            troubleshooting problems by production support and programmers.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Warn30">
            <summary>
            Messages intended to notify help desk, production support and programmers
            of possible issues with respect to the running application.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Error40">
            <summary>
            Messages that detail a programmatic error, these are typically messages
            intended for help desk, production support, programmers and occasionally users.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Fatal50">
            <summary>
            Severe messages that are programmatic violations that will usually
            result in application failure. These messages are intended for help
            desk, production support, programmers and possibly users.
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggerSeverity.Infinity">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Xml.LenientHtmlToTextDocument">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientHtmlToTextDocument.DefaultTextRootElementName">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.LenientHtmlToTextDocument.DefaultHtmlNewline">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlToTextDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientHtmlToTextDocument"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlToTextDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.LenientHtmlToTextDocument"/> class.
            </summary>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlToTextDocument.ContextSwitch(PublicDomain.Xml.LenientXmlDocument.State)">
            <summary>
            Contexts the switch.
            </summary>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:PublicDomain.Xml.LenientHtmlToTextDocument.ConvertEntityToValue(System.String)">
            <summary>
            Converts the entity to value.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Xml.LenientHtmlToTextDocument.HtmlNewline">
            <summary>
            Gets or sets the HTML newline.
            </summary>
            <value>The HTML newline.</value>
        </member>
        <member name="T:PublicDomain.Xml.HtmlDocumentWriter">
            <summary>
            Can be used with:
            new HtmlDocumentWriter(XmlWriter.Create(..., ...))
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.HtmlDocumentWriter.EmptyElements">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.HtmlDocumentWriter.m_current">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Xml.HtmlDocumentWriter.m_baseWriter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.HtmlDocumentWriter"/> class.
            </summary>
            <param name="baseWriter">The base writer.</param>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the corresponding namespace scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">This results in an invalid XML document. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.
            </summary>
            <param name="prefix">The namespace prefix of the element.</param>
            <param name="localName">The local name of the element.</param>
            <param name="ns">The namespace URI to associate with the element.</param>
            <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.Close">
            <summary>
            When overridden in a derived class, closes this stream and the underlying stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">A call is made to write more output after Close has been called or the result of this call is an invalid XML document. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.Flush">
            <summary>
            When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.LookupPrefix(System.String)">
            <summary>
            When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.
            </summary>
            <param name="ns">The namespace URI whose prefix you want to find.</param>
            <returns>
            The matching prefix or null if no matching namespace URI is found in the current scope.
            </returns>
            <exception cref="T:System.ArgumentException">ns is either null or String.Empty. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.
            </summary>
            <param name="buffer">Byte array to encode.</param>
            <param name="index">The position in the buffer indicating the start of the bytes to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus index is less than count. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteCData(System.String)">
            <summary>
            When overridden in a derived class, writes out a &lt;![CDATA[...]]&gt; block containing the specified text.
            </summary>
            <param name="text">The text to place inside the CDATA block.</param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteCharEntity(System.Char)">
            <summary>
            When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.
            </summary>
            <param name="ch">The Unicode character for which to generate a character entity.</param>
            <exception cref="T:System.ArgumentException">The character is in the surrogate pair character range, 0xd800 - 0xdfff. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes text one buffer at a time.
            </summary>
            <param name="buffer">Character array containing the text to write.</param>
            <param name="index">The position in the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. -or-The buffer length minus index is less than count; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteComment(System.String)">
            <summary>
            When overridden in a derived class, writes out a comment &lt;!--...--&gt; containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.
            </summary>
            <param name="name">The name of the DOCTYPE. This must be non-empty.</param>
            <param name="pubid">If non-null it also writes PUBLIC "pubid" "sysid" where pubid and sysid are replaced with the value of the given arguments.</param>
            <param name="sysid">If pubid is null and sysid is non-null it writes SYSTEM "sysid" where sysid is replaced with the value of this argument.</param>
            <param name="subset">If non-null it writes [subset] where subset is replaced with the value of this argument.</param>
            <exception cref="T:System.ArgumentException">The value for name would result in invalid XML. </exception>
            <exception cref="T:System.InvalidOperationException">This method was called outside the prolog (after the root element). </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteEndAttribute">
            <summary>
            When overridden in a derived class, closes the previous <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)"></see> call.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteEndDocument">
            <summary>
            When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.
            </summary>
            <exception cref="T:System.ArgumentException">The XML document is invalid. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteEntityRef(System.String)">
            <summary>
            When overridden in a derived class, writes out an entity reference as &amp;name;.
            </summary>
            <param name="name">The name of the entity reference.</param>
            <exception cref="T:System.ArgumentException">name is either null or String.Empty. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteFullEndElement">
            <summary>
            When overridden in a derived class, closes one element and pops the corresponding namespace scope.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.
            </summary>
            <param name="name">The name of the processing instruction.</param>
            <param name="text">The text to include in the processing instruction.</param>
            <exception cref="T:System.ArgumentException">The text would result in a non-well formed XML document.name is either null or String.Empty.This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlWriter.WriteStartDocument"></see> has already been called. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteRaw(System.String)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a string.
            </summary>
            <param name="data">String containing the text to write.</param>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes raw markup manually from a character buffer.
            </summary>
            <param name="buffer">Character array containing the text to write.</param>
            <param name="index">The position within the buffer indicating the start of the text to write.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index or count is less than zero. -or-The buffer length minus index is less than count.</exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.
            </summary>
            <param name="prefix">The namespace prefix of the attribute.</param>
            <param name="localName">The local name of the attribute.</param>
            <param name="ns">The namespace URI for the attribute.</param>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteStartDocument(System.Boolean)">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0" and the standalone attribute.
            </summary>
            <param name="standalone">If true, it writes "standalone=yes"; if false, it writes "standalone=no".</param>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteStartDocument">
            <summary>
            When overridden in a derived class, writes the XML declaration with the version "1.0".
            </summary>
            <exception cref="T:System.InvalidOperationException">This is not the first write method called after the constructor. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteString(System.String)">
            <summary>
            When overridden in a derived class, writes the given text content.
            </summary>
            <param name="text">The text to write.</param>
            <exception cref="T:System.ArgumentException">The text string contains an invalid surrogate pair. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.
            </summary>
            <param name="lowChar">The low surrogate. This must be a value between 0xDC00 and 0xDFFF.</param>
            <param name="highChar">The high surrogate. This must be a value between 0xD800 and 0xDBFF.</param>
            <exception cref="T:System.Exception">An invalid surrogate character pair was passed. </exception>
        </member>
        <member name="M:PublicDomain.Xml.HtmlDocumentWriter.WriteWhitespace(System.String)">
            <summary>
            When overridden in a derived class, writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <exception cref="T:System.ArgumentException">The string contains non-white space characters. </exception>
        </member>
        <member name="P:PublicDomain.Xml.HtmlDocumentWriter.WriteState">
            <summary>
            When overridden in a derived class, gets the state of the writer.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Xml.WriteState"></see> values.</returns>
        </member>
        <member name="T:PublicDomain.Web.RTESupport">
            <summary>
            Rich text editor support level
            </summary>
        </member>
        <member name="F:PublicDomain.Web.RTESupport.None">
            <summary>
            Unknown whether or how this clients supports an RTE
            </summary>
        </member>
        <member name="F:PublicDomain.Web.RTESupport.ContentEditable">
            <summary>
            Logically equivalent to Internet Explorer and those
            that supports IE's model
            </summary>
        </member>
        <member name="F:PublicDomain.Web.RTESupport.IFrameExec">
            <summary>
            Logically equivalent to Firefox and those that
            support its model
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IOpmlFeed">
            <summary>
            Represents an OPML feed. http://www.opml.org/spec
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IOpmlFeed.Head">
            <summary>
            Gets or sets the head.
            </summary>
            <value>The head.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IOpmlFeed.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="T:PublicDomain.Data.IDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteNonQuery(System.String)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteNonQuery(System.String,System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteQueryReader(System.String)">
            <summary>
            Executes the query reader.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteQueryReader(System.String,System.Data.IDbConnection)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.SetSelectCommand(System.Data.Common.DbDataAdapter,System.String,System.Data.IDbConnection)">
            <summary>
            Sets the select command.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="sql">The SQL.</param>
            <param name="openConnection">The open connection.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt16(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the int16.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the value as an Int32. <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the int32.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the value as an Int64. <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetInt64(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the int64.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the decimal. <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the decimal.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetBool(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            0-based column index
            </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetBool(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetString(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            0-based column index
            </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetEnum``1(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            0-based column index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetEnum``1(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetUtcDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            0-based column index.
            If the caller knows that the date time stored in the database
            was stored in UTC format, then this will return the exact date time
            (without conversion from local to UTC), and set it's Kind property to
            UTC. The value taken from the database is not modified.
            </summary>
            <param name="reader"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetUtcDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            If the caller knows that the date time stored in the database
            was stored in UTC format, then this will return the exact date time
            (without conversion from local to UTC), and set it's Kind property to
            UTC. The value taken from the database is not modified.
            </summary>
            <param name="reader"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.DoesTableExist(System.String,System.Data.IDbConnection)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetNewMaxKeyInt32(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetNewMaxKeyInt64(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.DeleteRows(System.String,System.String,System.Object,System.Data.IDbConnection)">
            <summary>
            Deletes the rows.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereColumn">The where column.</param>
            <param name="whereValue">The where value.</param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.GetRowCount(System.String,System.Data.IDbConnection)">
            <summary>
            Gets the row count.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteQueryDataSet(System.String)">
            <summary>
            Executes the query data set.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.ExecuteQueryDataSet(System.String,System.Data.IDbConnection)">
            <summary>
            Executes the query data set.
            </summary>
            <param name="query">The query.</param>
            <param name="openConnection">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.SupportsFeature(PublicDomain.Data.DatabaseFeature)">
            <summary>
            Supports the feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDatabase.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="P:PublicDomain.Data.IDatabase.ConnectionProvider">
            <summary>
            Gets the connection provider.
            </summary>
            <value>The connection provider.</value>
        </member>
        <member name="P:PublicDomain.Data.IDatabase.DbProviderFactory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Data.IDatabase.DatabaseType">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Data.Database">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.Database"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.Database.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.Database"/> class.
            </summary>
            <param name="databaseType">Type of the database.</param>
        </member>
        <member name="M:PublicDomain.Data.Database.#ctor(PublicDomain.Data.DatabaseType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.Database"/> class.
            </summary>
            <param name="databaseType">Type of the database.</param>
        </member>
        <member name="M:PublicDomain.Data.Database.#ctor(PublicDomain.Data.DatabaseType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.Database"/> class.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:PublicDomain.Data.Database.InitializeCurrent">
            <summary>
            Initializes the current.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteNonQuery(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteNonQuery(System.String,System.Data.IDbConnection)">
            <summary>
            </summary>
            <param name="query"></param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteQueryReader(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteQueryReader(System.String,System.Data.IDbConnection)">
            <summary>
            If the database supports MultipleActiveResultSets (MARS), then opening nested readers
            is allowed, otherwise, see http://msdn2.microsoft.com/en-us/library/haa3afyz(VS.80).aspx
            "Note that while a DataReader is open, the Connection is in use exclusively
            by that DataReader. You cannot execute any commands for the Connection,
            including creating another DataReader, until the original DataReader
            is closed."
            </summary>
            <param name="query"></param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.SetSelectCommand(System.Data.Common.DbDataAdapter,System.String,System.Data.IDbConnection)">
            <summary>
            Sets the select command.
            </summary>
            <param name="adapter">The adapter.</param>
            <param name="sql">The SQL.</param>
            <param name="openConnection">The open connection.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt16(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the value as an Int32. <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt32(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the int32.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetInt64(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetBool(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index.
            If the value in the database is NULL, false is returned.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetBool(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetEnum``1(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetEnum``1(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetString(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetString(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetUtcDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            <paramref name="columnIndex"/> is a 0-based column index
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">0-based column ordinal</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetUtcDateTime(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the decimal. <paramref name="columnIndex"/> is a 0-based
            column ordinal
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetDecimal(System.Data.IDataReader,System.String)">
            <summary>
            Gets the specified value as the specified type. If the value
            in the database is NULL, no exception is thrown. Instead,
            the default value for this type (e.g. NULL for objects, false for Boolean,
            0 for numerics, etc.) is returned. The caller should explicitly
            check for NULL on the IDataReader itself for this column to check
            NULLness.
            Gets the decimal.
            </summary>
            <param name="reader">The reader.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.DoesTableExist(System.String,System.Data.IDbConnection)">
            <summary>
            Doeses the table exist.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="openConnection"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetNewMaxKeyInt32(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetNewMaxKeyInt64(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.DeleteRows(System.String,System.String,System.Object,System.Data.IDbConnection)">
            <summary>
            Deletes the rows.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="whereColumn">The where column.</param>
            <param name="whereValue">The where value.</param>
            <param name="openConnection">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetRowCount(System.String,System.Data.IDbConnection)">
            <summary>
            Gets the row count.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="openConnection">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteQueryDataSet(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.ExecuteQueryDataSet(System.String,System.Data.IDbConnection)">
            <summary>
            Executes the query data set.
            </summary>
            <param name="query">The query.</param>
            <param name="conn">The conn.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.SupportsFeature(PublicDomain.Data.DatabaseFeature)">
            <summary>
            Supports the feature.
            </summary>
            <param name="feature">The feature.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.TestConnection">
            <summary>
            Tests the connection.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.Database.GetDatabase(PublicDomain.Data.DatabaseType,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the database.
            </summary>
            <param name="type">The type.</param>
            <param name="server">The server.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="otherParameters">The other parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetDatabase(PublicDomain.Data.DatabaseType,System.String,System.String,System.String,System.String,System.Int32,System.String[])">
            <summary>
            Gets the database.
            </summary>
            <param name="type">The type.</param>
            <param name="server">The server.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="port">The port.</param>
            <param name="otherParameters">The other parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.Database.GetDatabase(PublicDomain.Data.DatabaseType,System.String)">
            <summary>
            Gets the database.
            </summary>
            <param name="type">The type.</param>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Data.Database.Current">
            <summary>
            Gets the last instantiated database.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:PublicDomain.Data.Database.DbProviderFactory">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Data.Database.DatabaseType">
            <summary>
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Data.Database.ConnectionProvider">
            <summary>
            Gets the connection provider.
            </summary>
            <value>The connection provider.</value>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.CountableDirectory">
            <summary>
            Represents a dountable directory
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.CountableDirectory"/> class.
            </summary>
            <param name="directoryInfo">The directory info.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.#cctor">
            <summary>
            Initializes the <see cref="T:PublicDomain.Code.CodeCount.CountableDirectory"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.CountableDirectory"/> class.
            </summary>
            <param name="directoryName">Name of the directory.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.Load">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.IsCountableFile(System.IO.FileInfo)">
            <summary>
            Determines whether [is countable file] [the specified file].
            </summary>
            <param name="file">The file.</param>
            <returns>
            	<c>true</c> if [is countable file] [the specified file]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.IsCountableDirectory(System.IO.DirectoryInfo)">
            <summary>
            Determines whether [is countable directory] [the specified directory].
            </summary>
            <param name="directory">The directory.</param>
            <returns>
            	<c>true</c> if [is countable directory] [the specified directory]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.CountableDirectory.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableDirectory.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableDirectory.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Code.CodeCount.CountableDirectory.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptReturnStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptIfStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Month">
            <summary>
            Enumeration of the 12 months of a Gregorian calendar.
            Names are in English and values are from 1 to 12.
            </summary>
        </member>
        <member name="F:PublicDomain.Month.January">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.February">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.March">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.April">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.May">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.June">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.July">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.August">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.September">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.October">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.November">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Month.December">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.ILogTimestampProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.ILogTimestampProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:PublicDomain.Logging.ILogTimestampProvider.UtcOffset">
            <summary>
            Gets the offset of the DateTime provided by Now from UTC.
            If unknown, returns null.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="T:PublicDomain.Logging.CriticalLogger">
            <summary>
            By default, writes to:
            * The Console
            * The "Application" Event Log
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.CriticalLogger.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.CriticalLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.CriticalLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.CriticalLogger.AddLogger(PublicDomain.Logging.Logger)">
            <summary>
            Adds the logger.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.CriticalLogger.AddLogFilter(PublicDomain.Logging.ILogFilter)">
            <summary>
            Adds the log filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:PublicDomain.Logging.CriticalLogger.RemoveLogFilter(PublicDomain.Logging.ILogFilter)">
            <summary>
            Removes the log filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:PublicDomain.Logging.CriticalLogger.Log(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="severity"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="T:PublicDomain.Logging.ConsoleLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.ConsoleLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.ConsoleLogger"/> class.
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.ConsoleLogger.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Web.LiteralControlOnRender">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.LiteralControlOnRender.Text">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Web.LiteralControlOnRender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.LiteralControlOnRender"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Web.LiteralControlOnRender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Web.LiteralControlOnRender"/> class.
            </summary>
            <param name="txt">The TXT.</param>
        </member>
        <member name="M:PublicDomain.Web.LiteralControlOnRender.RenderControl(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"></see> object and stores tracing information about the control if tracing is enabled.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HTmlTextWriter"></see> object that receives the control content.</param>
        </member>
        <member name="T:PublicDomain.Feeder.Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.Serializer.AppendNewElement(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
            <summary>
            Appends the new element.
            </summary>
            <param name="doc">The doc.</param>
            <param name="parent">The parent.</param>
            <param name="elementName">Name of the element.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Serializer.AppendNewElement(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends the new element.
            </summary>
            <param name="doc">The doc.</param>
            <param name="parent">The parent.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The element value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Serializer.AppendNewElement(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Appends the new element.
            </summary>
            <param name="doc">The doc.</param>
            <param name="parent">The parent.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The element value.</param>
            <param name="elementNamespace">The element namespace.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Serializer.AppendNewAttribute(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Appends the new attribute.
            </summary>
            <param name="doc">The doc.</param>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Serializer.AppendNewAttribute(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Appends the new attribute.
            </summary>
            <param name="doc">The doc.</param>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="attributeNamespace">The attribute namespace.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssFeedParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ParseItem(System.Xml.XmlReader)">
            <summary>
            Parses the item.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssCloud(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS cloud.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssCloud(System.String)">
            <summary>
            Converts to I RSS cloud.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssCategory(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS category.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssCategory(System.String)">
            <summary>
            Converts to I RSS category.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssTextInput(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS text input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssTextInput(System.String)">
            <summary>
            Converts to I RSS text input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToDayOfWeekList(System.Xml.XmlReader)">
            <summary>
            Converts to day of week list.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToDayOfWeekList(System.String)">
            <summary>
            Converts to day of week list.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToSkipHourList(System.Xml.XmlReader)">
            <summary>
            Converts to skip hour list.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToSkipHourList(System.String)">
            <summary>
            Converts to skip hour list.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssImage(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS image.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssImage(System.String)">
            <summary>
            Converts to I RSS image.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssEnclosure(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS enclosure.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssEnclosure(System.String)">
            <summary>
            Converts to I RSS enclosure.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssGuid(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssGuid(System.String)">
            <summary>
            Converts to I RSS GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssSource(System.Xml.XmlReader)">
            <summary>
            Converts to I RSS source.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToIRssSource(System.String)">
            <summary>
            Converts to I RSS source.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToRssCloudProtocol(System.String)">
            <summary>
            Converts to RSS cloud protocol.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Rss.RssFeedParser.ConvertToDayOfWeek(System.String)">
            <summary>
            Converts to day of week.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.DistilledFeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IDistilledFeedItem">
            <summary>
            Similar to IDistilledFeed, this
            attempts to find the common denominator for a 
            feed entry or item. Few of these fields may be
            assumed to contain data.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeedItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeedItem.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IDistilledFeedItem.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeedItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeedItem.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.DistilledFeedItem.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="T:PublicDomain.Data.DatabaseFeature">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseFeature.MultipleActiveResultSets">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseFeature.NestedTransactions">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseFeature.MultipleOpenConnectionsWithinSingleTransaction">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.CurrentDirectoryRerouter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.CurrentDirectoryRerouter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.CurrentDirectoryRerouter"/> class.
            </summary>
            <param name="newCurrentDirectory">The new current directory.</param>
        </member>
        <member name="M:PublicDomain.CurrentDirectoryRerouter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.CryptographyUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.CryptographyUtilities.ComputeSHA1Hash(System.String)">
            <summary>
            Computes the SHA1 hash.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CryptographyUtilities.ComputeSHA1Hash(System.Byte[])">
            <summary>
            Computes the SHA1 hash.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptWhitespace">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptStringLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Triple`3">
            <summary>
            Generic class that encapsulates three objects of any type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="F:PublicDomain.Triple`3.First">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Triple`3.Second">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Triple`3.Third">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Triple`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Triple`3"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Triple`3"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="third">The third.</param>
        </member>
        <member name="M:PublicDomain.Triple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:PublicDomain.RegexUtilities">
            <summary>
            Common regular expressions.
            http://www.codeproject.com/dotnet/RegexTutorial.asp
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakExpression">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlParagraphExpression">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakOrParagraphExpression">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakOrParagraphTrimLeftExpression">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakOrParagraphTrimRightExpression">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.UriChars">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreak">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlParagraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakOrParagraph">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.HtmlBreakOrParagraphTrim">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.Uri">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.UriLenient">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.Email">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RegexUtilities.NonWordDigitRegex">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.RegexUtilities.GetCapture(System.Text.RegularExpressions.Match,System.Int32)">
            <summary>
            Gets the capture. Group number 0 is the entire match. Group
            number 1 is the first matched group from the left, and so on.
            </summary>
            <param name="match">The match.</param>
            <param name="groupNumber">The group number.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.GetLastCapture(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the last capture.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.GetLastCapture(System.Text.RegularExpressions.Match,System.Int32)">
            <summary>
            Gets the last Nth capture, specified by <paramref name="offset"/>.
            If <paramref name="offset"/> is 0, then this will return the last
            capture. If it is 1, then this will return the second-to-last
            capture and so on.
            </summary>
            <param name="match">The match.</param>
            <param name="offset">The Nth last capture. If 0, then this will return the last
            capture. If it is 1, then this will return the second-to-last
            capture and so on.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.MatchAny(System.String,System.Text.RegularExpressions.Regex[])">
            <summary>
            Matches any.
            </summary>
            <param name="input">The input.</param>
            <param name="regexs">The regexs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.MatchAny(System.String,System.Text.RegularExpressions.Match@,System.Text.RegularExpressions.Regex[])">
            <summary>
            Matches any.
            </summary>
            <param name="input">The input.</param>
            <param name="successfulMatch">The successful match.</param>
            <param name="regexs">The regexs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.Extract(System.String,System.String,System.Int32)">
            <summary>
            Capture index number 0 is the entire match. Capture
            index 1 is the first matched group from the left, and so on.
            </summary>
            <param name="input">The input.</param>
            <param name="regularExpression">The regular expression.</param>
            <param name="captureIndex">Capture index number 0 is the entire match. Capture
            index 1 is the first matched group from the left, and so on.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.Extract(System.String,System.String,System.Int32,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Capture index number 0 is the entire match. Capture
            index 1 is the first matched group from the left, and so on.
            </summary>
            <param name="input">The input.</param>
            <param name="regularExpression">The regular expression.</param>
            <param name="captureIndex">Index of the capture.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.Replace(System.String,System.String,System.Int32,System.String)">
            <summary>
            Capture index number 0 is the entire match. Capture
            index 1 is the first matched group from the left, and so on.
            </summary>
            <param name="input">The input.</param>
            <param name="regularExpression">The regular expression.</param>
            <param name="captureIndex">Capture index number 0 is the entire match. Capture
            index 1 is the first matched group from the left, and so on.
            </param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.Replace(System.String,System.String,System.Int32,PublicDomain.RegexUtilities.CallbackRegexReplacement)">
            <summary>
            Replaces the specified input.
            </summary>
            <param name="input">The input.</param>
            <param name="regularExpression">The regular expression.</param>
            <param name="captureIndex">Index of the capture.</param>
            <param name="replacement">The replacement.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RegexUtilities.RemoveNonWordCharacters(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.RegexUtilities.CallbackRegexReplacement">
            <summary>
            
            </summary>
            <param name="capturedIndex"></param>
            <param name="capturedValue"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.ScreenScraper.ScrapedPage">
            <summary>
            Represents a scraped HTML page.
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage.m_RawStream">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage._RawStreamLowercase">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage.m_Url">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage._QueryParameters">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage._ScrapeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapedPage._Title">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.FindSubstring(System.String,System.String,System.Boolean)">
            <summary>
            Finds the substring.
            </summary>
            <param name="pretext">The pretext.</param>
            <param name="posttext">The posttext.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.GetSubject(System.String@,System.String@,System.String,System.Boolean)">
            <summary>
            Gets the subject.
            </summary>
            <param name="pretext">The pretext.</param>
            <param name="posttext">The posttext.</param>
            <param name="contextFind">The context find.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.FindSubstring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            This searches the content stream for any piece of text that is surrounded
            by the prettext and posttext arguments
            </summary>
            <param name="subject">The subject.</param>
            <param name="pretext">The pretext.</param>
            <param name="posttext">The posttext.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.FindSubstringByContext(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Finds the substring by context.
            </summary>
            <param name="contextFind">The context find.</param>
            <param name="prettext">The prettext.</param>
            <param name="posttext">The posttext.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.SplitByEncapsulatingTags(System.String,System.String,System.Boolean)">
            <summary>
            Splits the by encapsulating tags.
            </summary>
            <param name="subject">The subject.</param>
            <param name="tagName">Name of the tag.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.CreateEndTag(System.String)">
            <summary>
            Creates the end tag.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertLinkToPair(System.String)">
            <summary>
            Converts the link to pair.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertLinkToPair(System.String,System.Boolean)">
            <summary>
            The first element in the pair is the HREF Link, and the second element
            is the text of the link.
            </summary>
            <param name="subject">The subject.</param>
            <param name="decodeLink">if set to <c>true</c> [decode link].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.SplitString(System.String,System.String)">
            <summary>
            Splits the string.
            </summary>
            <param name="str">The STR.</param>
            <param name="split">The split.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.CanonicalizeString(System.String)">
            <summary>
            Basically removes extraneous characters like padding, newlines, tabs, etc.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.FindChildlessTags(System.String,System.Boolean)">
            <summary>
            Finds the childless tags.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.Match(System.String)">
            <summary>
            Matches the specified regex.
            </summary>
            <param name="regex">The regex.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.Match(System.String,System.Boolean)">
            <summary>
            Matches the specified regex.
            </summary>
            <param name="regex">The regex.</param>
            <param name="caseSensitive">if set to <c>true</c> [case sensitive].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertToTag(System.String,System.Boolean)">
            <summary>
            Converts to tag.
            </summary>
            <param name="html">The HTML.</param>
            <param name="lowerNames">if set to <c>true</c> [lower names].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertToTagList(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Converts to tag list.
            </summary>
            <param name="tags">The tags.</param>
            <param name="lowerNames">if set to <c>true</c> [lower names].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.FindCurrency(System.String)">
            <summary>
            Finds the currency.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertCurrencyStringToDecimal(System.String,System.Decimal@)">
            <summary>
            Converts the currency string to decimal.
            </summary>
            <param name="subject">The subject.</param>
            <param name="ret">The ret.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertCurrencyStringToDouble(System.String,System.Double@)">
            <summary>
            Converts the currency string to double.
            </summary>
            <param name="subject">The subject.</param>
            <param name="ret">The ret.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ConvertStringToDateTime(System.String,PublicDomain.TzTimeZone,PublicDomain.TzDateTime@)">
            <summary>
            Converts the string to date time.
            </summary>
            <param name="subject">The subject.</param>
            <param name="timeZone">The time zone.</param>
            <param name="ret">The ret.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScrapedPage.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.RawStream">
            <summary>
            Gets or sets the raw stream.
            </summary>
            <value>The raw stream.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.RawStreamLowercase">
            <summary>
            Gets the raw stream lowercase.
            </summary>
            <value>The raw stream lowercase.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.QueryParameters">
            <summary>
            Gets or sets the query parameters.
            </summary>
            <value>The query parameters.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.ScrapeType">
            <summary>
            Gets or sets the type of the scrape.
            </summary>
            <value>The type of the scrape.</value>
        </member>
        <member name="P:PublicDomain.ScreenScraper.ScrapedPage.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:PublicDomain.Logging.NullLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.SimpleCompositeLogger">
            <summary>
            Can be used for logging based on a class name, which is used
            as the category. Also, delineates a new static run on the first log, in debug mode.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.SimpleCompositeLogger.#ctor(PublicDomain.Logging.Logger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.SimpleCompositeLogger"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="className">Name of the class.</param>
        </member>
        <member name="M:PublicDomain.Logging.SimpleCompositeLogger.Log(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="severity"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.SimpleCompositeLogger.HandleFatalLog(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            Handles the fatal log.
            </summary>
            <param name="severity">The severity.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.Logging.SimpleCompositeLogger.AddLogger(PublicDomain.Logging.Logger)">
            <summary>
            Adds the logger.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:PublicDomain.Logging.SimpleCompositeLogger.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="F:PublicDomain.Logging.NullLogger.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.NullLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.Log(PublicDomain.Logging.LoggerSeverity,System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="severity"></param>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogDebug10(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogError40(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogFatal50(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogInfo20(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogWarn30(System.Object,System.Object[])">
            <summary>
            </summary>
            <param name="entry"></param>
            <param name="formatParameters"></param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.DebugLogEntryExit(System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Logs the entry exit.
            </summary>
            <param name="isEntry">if set to <c>true</c> [is entry].</param>
            <param name="useMarker">if set to <c>true</c> [use marker].</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.Entry(System.String,System.Object[])">
            <summary>
            Dumps the entry.
            </summary>
            <param name="methodName"></param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.Exit(System.String,System.Object[])">
            <summary>
            Exits
            </summary>
            <param name="methodName"></param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogException(System.Exception)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.LogException(System.Exception,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Logs the exception.
            </summary>
            <param name="ex">The ex.</param>
            <param name="severity">The severity.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.DoLog(PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String)">
            <summary>
            High level final log that is called with all of the detailed information
            and the final log line as the last parameter.
            </summary>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="logLine">The log line.</param>
        </member>
        <member name="M:PublicDomain.Logging.NullLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="T:PublicDomain.Logging.LoggingConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggingConfig.OffValue">
            <summary>
            Returned for off (value is Infinity)
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggingConfig.DefaultLogThreshold">
            <summary>
            Returned for *
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggingConfig.AllLoggersDesignator">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggingConfig.AllLoggersDesignatorSplat">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.LoggingConfig.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LoggingConfig"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LoggingConfig"/> class.
            </summary>
            <param name="configString">The config string.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.#ctor(System.String,PublicDomain.Logging.LoggingConfig.CallbackCreateLogger,PublicDomain.Logging.LoggingConfig.CallbackUpdateLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.LoggingConfig"/> class.
            </summary>
            <param name="configString">The config string.</param>
            <param name="createLogger">The create logger.</param>
            <param name="updateLogger">The update logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.InitializeCurrent">
            <summary>
            Initializes the current.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.Load(System.String)">
            <summary>
            Loads the specified config string.
            </summary>
            <example>Namespace1.Class1=*;Class2=off;Namespace1.Namespace2.Class3=Debug</example>
            <param name="configString">The config string.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.Load(System.String,PublicDomain.Logging.LoggingConfig.CallbackCreateLogger,PublicDomain.Logging.LoggingConfig.CallbackUpdateLogger)">
            <summary>
            Loads the specified config string.
            </summary>
            <example>Namespace1.Class1=*;Class2=off;Namespace1.Namespace2.Class3=Debug</example>
            <param name="configString">The config string.</param>
            <param name="createLogger">The create logger.</param>
            <param name="updateLogger">The update logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.DefaultCallbackCreateLogger(System.String,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Defaults the callback create logger.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.DefaultCallbackUpdateLogger(PublicDomain.Logging.Logger,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Defaults the callback update logger.
            </summary>
            <param name="logger">The logger.</param>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.PostProcessNewLogger(System.String,PublicDomain.Logging.LoggerSeverity,PublicDomain.Logging.Logger)">
            <summary>
            Posts the process new logger.
            </summary>
            <param name="key">The key.</param>
            <param name="threshold">The threshold.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.PrepareLogger(PublicDomain.Logging.LoggerSeverity,PublicDomain.Logging.Logger)">
            <summary>
            Prepares the logger.
            </summary>
            <param name="threshold">The threshold.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.GetLogValue(System.String)">
            <summary>
            Gets the log value.
            </summary>
            <param name="logValue">The log value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.CreateLogger(System.String[])">
            <summary>
            Gets the <see cref="T:PublicDomain.Logging.Logger"/> with the specified log class.
            </summary>
            <param name="logClasses">The log classes.</param>
            <returns></returns>
            <value></value>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.CreateLogger(System.Type,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Creates the logger.
            </summary>
            <param name="type">The type.</param>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.CreateLogger(System.String,PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Creates the logger.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.GetWorkingLogger">
            <summary>
            Gets the working logger.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.GetWorkingLogger(PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Gets the working logger.
            </summary>
            <param name="threshold">The threshold.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.CreateLogger(System.Type,System.String[])">
            <summary>
            Creates the logger.
            </summary>
            <param name="type">The type.</param>
            <param name="otherLogClasses">The other log classes.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.EnableAllLoggers">
            <summary>
            Enables all loggers.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.DisableAllLoggers">
            <summary>
            Disables all loggers.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.LoggingConfig.UpdateAllLoggers(System.Boolean)">
            <summary>
            Updates all loggers.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="P:PublicDomain.Logging.LoggingConfig.Current">
            <summary>
            Gets the global LoggingConfig instance. The constructor
            of LoggingConfig sets the new instance to the global Current
            when called, so unless otherwise set, the Current value
            is the last instantiated instance of LoggingConfig or a default
            LogginConfig.
            </summary>
            <value>The current.</value>
        </member>
        <member name="P:PublicDomain.Logging.LoggingConfig.FallbackToNullLogger">
            <summary>
            Gets or sets a value indicating whether [fallback to null logger].
            </summary>
            <value>
            	<c>true</c> if [fallback to null logger]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Logging.LoggingConfig.Value">
            <summary>
            Gets the configuration string value
            previously loaded.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:PublicDomain.Logging.LoggingConfig.CallbackCreateLogger">
            <summary>
            
            </summary>
            <param name="className"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Logging.LoggingConfig.CallbackUpdateLogger">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="threshold"></param>
        </member>
        <member name="T:PublicDomain.Data.QueryBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.QueryBuilder"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.#ctor(PublicDomain.Data.DatabaseType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.QueryBuilder"/> class.
            </summary>
            <param name="databaseType">Type of the database.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.QueryBuilder"/> class.
            </summary>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.#ctor(System.String,PublicDomain.Data.DatabaseType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.QueryBuilder"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="databaseType">Type of the database.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterString(System.String)">
            <summary>
            Adds the parameter string.
            </summary>
            <param name="str">The STR.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterDbObjectName(System.String)">
            <summary>
            Adds the name of the parameter db object.
            </summary>
            <param name="objectName">Name of the object.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameter(System.Object)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="val">The val.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameter(System.Object,System.Data.DbType)">
            <summary>
            Adds the parameter.
            </summary>
            <param name="val">The val.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterStringInsensitiveStart">
            <summary>
            Adds the parameter string insensitive start.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterStringInsensitiveEnd">
            <summary>
            Adds the parameter string insensitive end.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameters(System.Object[])">
            <summary>
            Adds the parameters.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameters(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Adds the parameters.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterConcat(System.String,System.String)">
            <summary>
            Adds the parameter concat.
            </summary>
            <param name="str1">The STR1.</param>
            <param name="str2">The STR2.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.AddParameterConcat(System.String,System.String,System.Boolean)">
            <summary>
            Adds the parameter concat.
            </summary>
            <param name="str1">The STR1.</param>
            <param name="str2">The STR2.</param>
            <param name="skipFirst">if set to <c>true</c> [skip first].</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.SetParameter(System.Int32,System.Object)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="i">The i.</param>
            <param name="val">The val.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.SetParameter(System.Int32,System.Object,System.Data.DbType)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="i">The i.</param>
            <param name="val">The val.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.SetParameterString(System.Int32,System.String)">
            <summary>
            Sets the parameter string.
            </summary>
            <param name="i">The i.</param>
            <param name="str">The STR.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.SetParameterConcat(System.Int32,System.String,System.String)">
            <summary>
            Sets the parameter concat.
            </summary>
            <param name="i">The i.</param>
            <param name="str1">The STR1.</param>
            <param name="str2">The STR2.</param>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.ClearParameters">
            <summary>
            Clears the parameters.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.op_Implicit(PublicDomain.Data.QueryBuilder)~System.String">
            <summary>
            Implicit operators the specified qb.
            </summary>
            <param name="qb">The qb.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.GenerateCreateTableStatement(System.Data.DataTable)">
            <summary>
            Generates the create table statement.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.GenerateDropTableStatement(System.Data.DataTable)">
            <summary>
            Generates the drop table statement.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.GetPrimaryKeyConstraints(System.Data.DataTable)">
            <summary>
            Gets the primary key constraints.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.QueryBuilder.GetForeignKeyConstraints(System.Data.DataTable)">
            <summary>
            Gets the foreign key constraints.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Data.QueryBuilder.SqlText">
            <summary>
            Gets or sets the SQL text.
            </summary>
            <value>The SQL text.</value>
        </member>
        <member name="P:PublicDomain.Data.QueryBuilder.ParameterCount">
            <summary>
            Gets the parameter count.
            </summary>
            <value>The parameter count.</value>
        </member>
        <member name="P:PublicDomain.Data.QueryBuilder.DatabaseType">
            <summary>
            Gets or sets the type of the database.
            </summary>
            <value>The type of the database.</value>
        </member>
        <member name="T:PublicDomain.Data.DatabaseNexus">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryAssemblyDb2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryAssemblyMySql">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryAssemblyOracle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryAssemblyPostgreSql">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryTypeDb2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryTypeMySql">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryTypeOracle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DatabaseNexus.DefaultDbProviderFactoryTypePostgreSql">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDbProviderFactory(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the db provider factory.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDbProviderFactory(PublicDomain.Data.DatabaseType,System.Version)">
            <summary>
            Gets the db provider factory.
            </summary>
            <param name="type">The type.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDefaultDbProviderFactoryAssemblyName(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the name of the default db provider factory assembly.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDefaultDbProviderFactoryAssemblyName(PublicDomain.Data.DatabaseType,System.Version)">
            <summary>
            Gets the name of the default db provider factory assembly.
            </summary>
            <param name="type">The type.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDefaultDbProviderFactoryTypeName(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the name of the default DbProviderFactory type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetDbProviderFactory(System.String,System.String)">
            <summary>
            Gets the db provider factory.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringParameter(PublicDomain.Data.DatabaseType,PublicDomain.Data.ConnectionParameterName)">
            <summary>
            Gets the connection string parameter.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringParameter(PublicDomain.Data.DatabaseType,System.String)">
            <summary>
            Gets the connection string parameter.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="parameterName">Name of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringParameterValueSeparator(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the connection string parameter value separator. Default: '='
            </summary>
            <param name="databaseType">Type of the database.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringParameterDivider(PublicDomain.Data.DatabaseType)">
            <summary>
            Gets the connection string parameter divider. Default: ';'
            </summary>
            <param name="databaseType">Type of the database.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.ParseDatabaseType(System.String)">
            <summary>
            Parses the type of the database.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionString(PublicDomain.Data.DatabaseType,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the connection string.
            </summary>
            <param name="type">The type.</param>
            <param name="server">The server.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="otherParameters">The other parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionString(PublicDomain.Data.DatabaseType,System.String,System.String,System.String,System.String,System.Int32,System.String[])">
            <summary>
            Gets the connection string.
            </summary>
            <param name="type">The type.</param>
            <param name="server">The server.</param>
            <param name="databaseName">Name of the database.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="port">The port.</param>
            <param name="otherParameters">The other parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringPart(PublicDomain.Data.DatabaseType,System.String,System.String)">
            <summary>
            Gets the connection string part.
            </summary>
            <param name="type">The type.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DatabaseNexus.GetConnectionStringPart(PublicDomain.Data.DatabaseType,PublicDomain.Data.ConnectionParameterName,System.String)">
            <summary>
            Gets the connection string part.
            </summary>
            <param name="type">The type.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterValue">The parameter value.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Data.ConnectionParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.ConnectionParameterName.Server">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.ConnectionParameterName.Database">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.ConnectionParameterName.User">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.ConnectionParameterName.Password">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Data.ConnectionParameterName.Port">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.DepthFirstCountStream">
            <summary>
            Counts a stream depth first
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.DepthFirstCountStream.m_current">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.DepthFirstCountStream.m_currentChildIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.DepthFirstCountStream.m_finished">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DepthFirstCountStream.#ctor(PublicDomain.Code.CodeCount.CountStreamType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.CodeCount.DepthFirstCountStream"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DepthFirstCountStream.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DepthFirstCountStream.Cancel">
            <summary>
            Cancels this instance.
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.EcmaScript.EcmaScriptFunction.IsAnonymous">
            <summary>
            Gets a value indicating whether this instance is anonymous.
            </summary>
            <value>
            	<c>true</c> if this instance is anonymous; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptFloatLiteral">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptFinallyStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.TzTimeZone">
            <summary>
            Represents a Time Zone from the Olson tz database.
            
            From http://www.twinsun.com/tz/tz-link.htm
            "The public-domain time zone database contains code
            and data that represent the history of local time
            for many representative locations around the globe."
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.TreatUnspecifiedKindAsLocal">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.ZoneUTC">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.ZoneUsEastern">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.ZoneUsCentral">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.ZoneUsMountain">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzTimeZone.ZoneUsPacific">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.TzTimeZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzTimeZone"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzTimeZone.#ctor(PublicDomain.TzTimeZone.TzZoneInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzTimeZone"/> class.
            </summary>
            <param name="info">The info.</param>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetDaylightChanges(System.Int32)">
            <summary>
            Returns the daylight saving time period for a particular year. By default,
            returns the start and end DateTimes in Local format. Use the overload
            of GetDaylightChanges to provide the inflection point Kind (such as Utc)
            to do the proper conversion.
            </summary>
            <param name="year">The year to which the daylight saving time period applies.</param>
            <returns>
            A <see cref="T:System.Globalization.DaylightTime"></see> instance containing the start and end date for daylight saving time in year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999. </exception>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetDaylightChanges(System.Int32,System.DateTimeKind)">
            <summary>
            Returns the daylight saving time period for a particular year.
            </summary>
            <param name="year">The year to which the daylight saving time period applies.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <returns>
            A <see cref="T:System.Globalization.DaylightTime"></see> instance containing the start and end date for daylight saving time in year.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999. </exception>
        </member>
        <member name="M:PublicDomain.TzTimeZone.FindZone(System.DateTime)">
            <summary>
            Finds the zone.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.FindRule(PublicDomain.TzDatabase.TzZone,System.DateTime)">
            <summary>
            Finds the rule.
            </summary>
            <param name="zone">The zone.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.FindRuleIndex(PublicDomain.TzDatabase.TzZone,System.DateTime)">
            <summary>
            Finds the index of the rule.
            </summary>
            <param name="zone">The zone.</param>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.FindRuleIndex(PublicDomain.TzDatabase.TzZone,System.DateTime,System.String,System.Int32,System.Boolean)">
            <summary>
            Finds the rule.
            </summary>
            <param name="zone">The zone.</param>
            <param name="point">The point.</param>
            <param name="avoidModifier">The avoid modifier.</param>
            <param name="avoidIndex">Index of the avoid.</param>
            <param name="exactComparison">if set to <c>true</c> [exact comparison].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetUtcOffset(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) offset for the specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>
            The UTC offset from time, measured in ticks.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetAbbreviation">
            <summary>
            Gets the abbreviation for this time zone at
            the current date and time. This is sensitive
            to daylight savings time. For example, in the United States,
            in the Eastern time zone,
            this will return either EDT or EST, depending
            on whether or not the current time point is
            in the daylight savings time period or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetAbbreviation(System.DateTime)">
            <summary>
            Gets the abbreviation for this time zone at
            the point of <paramref name="time"/>. This is sensitive
            to daylight savings time. For example, in the United States,
            in the Eastern time zone,
            this will return either EDT or EST, depending
            on whether or not the point of <paramref name="time"/> is
            in the daylight savings time period or not.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.IsDaylightSavingTime(System.DateTime)">
            <summary>
            Returns a value indicating whether the specified date and time is within a daylight saving time period.
            </summary>
            <param name="time">A date and time.</param>
            <returns>
            true if time is in a daylight saving time period; false otherwise, or if time is null.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.ToLocalTime(System.DateTime)">
            <summary>
            Returns the local time that corresponds to a specified coordinated universal time (UTC).
            The <paramref name="time"/> parameters must have its Kind specifically set to UTC,
            otherwise this code will treat the time as a local DateTime and simply return the same
            value. It is important to note that normal usage of DateTime's, such as DateTime.Parse
            will create a DateTime with Kind Unspecified, which is treated as Local, therefore,
            if you are manually creating UTC DateTimes to pass to this function, you must explicitly
            create one with the UTC Kind. If you already have a DateTime (from a method like Parse)
            with a Local or Unspecified Kind, you can create one with UTC, simply with
            new DateTime(oldDateTime.Ticks, DateTimeKind.Utc)
            </summary>
            <param name="time">A UTC time. See summary of method.</param>
            <returns>
            A <see cref="T:System.DateTime"></see> instance whose value is the local time that corresponds to time.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.ToUniversalTime(System.DateTime)">
            <summary>
            Returns the coordinated universal time (UTC) that corresponds to a specified local time.
            </summary>
            <param name="time">The local date and time.</param>
            <returns>
            A <see cref="T:System.DateTime"></see> instance whose value is the UTC time that corresponds to time.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetTimeZone(System.String)">
            <summary>
            Gets a new object representing the time zone with the
            name <paramref name="tzName"/> or null if none can be found.
            These <see cref="T:PublicDomain.TzTimeZone"/> instances are
            not cached, so constantly calling this method will continuously
            create new <see cref="T:PublicDomain.TzTimeZone"/> objects.
            </summary>
            <param name="tzName">Name of the time zone.</param>
            <returns>null if no time zone can by found or a TzTimeZone object</returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetTimeZoneByOffset(System.String)">
            <summary>
            Gets the time zone by offset.
            </summary>
            <param name="utcOffsetTime">The utc offset time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetTimeZoneByOffset(System.TimeSpan)">
            <summary>
            Gets the time zone by offset.
            </summary>
            <param name="utcOffsetTime">The utc offset time.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
            <summary>
                Returns a value indicating whether the specified date and time is within
                the specified daylight saving time period.
            </summary>
            <param name="time">A date and time.</param>
            <param name="daylightTimes">A daylight saving time period.</param>
            <returns>
            	true if time is in daylightTimes; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.TzTimeZone.Zones">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.TzTimeZone.ZoneList">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.TzTimeZone.AllZoneNames">
            <summary>
            Gets all zone names.
            </summary>
            <value>All zone names.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.Info">
            <summary>
            Gets the info.
            </summary>
            <value>The info.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.StandardName">
            <summary>
            This will always return the unique zone name
            for this zone as specified in the Olson time zone database.
            This zone name does not contain spaces. To retrieve the
            abbreviated form which is sensitive to daylight savings time,
            use the GetAbbreviation method. The
            GetAbbreviation method will return an abbreviation such,
            for example, EDT or EST, in the Eastern time zone in the United
            States, depending on the point in time given to it.
            </summary>
            <value></value>
            <returns>The standard time zone name.</returns>
            <exception cref="T:System.ArgumentNullException">Attempted to set this property to null. </exception>
        </member>
        <member name="P:PublicDomain.TzTimeZone.HistoricalData">
            <summary>
            Gets the historical information, including zones and rules
            for this time zone.
            </summary>
            <value>The historical info.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.DaylightName">
            <summary>
            This will always return the <see cref="P:PublicDomain.TzTimeZone.StandardName"/> name
            for this zone as specified in the Olson time zone database.
            This zone name does not contain spaces. To retrieve the
            abbreviated form which is sensitive to daylight savings time,
            use the GetAbbreviation method. The
            GetAbbreviation method will return an abbreviation such,
            for example, EDT or EST, in the Eastern time zone in the United
            States, depending on the point in time given to it.
            </summary>
            <value></value>
            <returns>The daylight saving time zone name.</returns>
        </member>
        <member name="P:PublicDomain.TzTimeZone.Now">
            <summary>
            Gets the current time in this time zone.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.ZoneName">
            <summary>
            Gets the name of the zone. Setting the zone is
            the same as finding a new zone.
            </summary>
            <value>The name of the zone.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.CurrentTimeZone">
            <summary>
            Gets the time zone of the current computer system.
            </summary>
            <value>A System.TimeZone instance representing the current, local time zone.</value>
        </member>
        <member name="T:PublicDomain.TzTimeZone.TzZoneInfo">
            <summary>
            Represents a time zone, with all of its transitions and rules.
            </summary>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzZone"/> class.
            </summary>
            <param name="zoneName">Name of the zone.</param>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.#ctor(System.String,System.Collections.Generic.List{PublicDomain.TzDatabase.TzZone},System.Collections.Generic.List{PublicDomain.TzDatabase.TzRule})">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzTimeZone.TzZoneInfo"/> class.
            </summary>
            <param name="zoneName">Name of the zone.</param>
            <param name="zones">The zones.</param>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.#ctor(System.String,System.Collections.Generic.List{PublicDomain.TzDatabase.TzZone},System.Collections.Generic.List{PublicDomain.TzDatabase.TzRule},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzZone"/> class.
            </summary>
            <param name="zoneName">Name of the zone.</param>
            <param name="zones">The zones.</param>
            <param name="rules">The rules.</param>
            <param name="isLatitudeNorth">if set to <c>true</c> [is latitude north].</param>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneInfo.Clone(System.String)">
            <summary>
            Clones the specified zone name.
            </summary>
            <param name="zoneName">Name of the zone.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneInfo.Rules">
            <summary>
            Gets the rules.
            </summary>
            <value>The rules.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneInfo.Zones">
            <summary>
            Gets the zones.
            </summary>
            <value>The zones.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneInfo.ZoneName">
            <summary>
            Gets the name of the zone.
            </summary>
            <value>The name of the zone.</value>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneInfo.IsLatitudeNorth">
            <summary>
            Gets a value indicating whether this instance is latitude north.
            </summary>
            <value>
            	<c>true</c> if this instance is latitude north; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PublicDomain.TzTimeZone.TzZoneDescription">
            <summary>
            Logical zone description taken from the zone tab file in the tz database.
            </summary>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzTimeZone.TzZoneDescription"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneDescription.#ctor(System.String,PublicDomain.Iso6709,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzTimeZone.TzZoneDescription"/> class.
            </summary>
            <param name="twoLetterCode">The two letter code.</param>
            <param name="location">The location.</param>
            <param name="zoneName">Name of the zone.</param>
            <param name="comments">The comments.</param>
        </member>
        <member name="M:PublicDomain.TzTimeZone.TzZoneDescription.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneDescription.TwoLetterCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneDescription.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneDescription.ZoneName">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.TzTimeZone.TzZoneDescription.Comments">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ThreadingUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ThreadingUtilities.SetTimer(System.Int32,System.Delegate,System.Object[])">
            <summary>
            Sets the timer.
            </summary>
            <param name="afterMilliseconds">The after milliseconds.</param>
            <param name="d">The d.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ThreadingUtilities.SetTimerSimple(System.Int32,PublicDomain.CallbackNoArgs)">
            <summary>
            Sets the timer simple.
            </summary>
            <param name="afterMilliseconds">The after milliseconds.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ThreadingUtilities.SetInterval(System.Int32,System.Delegate,System.Object[])">
            <summary>
            Sets the interval.
            </summary>
            <param name="periodMilliseconds">The period milliseconds.</param>
            <param name="d">The d.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ThreadingUtilities.SetIntervalSimple(System.Int32,PublicDomain.CallbackNoArgs)">
            <summary>
            Sets the interval simple.
            </summary>
            <param name="periodMilliseconds">The period milliseconds.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.DistanceType">
            <summary>
            Measurement of distance
            </summary>
        </member>
        <member name="F:PublicDomain.DistanceType.StatuteMiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DistanceType.NauticalMiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DistanceType.Kilometers">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ScreenScraper.ScrapeType">
            <summary>
            The method of the scraping
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapeType.GET">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScrapeType.POST">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Isrc">
            <summary>
            International Standard Recording Code
            ISO 3901
            </summary>
        </member>
        <member name="M:PublicDomain.Isrc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Isrc"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Isrc.GetNewIsrc(System.String,System.Int32,System.String)">
            <summary>
            Gets the new isrc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Isrc.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Isrc.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Isrc.CountryCode">
            <summary>
            Gets or sets the country code.
            ISO 3166-1 alpha-2 country code
            </summary>
            <value>The country code.</value>
        </member>
        <member name="P:PublicDomain.Isrc.RegistrantCode">
            <summary>
            Gets or sets the registrant code.
            Uniquely identifying the organisation which registered the code
            </summary>
            <value>The registrant code.</value>
        </member>
        <member name="P:PublicDomain.Isrc.YearOfRegistrationValue">
            <summary>
            Gets or sets the year of registration value.
            </summary>
            <value>The year of registration value.</value>
        </member>
        <member name="P:PublicDomain.Isrc.YearOfRegistration">
            <summary>
            Gets the year of registration.
            </summary>
            <value>The year of registration.</value>
        </member>
        <member name="P:PublicDomain.Isrc.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:PublicDomain.Feeder.OpmlFeed">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.OpmlFeed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Feeder.OpmlFeed"/> class.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.OpmlFeed.Head">
            <summary>
            Gets or sets the head.
            </summary>
            <value>The head.</value>
        </member>
        <member name="P:PublicDomain.Feeder.OpmlFeed.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:PublicDomain.Feeder.OpmlFeed.RawContents">
            <summary>
            Gets or sets the raw contents.
            </summary>
            <value>The raw contents.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomGenerator">
            <summary>
            Identifies the software used to generate the feed, for debugging and other purposes. Both the uri and version attributes are optional.
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomGenerator.GeneratorUri">
            <summary>
            Gets or sets the generator URI.
            </summary>
            <value>The generator URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomGenerator.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomGenerator.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomGenerator.GeneratorUri">
            <summary>
            Gets or sets the generator URI.
            </summary>
            <value>The generator URI.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomGenerator.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomGenerator.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Code.ICodeRunner">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.ICodeRunner.Run(System.CodeDom.Compiler.CompilerResults,System.String,System.Text.StringBuilder,System.String[])">
            <summary>
            Runs the specified arguments.
            </summary>
            <param name="compilerResults">The compiler results.</param>
            <param name="execMethod">The exec method.</param>
            <param name="output">The output.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.ICodeRunner.RunToString(System.CodeDom.Compiler.CompilerResults,System.String,System.String[])">
            <summary>
            Runs to string.
            </summary>
            <param name="compilerResults">The compiler results.</param>
            <param name="execMethod">The exec method.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Code.ICodeRunner.Language">
            <summary>
            Gets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="T:PublicDomain.Data.ConnectionScopedDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.#ctor(PublicDomain.Data.DatabaseType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.ConnectionScopedDatabase"/> class.
            </summary>
            <param name="databaseType">Type of the database.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.GetNewMaxKeyInt32(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.GetNewMaxKeyInt64(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Gets the new max key.
            </summary>
            <param name="transactionScopeConnection">The transaction scope connection.</param>
            <param name="tableName">Name of the table.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.ExecuteNonQuery(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.ExecuteQueryDataSet(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabase.ExecuteQueryReader(System.String)">
            <summary>
            The base implementation of this method opens and disposes a connection internally.
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.ConversionUtilities">
            <summary>
            Common conversion tasks such as parsing string values into various types.
            </summary>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnInteger(System.String)">
            <summary>
            Determines whether [is string an integer] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an integer] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnInteger16(System.String)">
            <summary>
            Determines whether [is string an integer16] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an integer16] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnInteger32(System.String)">
            <summary>
            Determines whether [is string an integer32] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an integer32] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnInteger64(System.String)">
            <summary>
            Determines whether [is string an integer64] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an integer64] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnUnsignedIntegerAny(System.String)">
            <summary>
            Determines whether [is string an unsigned integer any] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an unsigned integer any] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnUnsignedInteger16(System.String)">
            <summary>
            Determines whether [is string an unsigned integer16] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an unsigned integer16] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnUnsignedInteger32(System.String)">
            <summary>
            Determines whether [is string an unsigned integer32] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an unsigned integer32] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAnUnsignedInteger64(System.String)">
            <summary>
            Determines whether [is string an unsigned integer64] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string an unsigned integer64] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringADouble(System.String)">
            <summary>
            Determines whether [is string A double] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A double] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringADecimal(System.String)">
            <summary>
            Determines whether [is string A decimal] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A decimal] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAFloat(System.String)">
            <summary>
            Determines whether [is string A float] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A float] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAChar(System.String)">
            <summary>
            Determines whether [is string A char] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A char] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringABoolean(System.String)">
            <summary>
            Determines whether [is string A boolean] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A boolean] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringAByte(System.String)">
            <summary>
            Determines whether [is string A byte] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A byte] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringATimeSpan(System.String)">
            <summary>
            Determines whether [is string A time span] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A time span] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.IsStringADateTime(System.String)">
            <summary>
            Determines whether [is string A date time] [the specified STR].
            </summary>
            <param name="str">The STR.</param>
            <returns>
            	<c>true</c> if [is string A date time] [the specified STR]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseInt(System.String)">
            <summary>
            Parses the int. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseInt(System.String,System.Int32)">
            <summary>
            Parses the int.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseHex(System.String)">
            <summary>
            Parses the hex.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseHex(System.String,System.Int32)">
            <summary>
            Parses the hex.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseShort(System.String)">
            <summary>
            Parses the short. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseShort(System.String,System.Int16)">
            <summary>
            Parses the short.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseLong(System.String)">
            <summary>
            Parses the long. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseLong(System.String,System.Int64)">
            <summary>
            Parses the long.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseFloat(System.String)">
            <summary>
            Parses the float. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseFloat(System.String,System.Single)">
            <summary>
            Parses the float.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseDouble(System.String)">
            <summary>
            Parses the double. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseDouble(System.String,System.Double)">
            <summary>
            Parses the double.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseDecimal(System.String)">
            <summary>
            Parses the decimal. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseDecimal(System.String,System.Decimal)">
            <summary>
            Parses the decimal.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUInt(System.String)">
            <summary>
            Parses the U int. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUInt(System.String,System.UInt32)">
            <summary>
            Parses the U int.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUShort(System.String)">
            <summary>
            Parses the U short. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUShort(System.String,System.UInt16)">
            <summary>
            Parses the U short.
            </summary>
            <param name="str">The STR.</param>
            <param name="defualtValue">The defualt value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseULong(System.String)">
            <summary>
            Parses the U long. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseULong(System.String,System.UInt64)">
            <summary>
            Parses the U long.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseBool(System.String)">
            <summary>
            Parses the bool. Default false
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseBool(System.String,System.Boolean)">
            <summary>
            Parses the bool.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseByte(System.String)">
            <summary>
            Parses the byte. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseByte(System.String,System.Byte)">
            <summary>
            Parses the byte.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseChar(System.String)">
            <summary>
            Parses the char. Default 0
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseChar(System.String,System.Char)">
            <summary>
            Parses the char.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUri(System.String)">
            <summary>
            Parses the URI. Default null
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseUri(System.String,System.Uri)">
            <summary>
            Parses the URI.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.TryParseUri(System.String,System.Uri@)">
            <summary>
            Tries the parse URI.
            </summary>
            <param name="str">The STR.</param>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseVersion(System.String)">
            <summary>
            Parses the version. Default null
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ParseVersion(System.String,System.Version)">
            <summary>
            Parses the version.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultVersion">The default version.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.TryParseVersion(System.String,System.Version@)">
            <summary>
            Tries the parse version.
            </summary>
            <param name="str">The STR.</param>
            <param name="version">The version.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ToBinary(System.Int32)">
            <summary>
            Toes the binary.
            </summary>
            <param name="num">The num.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ToHexadecimal(System.Int32)">
            <summary>
            Toes the hexadecimal.
            </summary>
            <param name="num">The num.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.ToHexadecimal(System.Int32,System.Boolean)">
            <summary>
            Toes the hexadecimal.
            </summary>
            <param name="num">The num.</param>
            <param name="prependZeroX">if set to <c>true</c> [prepend zero X].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ConversionUtilities.BooleanLaxTryParse(System.String,System.Boolean@)">
            <summary>
            </summary>
            <param name="str">The STR.</param>
            <param name="val">if set to <c>true</c> [val].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.DotNetProject">
            <summary>
            Represents a .NET project which is countable
            </summary>
        </member>
        <member name="M:PublicDomain.Code.CodeCount.DotNetProject.CountLines">
            <summary>
            Counts the lines.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Code.CodeCount.CountStreamType">
            <summary>
            Enumeration of known countable stream types
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStreamType.Directory">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.CodeCount.CountStreamType.VSSolution2005">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.UnitedStatesUtilities">
            <summary>
            Methods and date related to the United States, such as a list
            of States.
            </summary>
        </member>
        <member name="F:PublicDomain.UnitedStatesUtilities.States">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.GetStateByAbbrivation(System.String)">
            <summary>
            Attempts to find a <see cref="T:PublicDomain.UnitedStatesUtilities.USState"/>
            by its abbreviate.
            </summary>
            <param name="abbreviation">The abbreviation of the state to search for. Not case sensitive.</param>
            <returns>
            The <see cref="T:PublicDomain.UnitedStatesUtilities.USState"/> that represents the
            <c>abbreviation</c>, or if it is not found, throws a <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/>
            </returns>
            <exception cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"></exception>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.GetStateByName(System.String)">
            <summary>
            Attempts to find a <see cref="T:PublicDomain.UnitedStatesUtilities.USState"/>
            by its name.
            </summary>
            <param name="stateName">The name of the state to search for. Not case sensitive.</param>
            <returns>
            The <see cref="T:PublicDomain.UnitedStatesUtilities.USState"/> that represents the
            <c>abbreviation</c>, or if it is not found, throws a <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/>
            </returns>
            <exception cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"></exception>
        </member>
        <member name="T:PublicDomain.UnitedStatesUtilities.USState">
            <summary>
            Represents information about a state from the United States
            of America.
            </summary>
        </member>
        <member name="F:PublicDomain.UnitedStatesUtilities.USState.UniqueId">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.UnitedStatesUtilities.USState.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.UnitedStatesUtilities.USState.Abbreviation">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.USState.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.UnitedStatesUtilities.USState"/> class.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <param name="name">The name.</param>
            <param name="abbreviation">The abbreviation.</param>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.USState.GetName(System.Boolean)">
            <summary>
            Gets the name.
            </summary>
            <param name="toUpperCase">if set to <c>true</c> [to upper case].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.USState.GetAbbreviation(System.Boolean)">
            <summary>
            Gets the abbreviation.
            </summary>
            <param name="toUpperCase">if set to <c>true</c> [to upper case].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException">
            <summary>
            Thrown when the state being searched for does not exist.
            </summary>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.StateNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.StateNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.StateNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.UnitedStatesUtilities.StateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.UnitedStatesUtilities.StateNotFoundException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.Code.Language">
            <summary>
            Programming language enumeration (non-exhaustive)
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.CSharp">
            <summary>
            A language created by Microsoft for the .NET Framework
            http://msdn2.microsoft.com/vcsharp/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Php">
            <summary>
            PHP is a recursive acronym for "PHP: Hypertext Preprocessor."
            PHP is a dynamic programming language most often used for server-side webpages.
            http://www.php.net/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.JSharp">
            <summary>
            Microsoft's implementation of Java for the .NET Framework,
            it is an evolution of J++.
            http://msdn2.microsoft.com/vjsharp/
            Microsoft is retiring support of J# and ceasing development, therefore
            it has become obsolete:
            http://msdn2.microsoft.com/en-us/vjsharp/default.aspx
            IKVM (JavaDotNet) is one alternative to J#.
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.CPlusPlusDotNet">
            <summary>
            Microsoft's implementation of C++ for the .NET Framework
            http://msdn2.microsoft.com/visualc/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.JScriptDotNet">
            <summary>
            Microsoft's implementation of compiled JavaScript for the .NET Framework.
            http://msdn2.microsoft.com/en-us/library/72bd815a(vs.71).aspx
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.VisualBasicDotNet">
            <summary>
            Microsoft's implementation of Visual Basic for the .NET Framework
            http://msdn2.microsoft.com/vbasic/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.JavaDotNet">
            <summary>
            Java for the .NET Framework. Most popular implementation is IKVM
            http://www.ikvm.net/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Ruby">
            <summary>
            Dynamic programming language most often used for server-side webpages.
            http://www.ruby-lang.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.PhpDotNet">
            <summary>
            Php for the .NET Framework. Most popular implementation is Phalanger
            http://www.codeplex.com/Phalanger
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.C">
            <summary>
            Class programming language
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Java">
            <summary>
            Object oriented programming language
            http://java.sun.com/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.CPlusPlus">
            <summary>
            Classic object oriented programming language
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.RubyDotNet">
            <summary>
            Ruby for the .NET Framework. Most popular implementation is IronRuby
            http://www.rubyforge.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.VisualBasic">
            <summary>
            Class object oriented programming language. This
            has been superceded by Visual Basic.NET
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Python">
            <summary>
            Dynamic programming language most often used for server-side webpages.
            http://www.python.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.PythonDotNet">
            <summary>
            Python for the .NET Framework. Most popular implementation is IronPython
            http://www.codeplex.com/IronPython
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Perl">
            <summary>
            Dynamic programming language most often used for server-side webpages and formatting tasks.
            http://www.perl.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.PerlDotNet">
            <summary>
            Perl for the .NET Framework. Most popular implementation is ActiveState Perl Dev Kit
            http://www.activestate.com/Products/Perl_Dev_Kit/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Sql">
            <summary>
            Structured Query Language most often used to query an RDBMS
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.D">
            <summary>
            Object oriented programming language
            http://www.digitalmars.com/d/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.FSharp">
            <summary>
            Functional and object orient programming language for the .NET Framework
            http://research.microsoft.com/fsharp/fsharp.aspx
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Haskell">
            <summary>
            Purely functional programming language
            http://www.haskell.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Ada">
            <summary>
            Classic programming language
            http://www.adahome.com/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Cobol">
            <summary>
            Classic programming language.
            COBOL stands for COmmon Business-Oriented Language.
            http://www.cobolstandards.com/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Scheme">
            <summary>
            Classic programming language.
            http://www.schemers.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Lisp">
            <summary>
            Classic programming language
            http://www.lisp.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Fortran">
            <summary>
            Classic programming language
            http://www.dmoz.org/Computers/Programming/Languages/Fortran/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Pascal">
            <summary>
            Classic programming language
            http://pascal-central.com/ppl/index.html
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Html">
            <summary>
            Markup language for webpages
            http://www.w3.org/html/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Xhtml">
            <summary>
            Xml conformant HTML
            http://www.w3.org/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.Xml">
            <summary>
            General purpose markup language
            http://www.w3.org/XML/
            </summary>
        </member>
        <member name="F:PublicDomain.Code.Language.PlainText">
            <summary>
            Not a programming language but simply text characters
            </summary>
        </member>
        <member name="T:PublicDomain.Code.LanguageConstants">
            <summary>
            Class holding various language constants (non-exhaustive), including
            a unique URI for a language
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.LanguageUriPrefix">
            <summary>
            See http://tools.ietf.org/html/rfc2141. All Uris should be in lower case
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriAda">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriC">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriCobol">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriCPlusPlus">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriCPlusPlusDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriCSharp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriD">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriFortran">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriFSharp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriHaskell">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriHtml">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriJava">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriJavaDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriJScriptDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriJSharp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriLisp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPascal">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPerl">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPerlDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPhp">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPhpDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPlainText">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPython">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriPythonDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriRuby">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriRubyDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriScheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriSql">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriUnknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriVisualBasic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriVisualBasicDotNet">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriXhtml">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.LanguageConstants.UriXml">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.TzSensitiveTimestampProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.TzSensitiveTimestampProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.TzSensitiveTimestampProvider"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.TzSensitiveTimestampProvider.#ctor(PublicDomain.TzTimeZone)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.TzSensitiveTimestampProvider"/> class.
            </summary>
            <param name="timeZone">The time zone.</param>
        </member>
        <member name="P:PublicDomain.Logging.TzSensitiveTimestampProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:PublicDomain.Logging.TzSensitiveTimestampProvider.UtcOffset">
            <summary>
            Gets the offset of the DateTime provided by Now from UTC.
            If unknown, returns null.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="T:PublicDomain.CallbackBackgroundThread">
            <summary>
            
            </summary>
            <param name="isFinal"></param>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomPerson">
            <summary>
            Describes a person, corporation, or similar entity. It has one required element, name, and two optional elements: uri, email.
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomPerson.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomPerson.Homepage">
            <summary>
            Gets or sets the homepage.
            </summary>
            <value>The homepage.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomPerson.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomPerson">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomPerson.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomPerson.Homepage">
            <summary>
            Gets or sets the homepage.
            </summary>
            <value>The homepage.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomPerson.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="T:PublicDomain.BaseException">
            <summary>
            This simply extends the <see cref="T:System.Exception"/> class
            by adding a variable length parameter list in the basic
            constructor which takes the exception message, and then
            apply string.Format if necessary, which is an incredibly
            common expectation when throwing exceptions, and should have been
            part of the base exception class.
            </summary>
        </member>
        <member name="M:PublicDomain.BaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.BaseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.BaseException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.XmlUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.XmlUtilities.CDataStart">
            <summary>
            &lt;![CDATA[
            </summary>
        </member>
        <member name="F:PublicDomain.XmlUtilities.CDataEnd">
            <summary>
            ]]&gt;
            </summary>
        </member>
        <member name="F:PublicDomain.XmlUtilities.CommentStart">
            <summary>
            &lt;!--
            </summary>
        </member>
        <member name="F:PublicDomain.XmlUtilities.CommentEnd">
            <summary>
            --&gt;
            </summary>
        </member>
        <member name="F:PublicDomain.XmlUtilities.DefaultXmlProlog">
            <summary>
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            </summary>
        </member>
        <member name="M:PublicDomain.XmlUtilities.FormatXml(System.String)">
            <summary>
            Formats the XML.
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.XmlUtilities.GetDefaultXmlWriterSettings">
            <summary>
            Gets the default XML writer settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.XmlUtilities.FormatXml(System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Formats the XML.
            </summary>
            <param name="xml">The XML.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.XmlUtilities.FormatXml(System.Xml.XmlDocument)">
            <summary>
            Formats the XML.
            </summary>
            <param name="doc">The doc.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.XmlUtilities.FormatXml(System.Xml.XmlDocument,System.Xml.XmlWriterSettings)">
            <summary>
            Formats the XML.
            </summary>
            <param name="doc">The doc.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.XmlUtilities.NodeHasSignificantChild(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="input">The input.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL for the file containing the XML data to read.</param>
            <param name="nt">The XmlNameTable to use.</param>
            <exception cref="T:System.IO.FileNotFoundException">The specified file cannot be found.</exception>
            <exception cref="T:System.Net.WebException">The remote filename cannot be resolved.-or-An error occurred while processing the request.</exception>
            <exception cref="T:System.NullReferenceException">The nt value is null.</exception>
            <exception cref="T:System.InvalidOperationException">url is an empty string.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Part of the filename or directory cannot be found.</exception>
            <exception cref="T:System.UriFormatException">url is not a valid URI.</exception>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="fragType">Type of the frag.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="input">The input.</param>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="input">The input.</param>
            <param name="nt">The nt.</param>
        </member>
        <member name="M:PublicDomain.Xml.NonEntityResolvingXmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.NonEntityResolvingXmlTextReader"/> class.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="fragType">Type of the frag.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:PublicDomain.Xml.NonEntityResolvingXmlTextReader.CanResolveEntity">
            <summary>
            Gets a value indicating whether this reader can parse and resolve entities.
            </summary>
            <value></value>
            <returns>true if the reader can parse and resolve entities; otherwise, false. The XmlTextReader class always returns true.</returns>
        </member>
        <member name="T:PublicDomain.Web.WebConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Web.WebConstants.MimeTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ReflectionUtilities">
            <summary>
            Methods to help in common Reflection tasks.
            </summary>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.GetStrongName(System.Reflection.Assembly)">
            <summary>
            Gets the name of the strong.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.FindTypeByInterface``1(System.Reflection.Assembly)">
            <summary>
            Finds the type by interface.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.FindTypesByInterface``1(System.Reflection.Assembly)">
            <summary>
            Finds the types by interface.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.FindInstanceByInterface``1(System.Reflection.Assembly)">
            <summary>
            Finds the instance by interface.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.FindMethod(System.Reflection.Assembly,System.String)">
            <summary>
            Finds the method.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="methodName">Fully qualified name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.InvokeMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Invokes the method.
            </summary>
            <param name="methodInfo">The method info.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.InvokeMethod(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            Invokes the method.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.GetSuperTypes(System.Type)">
            <summary>
            Gets the super types.
            </summary>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.ReflectionUtilities.ReflectionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.ReflectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReflectionUtilities.ReflectionException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.ReflectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReflectionUtilities.ReflectionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.ReflectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReflectionUtilities.ReflectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:PublicDomain.ReflectionUtilities.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReflectionUtilities.ReflectionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.ExceptionUtilities">
            <summary>
            Methods to work with Exceptions.
            </summary>
        </member>
        <member name="M:PublicDomain.ExceptionUtilities.WriteExceptions(System.Exception)">
            <summary>
            Writes the exceptions.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:PublicDomain.ExceptionUtilities.WriteExceptions(System.IO.TextWriter,System.Exception[])">
            <summary>
            Writes the exception.
            </summary>
            <param name="writer">The writer.</param>
            <param name="exceptions">The exceptions.</param>
        </member>
        <member name="M:PublicDomain.ExceptionUtilities.GetHumanReadableExceptionDetailsAsString(System.Exception)">
            <summary>
            Gets the human readable exception details as a string. This
            simply accumulates the Message value of this exception and
            all inner exceptions. It does not return programmer related details
            such as the stack trace. For that, use the GetExceptionDetailsAsString
            method.
            </summary>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ExceptionUtilities.GetExceptionDetailsAsString(System.Exception)">
            <summary>
            Gets the exception details as a string. This will also
            gather together all inner exceptions in the result. The results
            are not in a human-readable form. For that, see the GetHumanReadable
            method.
            </summary>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ExceptionUtilities.ThrowExceptionList(System.Collections.Generic.ICollection{System.Exception})">
            <summary>
            Throws the exception list, if there are any. Null and zero-length
            lists are permissable and will not throw an Exception. If there
            are more than one exceptions, then the ultimate Exception that
            will be thrown is a <see cref="T:PublicDomain.Exceptions.WrappedException"/>
            with all exceptions as a chain of Inner exceptions in WrappedException objects
            </summary>
            <param name="exceptions">The exceptions.</param>
            <exception cref="T:PublicDomain.Exceptions.WrappedException">If <paramref name="exceptions"/> has more than one element.</exception>
        </member>
        <member name="T:PublicDomain.TzConstants">
            <summary>
            http://wwp.greenwichmeantime.com/info/timezone.htm
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneUsEastern">
            <summary>
            UTC-5
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneUsCentral">
            <summary>
            UTC-6
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneUsMountain">
            <summary>
            UTC-7
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneUsPacific">
            <summary>
            UTC-8
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificMidway">
            <summary>
            UTC-11
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificHonolulu">
            <summary>
            UTC-10
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificMarquesas">
            <summary>
            UTC-9:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaAnchorage">
            <summary>
            UTC-9
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaLosAngeles">
            <summary>
            UTC-8
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaDenver">
            <summary>
            UTC-7
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaChicago">
            <summary>
            UTC-6
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaNewYork">
            <summary>
            UTC-5
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaLaPaz">
            <summary>
            UTC-4
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaStJohns">
            <summary>
            UTC-3:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaArgentinaBuenosAires">
            <summary>
            UTC-3
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAmericaNoronha">
            <summary>
            UTC-2
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAtlanticAzores">
            <summary>
            UTC-1
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneUtc">
            <summary>
            UTC+0
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneEuropeParis">
            <summary>
            UTC+1
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneEuropeAthens">
            <summary>
            UTC+2
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneEuropeMoscow">
            <summary>
            UTC+3
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaTehran">
            <summary>
            UTC+3:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaDubai">
            <summary>
            UTC+4
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaKabul">
            <summary>
            UTC+4:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaKarachi">
            <summary>
            UTC+5
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaCalcutta">
            <summary>
            UTC+5:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaOmsk">
            <summary>
            UTC+6
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneIndianCocos">
            <summary>
            UTC+6:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaJakarta">
            <summary>
            UTC+7
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaShanghai">
            <summary>
            UTC+8
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAsiaTokyo">
            <summary>
            UTC+9
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAustraliaDarwin">
            <summary>
            UTC+9:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificGuam">
            <summary>
            UTC+10
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezoneAustraliaLordHowe">
            <summary>
            UTC+10:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificGuadalcanal">
            <summary>
            UTC+11
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificNorfolk">
            <summary>
            UTC+11:30
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificFiji">
            <summary>
            UTC+12
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificEnderbury">
            <summary>
            UTC+13
            </summary>
        </member>
        <member name="F:PublicDomain.TzConstants.TimezonePacificKiritimati">
            <summary>
            UTC+14
            </summary>
        </member>
        <member name="T:PublicDomain.ScreenScraper.ScreenScraperTag">
            <summary>
            Represents a scraped HTML tag.
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScreenScraperTag.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.ScreenScraper.ScreenScraperTag.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ScreenScraper.ScreenScraperTag.FindAttributeValue(System.String)">
            <summary>
            Finds the attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Logging.EventLogLogger">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.EventLogLogger.DefaultSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.EventLogLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.EventLogLogger"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.#ctor(PublicDomain.Logging.EventLogSource)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.EventLogLogger"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.#ctor(PublicDomain.Logging.EventLogSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.EventLogLogger"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.EventLogLogger"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.Write(PublicDomain.Logging.LogArtifact)">
            <summary>
            Writes the specified artifact.
            </summary>
            <param name="artifact">The artifact.</param>
        </member>
        <member name="M:PublicDomain.Logging.EventLogLogger.GetEventLogEntryType(PublicDomain.Logging.LoggerSeverity)">
            <summary>
            Gets the type of the event log entry.
            </summary>
            <param name="loggerSeverity">The logger severity.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.EventLogLogger.Application">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.EventLogLogger.System">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.EventLogLogger.Security">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.IRandomNumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.RandomNumberGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RandomNumberGenerator.Default">
            <summary>
            Random number generator in the range [0, int.Max]
            </summary>
        </member>
        <member name="M:PublicDomain.RandomNumberGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.RandomNumberGenerator"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.RandomNumberGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.RandomNumberGenerator"/> class.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.RandomNumberGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.RandomNumberGenerator"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:PublicDomain.RandomNumberGenerator.GetNextNumber">
            <summary>
            Gets the next number in the range [Minimum, Maximum]
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.RandomNumberGenerator.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="T:PublicDomain.Geography.CountryOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.CountryOptions.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.CountryOptions.PostalCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Geography.CountryOptions.ZipCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.OpmlParser">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.Opml.OpmlParser.CreateFeedBase``1(System.Xml.XmlReader)">
            <summary>
            Creates the feed base.
            </summary>
            <param name="feedReader">The feed reader.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.Opml.OpmlParser.Parse``1(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.IOpmlHead">
            <summary>
            A head contains zero or more optional element.
            
            All the sub-elements of head may be ignored by the processor.
            If an outline is opened within another outline, the processor
            must ignore the windowXxx elements, those elements only control
            the size and position of outlines that are opened in their own windows.
            
            If you load an OPML document into your client, you may choose to
            respect expansionState, or not. We're not in any way trying to
            dictate user experience. The expansionState info is there because
            it's needed in certain contexts. It's easy to imagine contexts where
            it would make sense to completely ignore it.
            
            Taken verbatim from http://www.opml.org/spec
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.OwnerEmail">
            <summary>
            Gets or sets the owner email.
            </summary>
            <value>The owner email.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.ExpansionState">
            <summary>
            Gets or sets the state of the expansion.
            </summary>
            <value>The state of the expansion.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.VerticalScrollState">
            <summary>
            Gets or sets the state of the vertical scroll.
            </summary>
            <value>The state of the vertical scroll.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.WindowTop">
            <summary>
            Gets or sets the window top.
            </summary>
            <value>The window top.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.WindowLeft">
            <summary>
            Gets or sets the window left.
            </summary>
            <value>The window left.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.WindowBottom">
            <summary>
            Gets or sets the window bottom.
            </summary>
            <value>The window bottom.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.IOpmlHead.WindowRight">
            <summary>
            Gets or sets the window right.
            </summary>
            <value>The window right.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.OpmlHead">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.DateModified">
            <summary>
            Gets or sets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.OwnerEmail">
            <summary>
            Gets or sets the owner email.
            </summary>
            <value>The owner email.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.ExpansionState">
            <summary>
            Gets or sets the state of the expansion.
            </summary>
            <value>The state of the expansion.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.VerticalScrollState">
            <summary>
            Gets or sets the state of the vertical scroll.
            </summary>
            <value>The state of the vertical scroll.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.WindowTop">
            <summary>
            Gets or sets the window top.
            </summary>
            <value>The window top.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.WindowLeft">
            <summary>
            Gets or sets the window left.
            </summary>
            <value>The window left.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.WindowBottom">
            <summary>
            Gets or sets the window bottom.
            </summary>
            <value>The window bottom.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Opml.OpmlHead.WindowRight">
            <summary>
            Gets or sets the window right.
            </summary>
            <value>The window right.</value>
        </member>
        <member name="T:PublicDomain.Data.DynamicDbProviderFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DynamicDbProviderFactory"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DynamicDbProviderFactory"/> class.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DynamicDbProviderFactory"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateCommand">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommand"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbCommand"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateCommandBuilder">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbCommandBuilder"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbCommandBuilder"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateConnection">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnection"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbConnection"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateDataAdapter">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbDataAdapter"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbDataAdapter"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateDataSourceEnumerator">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbDataSourceEnumerator"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbDataSourceEnumerator"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreateParameter">
            <summary>
            Returns a new instance of the provider's class that implements the <see cref="T:System.Data.Common.DbParameter"></see> class.
            </summary>
            <returns>
            A new instance of <see cref="T:System.Data.Common.DbParameter"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
            <summary>
            Returns a new instance of the provider's class that implements the provider's version of the <see cref="T:System.Security.CodeAccessPermission"></see> class.
            </summary>
            <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState"></see> values.</param>
            <returns>
            A <see cref="T:System.Data.Common.CodeAccessPermission"></see> object for the specified <see cref="T:System.Security.Permissions.PermissionState"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.Data.DynamicDbProviderFactory.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:PublicDomain.Data.DynamicDbProviderFactory.CanCreateDataSourceEnumerator">
            <summary>
            Specifies whether the specific <see cref="T:System.Data.Common.DbProviderFactory"></see> supports the <see cref="T:System.Data.Common.DbDataSourceEnumerator"></see> class.
            </summary>
            <value></value>
            <returns>true if the instance of the <see cref="T:System.Data.Common.DbProviderFactory"></see> supports the <see cref="T:System.Data.Common.DbDataSourceEnumerator"></see> class; otherwise false.</returns>
        </member>
        <member name="P:PublicDomain.Data.DynamicDbProviderFactory.UnderlyingFactory">
            <summary>
            Gets or sets the underlying factory.
            </summary>
            <value>The underlying factory.</value>
        </member>
        <member name="T:PublicDomain.Data.DbTransactionScope">
            <summary>
            Wraps both a transaction scope and a connection scope
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.Transaction)">
            <summary>
            Transactions the scope.
            </summary>
            <param name="transactionToUse">
                The transaction to be set as the ambient transaction, so that transactional
                work done inside the scope uses this transaction.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class.
            </summary>
            <param name="scopeOption">
                An instance of the System.Transactions.TransactionScopeOption enumeration
                that describes the transaction requirements associated with this transaction
                scope.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class, and sets the specified transaction as the
                ambient transaction, so that transactional work done inside the scope uses
                this transaction.
            </summary>
            <param name="transactionToUse">
            The transaction to be set as the ambient transaction, so that transactional
             work done inside the scope uses this transaction.
            </param>
            <param name="scopeTimeout">
                The System.TimeSpan after which the transaction scope times out and aborts
                the transaction.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class.
            </summary>
            <param name="scopeOption">
                An instance of the System.Transactions.TransactionScopeOption enumeration
                that describes the transaction requirements associated with this transaction
                scope.
            </param>
            <param name="scopeTimeout">
                The System.TimeSpan after which the transaction scope times out and aborts
                the transaction.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class.
            </summary>
            <param name="scopeOption">
                An instance of the System.Transactions.TransactionScopeOption enumeration
                that describes the transaction requirements associated with this transaction
                scope.
            </param>
            <param name="transactionOptions">
                A System.Transactions.TransactionOptions structure that describes the transaction
                options to use if a new transaction is created. If an existing transaction
                is used, the timeout value in this parameter applies to the transaction scope.
                If that time expires before the scope is disposed, the transaction is aborted.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class with the specified timeout value and COM+ interoperability requirements,
                and sets the specified transaction as the ambient transaction, so that transactional
                work done inside the scope uses this transaction.
            </summary>
            <param name="transactionToUse">
                The transaction to be set as the ambient transaction, so that transactional
                work done inside the scope uses this transaction.
            </param>
            <param name="scopeTimeout">
                The System.TimeSpan after which the transaction scope times out and aborts
                the transaction.
            </param>
            <param name="interopOption">
                An instance of the System.Transactions.EnterpriseServicesInteropOption enumeration
                that describes how the associated transaction interacts with COM+ transactions.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DbTransactionScope"/> class
            with the specified scope and COM+ interoperability requirements, and transaction
             options.
            </summary>
            <param name="scopeOption">
                An instance of the System.Transactions.TransactionScopeOption enumeration
                that describes the transaction requirements associated with this transaction
                scope.
            </param>
            <param name="transactionOptions">
                A System.Transactions.TransactionOptions structure that describes the transaction
                options to use if a new transaction is created. If an existing transaction
                is used, the timeout value in this parameter applies to the transaction scope.
                If that time expires before the scope is disposed, the transaction is aborted.
            </param>
            <param name="interopOption">
                An instance of the System.Transactions.EnterpriseServicesInteropOption enumeration
                that describes how the associated transaction interacts with COM+ transactions.
            </param>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.Complete">
            <summary>
            Indicates that all operations within the scope are completed successfully.
            </summary>
            <exception cref="T:System.InvalidOperationException">This method has already been called once.</exception>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DbTransactionScope.AreTransactionsNested">
            <summary>
            Ares the transactions nested.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Data.DbTransactionScope.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Data.DbTransactionScope.IsInUse">
            <summary>
            Gets a value indicating whether this instance is in use.
            </summary>
            <value><c>true</c> if this instance is in use; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PublicDomain.Data.DbTransactionScope.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptProgram">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.EcmaScript.EcmaScriptProgram.SourceElements">
            <summary>
            Gets or sets the source elements.
            </summary>
            <value>The source elements.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptOperator">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ArrayUtilities">
            <summary>
            Methods to manipulate arrays.
            </summary>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.GetListFromEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the list from enumerable.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.CloneList``1(System.Collections.Generic.List{``0})">
            <summary>
            Clones the list.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.ConvertToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.AppendList``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Appends the contents of <paramref name="list"/> to the end of
            <paramref name="destination"/> and returns <paramref name="destination"/>
            </summary>
            <param name="destination">The destination.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.InsertReplace``1(``0[],System.Int32,``0[])">
            <summary>
            
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <param name="insert">The insert.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.Remove``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.AddItem``1(``0[],``0)">
            <summary>
            Adds the item.
            </summary>
            <param name="list">The list.</param>
            <param name="val">The val.</param>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.RemoveDuplicates``1(System.Collections.Generic.IList{``0})">
            <summary>
            Removes the duplicates.
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.RemoveDuplicates``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Removes the duplicates. <paramref name="comparison"/> is optional and defaults
            to <see cref="M:PublicDomain.GenericUtilities.EqualsComparison``1(``0,``0)"/>
            </summary>
            <param name="list">The list.</param>
            <param name="comparison">The comparison.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.InsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparison"></param>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.TrimRight``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.TrimTo``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Trims excess items from the end of <paramref name="list"/>
            so the final count is less than or equal to <paramref name="totalCount"/>.
            If there are less items in <paramref name="list"/> than the number
            specified by <paramref name="totalCount"/>, then no action is taken (and
            no exception is thrown).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="totalCount"></param>
        </member>
        <member name="M:PublicDomain.ArrayUtilities.Trim``1(``0[]@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="T:PublicDomain.General">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.General.IsFlagOn(System.Int32,System.Int32)">
            <summary>
            Determines whether [is flag on] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <param name="flag">The flag.</param>
            <returns>
            	<c>true</c> if [is flag on] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.General.IsFlagOff(System.Int32,System.Int32)">
            <summary>
            Determines whether [is flag off] [the specified x].
            </summary>
            <param name="x">The x.</param>
            <param name="flag">The flag.</param>
            <returns>
            	<c>true</c> if [is flag off] [the specified x]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.General.ParseEnum``1(System.String)">
            <summary>
            Parses the enum.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.General.TryParseEnum``1(System.String,``0)">
            <summary>
            Tries the parse enum.
            </summary>
            <param name="str">The STR.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.General.InitializeAll(PublicDomain.IInitializable[])">
            <summary>
            
            </summary>
            <param name="inits"></param>
        </member>
        <member name="M:PublicDomain.General.InitializeAll(PublicDomain.InitializeState,PublicDomain.IInitializable[])">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="inits"></param>
        </member>
        <member name="T:PublicDomain.DisposableReaderWriter">
            <summary>
            Generic Reader/Writer lock that can be used in a using() statement.
            </summary>
        </member>
        <member name="F:PublicDomain.DisposableReaderWriter.DefaultLockTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.#ctor(PublicDomain.IExposesReaderWriterLock,PublicDomain.ReaderWriterLockSynchronizeType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DisposableReaderWriter"/> class.
            </summary>
            <param name="root">The root.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.AcquireLock">
            <summary>
            Acquires the lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.ReleaseLock">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.AcquireReaderLock">
            <summary>
            Acquires the reader lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.AcquireWriterLock">
            <summary>
            Acquires the writer lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.UpgradeToWriterLock">
            <summary>
            Upgrades to writer lock.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableReaderWriter.DowngradeFromWriterLock">
            <summary>
            Downgrades from writer lock.
            </summary>
        </member>
        <member name="F:PublicDomain.DisposableReaderWriter.m_SynchronizeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.DisposableReaderWriter.m_Root">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.TzDatabase">
            <summary>
            Parses the tz database files.
            
            Notes:
            * The zone.tab file is a mapping between ISO 3166 2-character country codes
            and the main ZONE for that country.
            * See the 'Theory' file in tzcode
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.NotApplicableValue">
            <summary>
            -
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TzDatabaseDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.Iso3166TabFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.ZoneTabFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.FactoryZoneName">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.ReadDatabase(System.String,System.Collections.Generic.List{PublicDomain.TzDatabase.TzRule},System.Collections.Generic.List{PublicDomain.TzDatabase.TzZone},System.Collections.Generic.List{System.String[]})">
            <summary>
            Reads the tz database from the specific <paramref name="dir"/>.
            All files without extensions are checked for relevant data. The
            directory is not recursively searched. Parameters <paramref name="rules"/>,
            <paramref name="zones"/>, and <paramref name="links"/> should be non-null
            arrays into which the database will be added.
            </summary>
            <param name="dir">The dir.</param>
            <param name="rules">The rules.</param>
            <param name="zones">The zones.</param>
            <param name="links">The links.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.ReadDatabaseFile(System.IO.FileInfo,System.Collections.Generic.List{PublicDomain.TzDatabase.TzRule},System.Collections.Generic.List{PublicDomain.TzDatabase.TzZone},System.Collections.Generic.List{System.String[]})">
            <summary>
            Reads the database file.
            
            See zic.txt in tzcode
            </summary>
            <param name="file">The file.</param>
            <param name="rules">The rules.</param>
            <param name="zones">The zones.</param>
            <param name="links">The links.</param>
            <exception cref="T:PublicDomain.TzDatabase.TzException"/>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParseIso3166Tab(System.String)">
            <summary>
            Parses the tz database iso3166.tab file and returns a map
            which maps the ISO 3166 two letter country code to the
            country name.
            </summary>
            <param name="iso3166TabFile">The iso3166 tab file.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParseZoneTab(System.String)">
            <summary>
            Parses the tz database zone.tab file into all the zone descriptions.
            
            From 'Theory' file:
            "The file 'zone.tab' lists the geographical locations used to name
            time zone rule files.  It is intended to be an exhaustive list
            of canonical names for geographic regions."
            </summary>
            <param name="tabFile"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.GetTzDataDay(System.String,System.Int32@,System.Nullable{System.DayOfWeek}@)">
            <summary>
            Gets the tz data day.
            </summary>
            <param name="str">The STR.</param>
            <param name="startDay">The start day.</param>
            <param name="startDay_dayOfWeek">The start day_day of week.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.GetTzDataTime(System.String,PublicDomain.TzDatabase.TimeModifier@)">
            <summary>
            Gets the tz data time.
            </summary>
            <param name="saveTime">The save time.</param>
            <param name="timeModifier">The time modifier.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParseDataRule(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParseDataZone(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParsePieces(System.String,PublicDomain.TzDatabase.TzZone)">
            <summary>
            Parses the pieces.
            </summary>
            <param name="str">The STR.</param>
            <param name="z">The z.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.CloneDataZone(PublicDomain.TzDatabase.TzZone,System.String)">
            <summary>
            Clones the specified line.
            </summary>
            <param name="zone">The zone.</param>
            <param name="line">The line.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.GetDateTime(System.Int32,PublicDomain.Month,System.Int32,System.Nullable{System.DayOfWeek},System.TimeSpan,PublicDomain.TzDatabase.TimeModifier,System.DateTimeKind,System.TimeSpan,System.TimeSpan)">
            <summary>
            Gets the date time.
            </summary>
            <param name="pieceYear">The piece year.</param>
            <param name="pieceMonth">The piece month.</param>
            <param name="pieceDay">The piece day.</param>
            <param name="pieceDayOfWeek">The piece day of week.</param>
            <param name="pieceTime">The piece time.</param>
            <param name="timeModifier">The time modifier.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="save">The save.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ApplyTimeModifier(PublicDomain.TzDatabase.TimeModifier,System.DateTimeKind,System.TimeSpan@,System.TimeSpan@,System.DateTime@)">
            <summary>
            Applies the time modifier.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <param name="inflectionKind">Kind of the inflection.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="save">The save.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.GetTimeModifierToString(PublicDomain.TzDatabase.TimeModifier)">
            <summary>
            Gets the time modifier to string.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.GetTimeModifierToString(PublicDomain.TzDatabase.TimeModifier,System.Boolean)">
            <summary>
            Gets the time modifier to string.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <param name="useEmptyDefault">if set to <c>true</c> [use empty default].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.ParseTimeModifier(System.String)">
            <summary>
            Parses the time modifier.
            </summary>
            <param name="timeModifier">The time modifier.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.TzDatabase.TzRule">
            <summary>
            Logical representation of a RULE field in the tz database.
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TzRule.ModifierDaylight">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TzRule.ModifierStandard">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TzRule.ModifierWar">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TzRule.ModifierPeace">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzRule"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.#ctor(System.String,System.Int32,System.Int32,PublicDomain.Month,System.Int32,System.Nullable{System.DayOfWeek},System.TimeSpan,PublicDomain.TzDatabase.TimeModifier,System.TimeSpan,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzRule"/> class.
            </summary>
            <param name="ruleName">Name of the rule.</param>
            <param name="fromYear">From.</param>
            <param name="toYear">To.</param>
            <param name="startMonth">The start month.</param>
            <param name="startDay">The start day.</param>
            <param name="startDay_dayOfWeek">The start day_day of week.</param>
            <param name="startTime">The start time.</param>
            <param name="startTimeModifier">The start time modifier.</param>
            <param name="saveTime">The save time.</param>
            <param name="modifier">The modifier.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetFromDateTime(System.TimeSpan)">
            <summary>
            Gets the start date time.
            </summary>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetDateTime(System.Int32,System.TimeSpan)">
            <summary>
            Gets the date time.
            </summary>
            <param name="year">The year.</param>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetDateTime(System.Int32,System.TimeSpan,PublicDomain.TzDatabase.TzRule)">
            <summary>
            Gets the start date time.
            </summary>
            <param name="year">The year.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="rule2">The rule2.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetToDateTime(System.TimeSpan)">
            <summary>
            Gets the end date time.
            </summary>
            <param name="utcOffset">The utc offset.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.DoesStartLastDay">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetObjectString">
            <summary>
            Gets the object string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzRule.CompareTo(PublicDomain.TzDatabase.TzRule)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.RuleName">
            <summary>
            Gives the (arbitrary) name of the set of rules this
            rule is part of.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.FromYear">
            <summary>
            Gives the first year in which the rule applies.  Any
            integer year can be supplied; the Gregorian calendar
            is assumed.  The word minimum (or an abbreviation)
            means the minimum year representable as an integer.
            The word maximum (or an abbreviation) means the
            maximum year representable as an integer.  Rules can
            describe times that are not representable as time
            values, with the unrepresentable times ignored; this
            allows rules to be portable among hosts with
            differing time value types.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.ToYear">
            <summary>
            Gives the final year in which the rule applies.  In
            addition to minimum and maximum (as above), the word
            only (or an abbreviation) may be used to repeat the
            value of the FROM field.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.StartMonth">
            <summary>
            Names the month in which the rule takes effect.
            January = 1, February = 2, ..., December = 12
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.StartDay">
            <summary>
            Gives the day on which the rule takes effect.
            Recognized forms include:
            
                 5        the fifth of the month
                 lastSun  the last Sunday in the month
                 lastMon  the last Monday in the month
                 Sun&gt;=8   first Sunday on or after the eighth
                 Sun&lt;=25  last Sunday on or before the 25th
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.StartDay_DayOfWeek">
            <summary>
            Gives the day on which the rule takes effect.
            Recognized forms include:
            
                 5        the fifth of the month
                 lastSun  the last Sunday in the month
                 lastMon  the last Monday in the month
                 Sun&gt;=8   first Sunday on or after the eighth
                 Sun&lt;=25  last Sunday on or before the 25th
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.StartTime">
            <summary>
            Gives the time of day at which the rule takes
            effect.  Recognized forms include:
            
                 2        time in hours
                 2:00     time in hours and minutes
                 15:00    24-hour format time (for times after noon)
                 1:28:14  time in hours, minutes, and seconds
                 -        equivalent to 0
            
             where hour 0 is midnight at the start of the day,
             and hour 24 is midnight at the end of the day.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.StartTimeModifier">
            <summary>
            In the absence of an indicator, wall clock time is assumed.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.SaveTime">
            <summary>
            Gives the amount of time to be added to local
            standard time when the rule is in effect.  This
            field has the same format as the AT field (although,
            of course, the w and s suffixes are not used).
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.Modifier">
            <summary>
            Gives the "variable part" (for example, the "S" or
            "D" in "EST" or "EDT") of time zone abbreviations to
            be used when this rule is in effect.  If this field
            is -, the variable part is null.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzRule.Comment">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.TzDatabase.TzZone">
            <summary>
            Logical representation of a ZONE data field in the tz database.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzZone"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.#ctor(System.String,System.TimeSpan,System.String,System.String,System.Int32,PublicDomain.Month,System.Int32,System.Nullable{System.DayOfWeek},System.TimeSpan,PublicDomain.TzDatabase.TimeModifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzZone"/> class.
            </summary>
            <param name="zoneName">Name of the zone.</param>
            <param name="utcOffset">The utc offset.</param>
            <param name="ruleName">Name of the rule.</param>
            <param name="format">The format.</param>
            <param name="untilYear">The until year.</param>
            <param name="untilMonth">The until month.</param>
            <param name="untilDay">The until day.</param>
            <param name="untilDay_dayOfWeek">The until day_day of week.</param>
            <param name="untilTime">The until time.</param>
            <param name="untilTimeModifier">The until time modifier.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.FormatModifier(PublicDomain.TzDatabase.TzRule)">
            <summary>
            </summary>
            <param name="rule">The rule.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.GetUntilDateTime">
            <summary>
            Gets the until date time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.GetLocalTime(System.DateTime)">
            <summary>
            Gets the local time.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.GetUniversalTime(System.DateTime)">
            <summary>
            Gets the universal time.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.IsGreaterThanUntil(System.DateTime)">
            <summary>
            Determines whether [is greater than until] [the specified point].
            </summary>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if [is greater than until] [the specified point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.HasRules">
            <summary>
            Determines whether this instance has rules.
            </summary>
            <returns>
            	<c>true</c> if this instance has rules; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.GetObjectString">
            <summary>
            Gets the object string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzZone.CompareTo(PublicDomain.TzDatabase.TzZone)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.ZoneName">
            <summary>
            The name of the time zone.  This is the name used in
            creating the time conversion information file for the
            zone.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UtcOffset">
            <summary>
            The amount of time to add to UTC to get standard time
            in this zone.  This field has the same format as the
            AT and SAVE fields of rule lines; begin the field with
            a minus sign if time must be subtracted from UTC.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.RuleName">
            <summary>
            The name of the rule(s) that apply in the time zone
            or, alternately, an amount of time to add to local
            standard time.  If this field is - then standard time
            always applies in the time zone.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.Format">
            <summary>
            The format for time zone abbreviations in this time
            zone.  The pair of characters %s is used to show where
            the "variable part" of the time zone abbreviation
            goes.  Alternately, a slash (/) separates standard and
            daylight abbreviations.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilYear">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilMonth">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilDay">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilDay_DayOfWeek">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilTime">
            <summary>
            The time at which the UTC offset or the rule(s) change
            for a location.  It is specified as a year, a month, a
            day, and a time of day.  If this is specified, the
            time zone information is generated from the given UTC
            offset and rule change until the time specified.  The
            month, day, and time of day have the same format as
            the IN, ON, and AT fields of a rule; trailing fields
            can be omitted, and default to the earliest possible
            value for the missing fields.
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.UntilTimeModifier">
            <summary>
            </summary>
        </member>
        <member name="P:PublicDomain.TzDatabase.TzZone.Comment">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.TzDatabase.TzException">
            <summary>
            Thrown when there is an error interpreting the tz database.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzException"/> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.TzDatabase.TzParseException">
            <summary>
            Thrown when there is a parse exception parsing the tz databse.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzParseException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzParseException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzParseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzParseException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzParseException"/> class.
            </summary>
            <param name="inner">The inner.</param>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:PublicDomain.TzDatabase.TzParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.TzDatabase.TzParseException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:PublicDomain.TzDatabase.TimeModifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TimeModifier.LocalWallTime">
            <summary>
            Default. Wall clock time; actual local time
            tz modifier: no letter or w
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TimeModifier.LocalStandardTime">
            <summary>
            Local standard time; winter time
            tz modifier: s
            </summary>
        </member>
        <member name="F:PublicDomain.TzDatabase.TimeModifier.UniversalTime">
            <summary>
            UTC time
            tz modifier: u or g or z
            </summary>
        </member>
        <member name="T:PublicDomain.TransactionCombinationLogic">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TransactionCombinationLogic.RequiresNew">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.TransactionCombinationLogic.Combine">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.IronProcess">
            <summary>
            Make sure to put this in a using() clause to dispose the process
            </summary>
        </member>
        <member name="F:PublicDomain.IronProcess.DefaultExecutionTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.IronProcess.DefaultThreadJoinTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.#ctor(System.String,System.String[])">
            <summary>
            Create a new IronProcess which wraps a Process. The underlying Process is not automatically
            started. This will create a Process which has common optimizations such as
            redirecting all streams to strings, using no shell window, etc. This is the preferred constructor.
            </summary>
            <param name="fileName"></param>
            <param name="args"></param>
        </member>
        <member name="M:PublicDomain.IronProcess.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Create a new IronProcess which wraps a Process. The underlying Process is not automatically
            started. This constructor does not modify the <paramref name="startInfo"/>,
            and should only be used when requiring fine control over this IronProcess. Otherwise,
            the other overloads should be used which prepares this class to do common
            optimizations such as reading streams into strings, etc.
            </summary>
            <param name="startInfo"></param>
        </member>
        <member name="M:PublicDomain.IronProcess.Reset(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="args"></param>
        </member>
        <member name="M:PublicDomain.IronProcess.Reset(System.Diagnostics.ProcessStartInfo)">
            <summary>
            
            </summary>
            <param name="startInfo"></param>
        </member>
        <member name="M:PublicDomain.IronProcess.StartAndWaitForExit">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.IronProcess.StartAndWaitForExit(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.Spawn">
            <summary>
            Start the process asynchronously. Do not read standard input or standard
            error streams
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.GetMangledArguments(System.String[])">
            <summary>
            Gets the mangled arguments.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.IronProcess.AddArguments(System.String[])">
            <summary>
            Adds the arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.IronProcess.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.IronProcess.ThrowDetailsAsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.ThrowDetailsAsException(System.String)">
            <summary>
            string.Format parameters:
            {0} = Process Filename
            {1} = Exit code
            {2} = Process Standard Error
            {3} = Process Standard Output
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:PublicDomain.IronProcess.Run">
            <summary>
            This starts the process, waits for it to exit, then checks
            the return code and the standard error. If either the
            return code is not 0 or there is any non-whitespace data
            in standard error, then an exception is thrown.
            This entire operation is done synchronously.
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.SetArguments(System.String[])">
            <summary>
            Sets the arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.IronProcess.SetArgumentsRaw(System.String)">
            <summary>
            Sets the arguments raw.
            </summary>
            <param name="argLine">The arg line.</param>
        </member>
        <member name="M:PublicDomain.IronProcess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.IronProcess.Parse(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.IronProcess.StartInfo">
            <summary>
            Returns the ProcessStartInfo which was used to spawn the process.
            </summary>
        </member>
        <member name="P:PublicDomain.IronProcess.ExitCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.IronProcess.StandardOutput">
            <summary>
            Returns non-null string representing the
            data read from the Standard Output of the
            last executed process. If there is no data,
            or the standardout output is not ever read due
            to other exceptions, the result will still
            be an empty string and never null.
            </summary>
        </member>
        <member name="P:PublicDomain.IronProcess.StandardError">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssSource">
            <summary>
            Its value is the name of the RSS channel that the item came from, derived from its title. It has one required attribute, url, which links to the XMLization of the source.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssSource.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssSource.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssSource.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssSource.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.IOpmlBody">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Opml.OpmlBody">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Data.IDataTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.AddColumn(System.String,System.Type,System.Boolean,System.Object)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="allowDBNull">if set to <c>true</c> [allow DB null].</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.AddPrimaryKeyConstraint(System.String[])">
            <summary>
            Adds the primary key constraint.
            </summary>
            <param name="columnNames">The column names.</param>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.AddForeignKeyConstraint(System.String,PublicDomain.Data.IDataTable,System.String)">
            <summary>
            Adds the foreign key constraint.
            </summary>
            <param name="localColumnName">Name of the local column.</param>
            <param name="foreignTable">The foreign table.</param>
            <param name="foreignColumnName">Name of the foreign column.</param>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.CreateTable(System.Data.IDbConnection)">
            <summary>
            Creates the table.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.DropTable(System.Data.IDbConnection)">
            <summary>
            Drops the table.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.InsertDynamic(System.Data.IDbConnection,System.Object[])">
            <summary>
            Inserts the dynamic.
            </summary>
            <param name="conn">The conn.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Data.IDataTable.ClearTable">
            <summary>
            Clears the table.
            </summary>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.Table">
            <summary>
            Gets the table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.CreateSql">
            <summary>
            Gets the create SQL.
            </summary>
            <value>The create SQL.</value>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.DropSql">
            <summary>
            Gets the drop SQL.
            </summary>
            <value>The drop SQL.</value>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.IsExistent">
            <summary>
            Gets a value indicating whether this instance is existent.
            </summary>
            <value>
            	<c>true</c> if this instance is existent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Data.IDataTable.TotalRows">
            <summary>
            Gets the total rows.
            </summary>
            <value>The total rows.</value>
        </member>
        <member name="T:PublicDomain.Data.DataTableAbstraction">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.DataTableAbstraction"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.AddColumn(System.String,System.Type,System.Boolean,System.Object)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnName">Name of the column.</param>
            <param name="columnType">Type of the column.</param>
            <param name="AllowDBNull">if set to <c>true</c> [allow DB null].</param>
            <param name="DefaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.AddPrimaryKeyConstraint(System.String[])">
            <summary>
            Adds the primary key constraint.
            </summary>
            <param name="columnNames">The column names.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.AddForeignKeyConstraint(System.String,PublicDomain.Data.IDataTable,System.String)">
            <summary>
            Adds the foreign key constraint.
            </summary>
            <param name="localColumnName">Name of the local column.</param>
            <param name="foreignTable">The foreign table.</param>
            <param name="foreignColumnName">Name of the foreign column.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.CreateTable(System.Data.IDbConnection)">
            <summary>
            Creates the table.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.DropTable(System.Data.IDbConnection)">
            <summary>
            Drops the table.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.InsertDynamic(System.Data.IDbConnection,System.Object[])">
            <summary>
            Inserts the dynamic.
            </summary>
            <param name="conn">The conn.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.Data.DataTableAbstraction.ClearTable">
            <summary>
            Clears the table.
            </summary>
        </member>
        <member name="F:PublicDomain.Data.DataTableAbstraction.m_table">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.Table">
            <summary>
            Gets the table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.CreateSql">
            <summary>
            Gets the create SQL.
            </summary>
            <value>The create SQL.</value>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.DropSql">
            <summary>
            Gets the drop SQL.
            </summary>
            <value>The drop SQL.</value>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.IsExistent">
            <summary>
            Gets a value indicating whether this instance is existent.
            </summary>
            <value>
            	<c>true</c> if this instance is existent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PublicDomain.Data.DataTableAbstraction.TotalRows">
            <summary>
            Gets the total rows.
            </summary>
            <value>The total rows.</value>
        </member>
        <member name="T:PublicDomain.Config.ConfigurationValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Config.ConfigurationValues"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reads the parameters from assembly.
            </summary>
            <param name="assemblyStreamName">Name of the assembly stream.</param>
            <param name="intersectedConfigs">The intersected configs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.#ctor(System.String,System.Reflection.Assembly,System.Collections.Generic.List{System.String})">
            <summary>
            Reads the parameters from assembly.
            </summary>
            <param name="assemblyStreamName">Name of the assembly stream.</param>
            <param name="assembly">The assembly.</param>
            <param name="intersectedConfigs">The intersected configs.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.ReadParametersFromStream(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reads the parameters from file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="intersectedConfigs">The intersected configs.</param>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.ReadParametersFromStream(System.IO.Stream,System.Collections.Generic.List{System.String})">
            <summary>
            Reads the parameters from stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="intersectedConfigs">The intersected configs.</param>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.ReadParametersFromTextReader(System.IO.TextReader,System.Collections.Generic.List{System.String})">
            <summary>
            Reads the parameters from text reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="intersectedConfigs">The intersected configs.</param>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetString(System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetString(System.String,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt64(System.String)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt64(System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt32(System.String)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt32(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt16(System.String)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt16(System.String,System.Int16)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetBool(System.String)">
            <summary>
            Gets the bool.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetBool(System.String,System.Boolean)">
            <summary>
            Gets the bool.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetEnum``1(System.String,``0)">
            <summary>
            Gets the enum.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt(System.String)">
            <summary>
            Gets the int.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetInt(System.String,System.Int32)">
            <summary>
            Gets the int.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetDouble(System.String)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetDouble(System.String,System.Double)">
            <summary>
            Gets the 
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetFloat(System.String)">
            <summary>
            
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.GetFloat(System.String,System.Single)">
            <summary>
            Gets the 
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.TryGetString(System.String,System.String@)">
            <summary>
            Tries the get string.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Config.ConfigurationValues.IntersectValues(PublicDomain.Config.ConfigurationValues)">
            <summary>
            Intersects the values.
            </summary>
            <param name="intersectValues">The intersect values.</param>
        </member>
        <member name="P:PublicDomain.Config.ConfigurationValues.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:PublicDomain.Config.ConfigurationValues.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:PublicDomain.Config.ConfigurationValues.WasExternalConfigRead">
            <summary>
            Gets or sets a value indicating whether [was external config read].
            </summary>
            <value>
            	<c>true</c> if [was external config read]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:PublicDomain.Xml.SimpleXmlResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.SimpleXmlResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Xml.SimpleXmlResolver"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Xml.SimpleXmlResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the baseUri value. If relative, it combines with the baseUri to make an absolute URI.</param>
            <returns>
            A <see cref="T:System.Uri"></see> representing the absolute URI or null if the relative URI cannot be resolved.
            </returns>
            <exception cref="T:System.ArgumentException">relativeUri is null</exception>
        </member>
        <member name="M:PublicDomain.Xml.SimpleXmlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"></see></param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:System.NullReferenceException">absoluteUri is null. </exception>
            <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
            <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
            <exception cref="T:System.Xml.XmlException">ofObjectToReturn is neither null nor a Stream type. </exception>
        </member>
        <member name="P:PublicDomain.Xml.SimpleXmlResolver.Credentials">
            <summary>
            When overridden in a derived class, sets the credentials used to authenticate Web requests.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Net.ICredentials"></see> object. If this property is not set, the value defaults to null; that is, the XmlResolver has no user credentials.</returns>
        </member>
        <member name="T:PublicDomain.LatitudeLongitudePoint">
            <summary>
            Generic representation of a latitude and longitude point.
            </summary>
        </member>
        <member name="F:PublicDomain.LatitudeLongitudePoint.m_latitude">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.LatitudeLongitudePoint.m_longitude">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.LatitudeLongitudePoint"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.LatitudeLongitudePoint"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.LatitudeLongitudePoint"/> class.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.Parse(System.String,System.String)">
            <summary>
            Parses the specified latitude.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.DistanceBetween(PublicDomain.LatitudeLongitudePoint,PublicDomain.LatitudeLongitudePoint)">
            <summary>
            Returns the distance between two latitude/longitude points, in miles.
            </summary>
            <param name="point1"></param>
            <param name="point2"></param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.LatitudeLongitudePoint.DistanceBetween(PublicDomain.LatitudeLongitudePoint,PublicDomain.LatitudeLongitudePoint,PublicDomain.DistanceType)">
            <summary>
            Distances the between.
            </summary>
            <param name="point1">The point1.</param>
            <param name="point2">The point2.</param>
            <param name="returnType">Type of the return.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LatitudeDecimal">
            <summary>
            Gets or sets the latitude decimal.
            </summary>
            <value>The latitude decimal.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LongitudeDecimal">
            <summary>
            Gets or sets the longitude decimal.
            </summary>
            <value>The longitude decimal.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LatitudeDegrees">
            <summary>
            Procedure for converting degrees, minutes, seconds into decimal degrees:
            Degrees, minutes, seconds value: 37 degrees, 25 minutes, 40.5 seconds
            1. Decimal degrees = degrees + (minutes/60) + (seconds/3600)
            2. 37 degrees, 25 minutes, 40.5 seconds = 37. + (25/60) + (40.5/3600)
            3. 37. + .416666 + .01125
            4. So 37 degrees, 25 minutes, 40.5 seconds = 37.427916 in decimal degrees.
            </summary>
            <value>The latitude degrees.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LatitudeMinutes">
            <summary>
            Gets the latitude minutes.
            </summary>
            <value>The latitude minutes.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LatitudeSeconds">
            <summary>
            Gets the latitude seconds.
            </summary>
            <value>The latitude seconds.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LongitudeDegrees">
            <summary>
            Gets the longitude degrees.
            </summary>
            <value>The longitude degrees.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LongitudeMinutes">
            <summary>
            Gets the longitude minutes.
            </summary>
            <value>The longitude minutes.</value>
        </member>
        <member name="P:PublicDomain.LatitudeLongitudePoint.LongitudeSeconds">
            <summary>
            Gets the longitude seconds.
            </summary>
            <value>The longitude seconds.</value>
        </member>
        <member name="T:PublicDomain.Logging.UtcLogTimestampProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.UtcLogTimestampProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:PublicDomain.Logging.UtcLogTimestampProvider.UtcOffset">
            <summary>
            Gets the offset of the DateTime provided by Now from UTC.
            If unknown, returns null.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="T:PublicDomain.Logging.FileSizeRollOverStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.IRollOverStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.IRollOverStrategy.GetFileName(System.String,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,PublicDomain.Logging.LogArtifact[])">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="logLine">The log line.</param>
            <param name="artifactSet">The artifact set.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Logging.FileSizeRollOverStrategy.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.FileSizeRollOverStrategy.DefaultFileSizeStrategyBytes">
            <summary>
            10 megs
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.FileSizeRollOverStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.FileSizeRollOverStrategy"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Logging.FileSizeRollOverStrategy.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Logging.FileSizeRollOverStrategy"/> class.
            </summary>
            <param name="fileSizeBytes">The file size bytes.</param>
        </member>
        <member name="M:PublicDomain.Logging.FileSizeRollOverStrategy.GetFileName(System.String,PublicDomain.Logging.LoggerSeverity,System.DateTime,System.Object,System.Object[],System.String,PublicDomain.Logging.LogArtifact[])">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="severity">The severity.</param>
            <param name="timestamp">The timestamp.</param>
            <param name="entry">The entry.</param>
            <param name="formatParameters">The format parameters.</param>
            <param name="logLine">The log line.</param>
            <param name="artifactSet">The artifact set.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Logging.FileSizeRollOverStrategy.MaxFileSize">
            <summary>
            Gets or sets the max size of the log file after which
            a new log file is started.
            </summary>
            <value>The size of the max file.</value>
        </member>
        <member name="T:PublicDomain.Logging.EventLogSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.EventLogSource.Application">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.EventLogSource.System">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Logging.EventLogSource.Security">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomText">
            <summary>
            Contains human-readable text, usually in small quantities. The type attribute determines how this information is encoded (default="text")
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomText.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomText.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomText">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomText.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomText.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:PublicDomain.Exceptions.WrappedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Exceptions.WrappedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.WrappedException"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Exceptions.WrappedException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.WrappedException"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:PublicDomain.Exceptions.WrappedException.#ctor(System.Exception,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.WrappedException"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:PublicDomain.Exceptions.WrappedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.WrappedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:PublicDomain.Exceptions.WrappedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Exceptions.WrappedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="P:PublicDomain.Exceptions.WrappedException.ExceptionWrapped">
            <summary>
            Gets the wrapped exception.
            </summary>
            <value>The wrapped exception.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptThrowStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptLabelStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptEmptyStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.ProcessHelper">
            <summary>
            Wrapper around the Process class to add some convenience methods but
            most importantly deal with the complex nature of getting both
            StandardOutput and StandardError streams concurrently (this must be done with
            callbacks). See http://msdn2.microsoft.com/en-us/library/system.diagnostics.process.standarderror.aspx
            </summary>
        </member>
        <member name="M:PublicDomain.ProcessHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ProcessHelper"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.ProcessHelper.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ProcessHelper"/> class.
            </summary>
            <param name="sendStreamsToStrings">if set to <c>true</c> [send streams to strings].</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.Parse(System.String)">
            <summary>
            Parses the specified STR.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.SetArguments(System.String[])">
            <summary>
            Sets the arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.GetMangledArguments(System.String[])">
            <summary>
            Gets the mangled arguments.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.AddArguments(System.String[])">
            <summary>
            Adds the arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.process_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Handles the OutputDataReceived event of the process control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Diagnostics.DataReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.process_ErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Handles the ErrorDataReceived event of the process control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Diagnostics.DataReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.Start">
            <summary>
            Starts this instance.
            </summary>
        </member>
        <member name="M:PublicDomain.ProcessHelper.Start(System.Boolean)">
            <summary>
            Starts the process, begins asynchronous reads on
            both standard output and standard error.
            </summary>
            <param name="useRedirect">if set to <c>true</c> [use redirect].</param>
        </member>
        <member name="M:PublicDomain.ProcessHelper.StartAndWaitForExit">
            <summary>
            Starts with a timeout of <see cref="F:PublicDomain.GlobalConstants.DefaultExecuteSmallProcessTimeout"/>
            milliseconds and does not throw an exception when it sees an error, but returns
            the standard error and output.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.StartAndWaitForExit(System.Int32)">
            <summary>
            Starts the and wait for exit.
            </summary>
            <param name="timeoutMs">The timeout ms.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.StartAndWaitForExit(System.Int32,System.Boolean)">
            <summary>
            Starts the process, begins asynchronous reads on
            both standard output and standard error, and
            waits for the process to exit. The return code
            of the process is returned.
            </summary>
            <param name="timeoutMs">The timeout ms.</param>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns>Return code of completed process</returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.StartAndWaitForExit(System.Boolean)">
            <summary>
            Starts the process, begins asynchronous reads on
            both standard output and standard error, and
            waits for the process to exit. The return code
            of the process is returned.
            </summary>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns>Return code of completed process</returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.CheckForError">
            <summary>
            Checks for error.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ProcessHelper.CheckForError(System.Boolean)">
            <summary>
            Checks for error.
            </summary>
            <param name="throwOnError">if set to <c>true</c> [throw on error].</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.ProcessHelper.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.Process">
            <summary>
            Gets or sets the process.
            </summary>
            <value>The process.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.StartInfo">
            <summary>
            Gets the start info.
            </summary>
            <value>The start info.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.Out">
            <summary>
            Gets or sets the out.
            </summary>
            <value>The out.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
            <value>The exit code.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.StandardOutput">
            <summary>
            Gets the standard output.
            </summary>
            <value>The standard output.</value>
        </member>
        <member name="P:PublicDomain.ProcessHelper.StandardError">
            <summary>
            Gets the standard error.
            </summary>
            <value>The standard error.</value>
        </member>
        <member name="T:PublicDomain.Cursors">
            <summary>
            http://www.javascriptkit.com/dhtmltutors/csscursors.shtml
            </summary>
        </member>
        <member name="F:PublicDomain.Cursors.HandAndPointer">
            <summary>
            cursor: pointer; cursor: hand;
            </summary>
        </member>
        <member name="M:PublicDomain.Cursors.GetStyle(PublicDomain.CursorStyle)">
            <summary>
            Gets the cursor style. Returns 'cursor: {0};' without the quotes,
            and with {0} replaced by the cursor style. This method may
            also return a compound style, such as 'cursor: {0};cursor: {1};'.
            Always ends in a trailing semicolon;
            </summary>
            <param name="cursor">The cursor.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.CursorStyle">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Auto">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Default">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Hand">
            <summary>
            Support: Only IE. Use HandAndPointer instead
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Pointer">
            <summary>
            Support: NS6+/IE6+ only. Use HandAndPointer instead
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.HandAndPointer">
            <summary>
            Support: Cross browser
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Crosshair">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Text">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Wait">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Help">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Inherit">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Move">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeEast">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeNorthEast">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeNorthWest">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeNorth">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeSouthEast">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeSouthWest">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeSouth">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ResizeWest">
            <summary>
            Support: All Browsers
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.Progress">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.AllScroll">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.ColumnResize">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.NoDrop">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.NotAllowed">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.RowResize">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="F:PublicDomain.CursorStyle.VerticalText">
            <summary>
            Support: IE6+
            </summary>
        </member>
        <member name="T:PublicDomain.Logging.LocalLogTimestampProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Logging.LocalLogTimestampProvider.Now">
            <summary>
            Gets the now.
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:PublicDomain.Logging.LocalLogTimestampProvider.UtcOffset">
            <summary>
            Gets the offset of the DateTime provided by Now from UTC.
            If unknown, returns null.
            </summary>
            <value>The utc offset.</value>
        </member>
        <member name="T:PublicDomain.Scalar`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PublicDomain.Scalar`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Scalar`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Scalar`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssGuid">
            <summary>
            guid stands for globally unique identifier. It's a string that uniquely identifies the item. When present, an aggregator may choose to use this string to determine if an item is new.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssGuid.UniqueIdentifier">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssGuid.IsPermaLink">
            <summary>
            Gets or sets the is perma link.
            </summary>
            <value>The is perma link.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssGuid">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssGuid.UniqueIdentifier">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssGuid.IsPermaLink">
            <summary>
            Gets or sets the is perma link.
            </summary>
            <value>The is perma link.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssCloud">
            <summary>
            Specifies a web service that supports the rssCloud interface which can be implemented in HTTP-POST, XML-RPC or SOAP 1.1. 
            Its purpose is to allow processes to register with a cloud to be notified of updates to the channel, implementing a lightweight publish-subscribe protocol for RSS feeds.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCloud.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCloud.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCloud.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCloud.RegisterProcedure">
            <summary>
            Gets or sets the register procedure.
            </summary>
            <value>The register procedure.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCloud.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssCloudProtocol">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Feeder.Rss.RssCloudProtocol.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Feeder.Rss.RssCloudProtocol.XmlRpc">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Feeder.Rss.RssCloudProtocol.HttpPost">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Feeder.Rss.RssCloudProtocol.Soap">
            <summary>
            /
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssCloud">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCloud.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCloud.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCloud.Path">
            <summary>
            Gets or sets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCloud.RegisterProcedure">
            <summary>
            Gets or sets the register procedure.
            </summary>
            <value>The register procedure.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCloud.Protocol">
            <summary>
            Gets or sets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="T:PublicDomain.Feeder.OpmlSerializer">
            <summary>
            http://www.kbcafe.com/rss/?guid=20051003145153
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.OpmlSerializer.SerializeToString(PublicDomain.Feeder.IOpmlFeed)">
            <summary>
            Serializes to string.
            </summary>
            <param name="feed">The feed.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.OpmlSerializer.Serialize(PublicDomain.Feeder.IOpmlFeed)">
            <summary>
            Serializes the specified feed.
            </summary>
            <param name="feed">The feed.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.IAtomContent">
            <summary>
            Contains or links to the complete content of the entry. Content must be provided if there is no alternate link, and should be provided if there is no summary.
            Taken verbatim from http://www.atomenabled.org/developers/syndication/.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomContent.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomContent.Src">
            <summary>
            Gets or sets the SRC.
            </summary>
            <value>The SRC.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.IAtomContent.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Atom.AtomContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomContent.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomContent.Src">
            <summary>
            Gets or sets the SRC.
            </summary>
            <value>The SRC.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Atom.AtomContent.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="T:PublicDomain.Code.DotNetCodeRunner">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Code.DotNetCodeRunner.m_language">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Code.DotNetCodeRunner.#ctor(PublicDomain.Code.Language)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Code.DotNetCodeRunner"/> class.
            </summary>
            <param name="language">The language.</param>
        </member>
        <member name="M:PublicDomain.Code.DotNetCodeRunner.Run(System.CodeDom.Compiler.CompilerResults,System.String,System.Text.StringBuilder,System.String[])">
            <summary>
            Runs the specified arguments.
            </summary>
            <param name="compilerResults">The compiler results.</param>
            <param name="execMethod">The exec method.</param>
            <param name="output">The output.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Code.DotNetCodeRunner.RunToString(System.CodeDom.Compiler.CompilerResults,System.String,System.String[])">
            <summary>
            Runs to string.
            </summary>
            <param name="compilerResults">The compiler results.</param>
            <param name="execMethod">The exec method.</param>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Code.DotNetCodeRunner.Language">
            <summary>
            Gets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.LenientEcmaScriptDocument">
            <summary>
            http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
            </summary>
        </member>
        <member name="F:PublicDomain.EcmaScript.LenientEcmaScriptDocument.m_sb">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.EcmaScript.LenientEcmaScriptDocument.m_state">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.EcmaScript.LenientEcmaScriptDocument.m_isAllWhitespace">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.EcmaScript.LenientEcmaScriptDocument.Load(System.String)">
            <summary>
            Loads the specified script.
            </summary>
            <param name="script">The script.</param>
        </member>
        <member name="M:PublicDomain.EcmaScript.LenientEcmaScriptDocument.IsEcmaScriptWhitespace(System.Char)">
            <summary>
            Determines whether [is ECMA script whitespace] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is ECMA script whitespace] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.EcmaScript.LenientEcmaScriptDocument.ContextSwitch(PublicDomain.EcmaScript.LenientEcmaScriptDocument.State)">
            <summary>
            Contexts the switch.
            </summary>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:PublicDomain.EcmaScript.LenientEcmaScriptDocument.ResetAfterContextSwitch">
            <summary>
            Resets the after context switch.
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.LenientEcmaScriptDocument.State">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.EcmaScript.LenientEcmaScriptDocument.State.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptCaseStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptAssignmentStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.AspRuntimeHost.wwAspRuntimeHost">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.OutputFile">
            <summary>
            Location for the generated HTML output.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Context">
            <summary>
            Hashtable of parameters that can be added to the Host object
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.PostData">
            <summary>
            An optional PostBuffer in binary format.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.PostContentType">
            <summary>
            An optional POST buffer Content Type
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ApplicationBase">
            <summary>
            Name of the directory that AspRunTimeHost class's parent assembly is located in. This is so the DLL/EXE
            can be found. Default is blank which uses the current application directory. 
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ConfigFile">
            <summary>
            Location of the web.Config file. Defaults to the Application Base path.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.PhysicalDirectory">
            <summary>
            Name of the Physical Directory assigned with Start(). Required!
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.VirtualPath">
            <summary>
            Name of the virtual directory assigned to the application with Start.Not used internally, only exposed for
            external apps to retrieve. 
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ResponseHeaders">
            <summary>
            A hashtable that contains all the HTPP Headers the server sent in header / value pair
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.RequestHeaders">
            <summary>
            Send any Request headers - optional. You can pick up response headers and post them right back.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ResponseStatusCode">
            <summary>
            the Response status code the server sent. 200 on success, 500 on error, 404 for redirect etc.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ShadowCopyAssemblies">
            <summary>
            A comma delimited list of assemblies that should be automatically
            copied to the Web applications' BIN directory to avoid having
            to manually copy them there.
            
            Assign any assemblies that contain types you might be using 
            in your parent application and passing to the ASP.NET application
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Cookies">
            <summary>
            Collection of cookies set by the request.
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ErrorMessage">
            <summary>
            An error message if bError is set. Only works for the ProcessRequest method
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Proxy">
            <summary>
            Instance of the Proxy object. Exposed to allow access to the ResponseData object.
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.AspRuntimeHost.wwAspRuntimeHost"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.AspRuntimeHost.wwAspRuntimeHost"/> class.
            </summary>
            <param name="physicalDirectory">The physical directory.</param>
            <param name="virtualPath">The virtual path.</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ProcessRequest(System.String,System.String)">
            <summary>
            Processes a page request against the ASP.Net runtime. 
            </summary>
            <param name="Page">A page filename relative to the Virtual directory. Use subdir\sub2\test.aspx style syntax for subdirs. (note forward slash!)</param>
            <param name="QueryString">Optional - query string in key value pair format. Pass null for non.</param>
            <returns>true or false. False returns only if a real failure occurs - most page errors will result in an HTTP error page.</returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ProcessRequestToString(System.String,System.String[])">
            <summary>
            Processes a page request against the ASP.Net runtime and runs the result to a string
            </summary>
            <param name="Page">A page filename relative to the Virtual directory. Use subdir\sub2\test.aspx style syntax for subdirs. (note forward slash!)</param>
            <param name="queryStringKeysAndValues">The query string keys and values.</param>
            <returns>
            true or false. False returns only if a real failure occurs - most page errors will result in an HTTP error page.
            </returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.PreProcessing">
            <summary>
            Pre-Processing routine common to the Processing methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.PostProcessing">
            <summary>
            Post-Processing code common to both of the processing routines
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.ClearRequestData">
            <summary>
            Resets the host so on the next request we start with a clean slate
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.AddRequestHeader(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Header"></param>
            <param name="value"></param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.AddCookiesToRequest">
            <summary>
            Adds all the cookies in the Cookie Collection
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Start">
            <summary>
            Starts the ASP.Net runtime hosting by creating a new appdomain and loading the runtime into it.
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Stop">
            <summary>
            Stops the ASP.Net runtime unloading the AppDomain
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.AddPostBuffer(System.Byte[],System.String)">
            <summary>
            Adds a complete POST buffer to the current request.
            </summary>
            <param name="PostBuffer">raw POST buffer as byte[]</param>
            <param name="ContentType">the content type of the buffer.</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.AddPostBuffer(System.String,System.String)">
            <summary>
            Adds a complete POST buffer to the current request.
            </summary>
            <param name="PostBuffer">raw POST buffer as a string</param>
            <param name="ContentType">the content type of the buffer.</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.AddPostBuffer(System.String)">
            <summary>
            Adds a complete POST buffer to the current request.
            </summary>
            <param name="PostBuffer">raw POST buffer as byte[]</param>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.MakeShadowCopies(System.String)">
            <summary>
            Copies any assemblies marked for ShadowCopying into the BIN directory
            of the Web physical director. Copies only 
            if the assemblies in the source dir is newer
            </summary>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.GetInstallPathAndConfigureAspNetIfNeeded">
            <summary>
            The ASP.NET Runtime requires certain keys configured in the registry.
            This code checks for those keys on startup and if not found sets them up
            even if ASP.NET is not installed.
            
            Taken from the Cassini Source
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.AspRuntimeHost.wwAspRuntimeHost.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:PublicDomain.ReadOnlyICollection`1">
            <summary>
            Wraps an existing ICollection as read only, following the pattern of 
            ReadOnlyCollection to simply no-op modifying functions intead of throwing
            Exceptions.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PublicDomain.ReadOnlyICollection`1.coll">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ReadOnlyICollection`1"/> class.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.AsReadOnly(System.Collections.Generic.ICollection{`0})">
            <summary>
            Returned a read only wrapper around the collectionToWrap.
            </summary>
            <param name="collectionToWrap">The collection to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.Add(`0)">
            <summary>
            Add does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.Clear">
            <summary>
            Clear does not change a ReadOnlyICollection
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.Remove(`0)">
            <summary>
            Remove does not change a ReadOnlyICollection
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:PublicDomain.ReadOnlyICollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyICollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:PublicDomain.ReadOnlyICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:PublicDomain.IInitializable">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.IInitializable.Initialize(PublicDomain.InitializeState)">
            <summary>
            Initializes the specified stage.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.InitializeState">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Nothing">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Minimum">
            <summary>
            Only initialize what is absolutely required
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Basic">
            <summary>
            Initialize the minimum as well as other basics
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Stage1">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Stage2">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Stage3">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.InitializeState.Everything">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.GlobalConstants">
            <summary>
            Various useful global constants.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainMainVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainBuildVersion">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainVersion">
            <summary>
            Current version of this code, in string form. In a standalone build,
            this is the assembly version.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainFileVersion">
            <summary>
            Current version of this code, in string form. In a standalone build,
            this is the file version.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainName">
            <summary>
            The name of the PublicDomain assembly, if this is a standalone build. If
            this file is included in an existing project, this is purely a logical name.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainStrongName">
            <summary>
            Strong, public name of the PublicDomain assembly, if this is a standalone
            build. If this file is included in an existing project, this is meaningless.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainNamespace">
            <summary>
            Fully qualified, absolute URL which acts as a namespace for the classes in the
            PublicDomain.
            Always ends in a trailing slash.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.DotNetFrameworkLocation20">
            <summary>
            Always ends in a trailing slash.
            C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.DefaultStreamBlockSize">
            <summary>
            A reasonable default block size for block reading/writing to and from
            a Stream.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.DefaultExecuteSmallProcessTimeout">
            <summary>
            A reasonable default timeout value, in milliseconds, for a
            small process to timeout.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.FeetInAStatuteMile">
            <summary>
            5280
            http://scienceworld.wolfram.com/physics/Mile.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.InchesInACentimeter">
            <summary>
            0.3937007874015748031496062992126
            http://scienceworld.wolfram.com/physics/Inch.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.CentimetersInAnInch">
            <summary>
            2.54
            http://scienceworld.wolfram.com/physics/Inch.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.InchesInAFoot">
            <summary>
            12
            http://scienceworld.wolfram.com/physics/Inch.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.FeetInAYard">
            <summary>
            3
            http://scienceworld.wolfram.com/physics/Yard.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialRadiusInStatuteMiles">
            <summary>
            3963.19
            http://scienceworld.wolfram.com/astronomy/EarthRadius.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialRadiusInNauticalMiles">
            <summary>
            3443.9
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialRadiusInKilometers">
            <summary>
            6378.137
            http://scienceworld.wolfram.com/astronomy/EarthRadius.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialCircumferenceInStatuteMiles">
            <summary>
            24901.5
            http://scienceworld.wolfram.com/astronomy/EarthRadius.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialCircumferenceInKilometers">
            <summary>
            40075
            http://scienceworld.wolfram.com/astronomy/EarthRadius.html
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialDiameterInStatuteMiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialDiameterInNauticalMiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.EarthEquatorialDiameterInKilometers">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.PublicDomainDefaultInstallLocation">
            <summary>
            The default installation diretory of a standalone PublicDomain assembly.
            Always ends in a trailing slash.
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.DividerEquals">
            <summary>
            Represents the string (50 characters): 
            ==================================================
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.LogClassDatabase">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.GlobalConstants.#cctor">
            <summary>
            Static Initializer
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInAByte">
            <summary>
            The number of bits in 1 Byte (8)
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BytesInAKilobyte">
            <summary>
            The number of bytes in 1KB (1024).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInAKilobyte">
            <summary>
            The number of bits in 1KB (8192).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BytesInAMegabyte">
            <summary>
            The number of bytes in 1MB (1048576).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInAMegabyte">
            <summary>
            The number of bits in 1MB (8388608).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BytesInAGigabyte">
            <summary>
            The number of bytes in 1GB (1073741824).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInAGigabyte">
            <summary>
            The number of bits in 1GB (8589934592).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BytesInATerabyte">
            <summary>
            The number of bytes in 1TB (1099511627776).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInATerabyte">
            <summary>
            The number of bits in 1TB (8796093022208).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BytesInAPetabyte">
            <summary>
            The number of bytes in 1PB (1125899906842624).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.BitsInAPetabyte">
            <summary>
            The number of bits in 1PB (9007199254740992).
            </summary>
        </member>
        <member name="F:PublicDomain.GlobalConstants.KilometersInAStatuteMile">
            <summary>
            http://scienceworld.wolfram.com/physics/Mile.html
            </summary>
        </member>
        <member name="T:PublicDomain.CallbackNoArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.CallbackWithRock">
            <summary>
            
            </summary>
            <param name="rock"></param>
        </member>
        <member name="T:PublicDomain.CallbackWithString">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:PublicDomain.CallbackWithInt">
            <summary>
            
            </summary>
            <param name="i"></param>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.IRssCategory">
            <summary>
            In RSS 2.0, a provision is made for linking a channel to its identifier in a cataloging system, using the channel-level category feature. For example, to link a channel to its Syndic8 identifier, include a category element as a sub-element of channel, with domain "Syndic8", and value the identifier for your channel in the Syndic8 database. The appropriate category element for Scripting News would be <category domain="Syndic8">1765</category>.
            Taken verbatim from http://blogs.law.harvard.edu/tech/rss.
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCategory.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.IRssCategory.CategoryName">
            <summary>
            Gets or sets the name of the category.
            </summary>
            <value>The name of the category.</value>
        </member>
        <member name="T:PublicDomain.Feeder.Rss.RssCategory">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCategory.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:PublicDomain.Feeder.Rss.RssCategory.CategoryName">
            <summary>
            Gets or sets the name of the category.
            </summary>
            <value>The name of the category.</value>
        </member>
        <member name="T:PublicDomain.Feeder.RssFeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.IRssFeedItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Enclosure">
            <summary>
            Gets or sets the enclosure.
            </summary>
            <value>The enclosure.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.IRssFeedItem.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="M:PublicDomain.Feeder.RssFeedItem.Distill">
            <summary>
            Distills this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Link">
            <summary>
            Gets or sets the link.
            </summary>
            <value>The link.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <value>The comments.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Enclosure">
            <summary>
            Gets or sets the enclosure.
            </summary>
            <value>The enclosure.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Guid">
            <summary>
            Gets or sets the GUID.
            </summary>
            <value>The GUID.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.PublicationDate">
            <summary>
            Gets or sets the publication date.
            </summary>
            <value>The publication date.</value>
        </member>
        <member name="P:PublicDomain.Feeder.RssFeedItem.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:PublicDomain.CharUtilities">
            <summary>
            Methods to work with characters, such as an indexable ASCII table.
            </summary>
        </member>
        <member name="F:PublicDomain.CharUtilities.AsciiCharacters">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.CharUtilities.#cctor">
            <summary>
            Initializes the <see cref="T:PublicDomain.CharUtilities"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.CharUtilities.GetAsciiCharacters">
            <summary>
            Gets the ASCII characters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.CharUtilities.IsCharacterOneOf(System.Char,System.Char[])">
            <summary>
            Determines whether [is character one of] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <param name="compare">The compare.</param>
            <returns>
            	<c>true</c> if [is character one of] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PublicDomain.CharUtilities.IsQuoteCharacter(System.Char)">
            <summary>
            Determines whether [is quote character] [the specified c].
            </summary>
            <param name="c">The c.</param>
            <returns>
            	<c>true</c> if [is quote character] [the specified c]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptSwitchStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.DisposableLockGrabber">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableLockGrabber.#ctor(System.Threading.ReaderWriterLock,PublicDomain.ReaderWriterLockSynchronizeType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DisposableLockGrabber"/> class.
            </summary>
            <param name="rwlock">The rwlock.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:PublicDomain.DisposableLockGrabber.#ctor(System.Threading.ReaderWriterLock,PublicDomain.ReaderWriterLockSynchronizeType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.DisposableLockGrabber"/> class.
            </summary>
            <param name="rwlock">The rwlock.</param>
            <param name="type">The type.</param>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
        </member>
        <member name="M:PublicDomain.DisposableLockGrabber.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PublicDomain.DisposableLockGrabber.GetLock(System.Threading.ReaderWriterLock,PublicDomain.ReaderWriterLockSynchronizeType)">
            <summary>
            This can only be used if there will be no other static calls to this method within the
            context of this call on this thread.
            </summary>
            <param name="rwlock">The rwlock.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.DisposableLockGrabber.GetLock(System.Threading.ReaderWriterLock,PublicDomain.ReaderWriterLockSynchronizeType,System.Int32)">
            <summary>
            This can only be used if there will be no other static calls to this method within the
            context of this call on this thread.
            </summary>
            <param name="rwlock">The rwlock.</param>
            <param name="type">The type.</param>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.RandomGenerationUtilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.RandomGenerationUtilities.RNG">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.RandomGenerationUtilities.GetRandomInteger">
            <summary>
            Gets a random integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RandomGenerationUtilities.GetRandomInteger(System.Int32)">
            <summary>
            Gets a random integer.
            </summary>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.RandomGenerationUtilities.GetRandomInteger(System.Int32,System.Int32)">
            <summary>
            Gets a random integer.
            </summary>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Util.StringContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Util.StringContainer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Util.StringContainer"/> class.
            </summary>
            <param name="str">The STR.</param>
        </member>
        <member name="P:PublicDomain.Util.StringContainer.UnderlyingString">
            <summary>
            Gets or sets the underlying string.
            </summary>
            <value>The underlying string.</value>
        </member>
        <member name="T:PublicDomain.Geography.Region">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Geography.Region.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Region"/> class.
            </summary>
        </member>
        <member name="M:PublicDomain.Geography.Region.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Region"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:PublicDomain.Geography.Region.#ctor(System.String,PublicDomain.Geography.RegionType)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Geography.Region"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:PublicDomain.Geography.Region.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PublicDomain.Geography.Region.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:PublicDomain.Feeder.SerializeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:PublicDomain.Feeder.SerializeType.Rss2">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.Feeder.FeedSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Feeder.FeedSerializer.Serialize(PublicDomain.Feeder.IFeed,PublicDomain.Feeder.SerializeType)">
            <summary>
            Serializes the specified feed.
            </summary>
            <param name="feed">The feed.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.FeedSerializer.SerializeToString(PublicDomain.Feeder.IFeed,PublicDomain.Feeder.SerializeType)">
            <summary>
            Serializes to string.
            </summary>
            <param name="feed">The feed.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:PublicDomain.Feeder.FeedSerializer.SerializeRss2(System.Xml.XmlDocument,PublicDomain.Feeder.IRssFeed)">
            <summary>
            Serializes the RSS2.
            </summary>
            <param name="doc">The doc.</param>
            <param name="feed">The feed.</param>
        </member>
        <member name="T:PublicDomain.Data.ConnectionScopedDatabaseConnectionProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabaseConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.Data.ConnectionScopedDatabaseConnectionProvider"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:PublicDomain.Data.ConnectionScopedDatabaseConnectionProvider.GetConnection(System.Boolean,System.Boolean)">
            <summary>
            Gets a database connection.
            </summary>
            <param name="open">if set to <c>true</c> [open].</param>
            <param name="bypassCache">if set to <c>true</c> [bypass cache].</param>
            <returns></returns>
        </member>
        <member name="T:PublicDomain.Crc32">
            <summary>
            A utility class to compute Crc32, provided by Simon Mourier.
            
            Discussion regarding crc32 with Simon:
            
            Mar 17, 2007 8:43 PM
            Hi Simon,
            
            My name is Kevin Grigorenko, I own the PublicDomain package
            (http://www.codeplex.com/PublicDomain). I found your HtmlAgilityPack code and
            I think it's absolutely wonderful, thanks so much!
            
            What I wanted to ask you was whether you mind putting crc32.cs into the
            Public Domain (the project noted above)? I think it would be invaluable
            code for the community.
            
            Thanks again!
            Kevin
            
            Mar 18, 2007 5:15 AM
            Hi Kevin,
             
            I have no problem with that, and by the way, I have an enhanced version
            of it that adds support for Stream and file.
             
            I have attached it.
             
            Simon.
            </summary>
        </member>
        <member name="M:PublicDomain.Crc32.AddToCrc32(System.Int32)">
            <summary>
            Adds a new System.Int32 and updates the checkum value.
            </summary>
            <param name="c">The new System.Int32 to add to the current checksum computation.</param>
            <returns>The current checksum value.</returns>
        </member>
        <member name="M:PublicDomain.Crc32.AddToCrc32(System.UInt16)">
            <summary>
            Adds a new System.UInt16 and updates the checkum value.
            </summary>
            <param name="c">The new System.UInt16 to add to the current checksum computation.</param>
            <returns>The current checksum value.</returns>
        </member>
        <member name="M:PublicDomain.Crc32.Compute(System.IO.Stream)">
            <summary>
            Computes a checksum on a stream.
            </summary>
            <param name="stream">The stream to compute the checksum on. May not be null.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:PublicDomain.Crc32.ComputeFile(System.String)">
            <summary>
            Computes a checksum for a given file.
            </summary>
            <param name="filePath">The path of the file to compute the checksum for. May not be null.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:PublicDomain.Crc32.Compute(System.String)">
            <summary>
            Computes a checksum for a given string.
            </summary>
            <param name="text">The string to compute the checksum for. May not be null.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:PublicDomain.Crc32.Compute(System.Byte[])">
            <summary>
            Computes a checksum for a given array of bytes.
            </summary>
            <param name="bytes">The array of bytes to compute the checksum for. May not be null.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="P:PublicDomain.Crc32.CheckSum">
            <summary>
            Gets or sets the current checksum value.
            </summary>
        </member>
        <member name="T:PublicDomain.ConsoleRerouter">
            <summary>
            
            </summary>
        </member>
        <member name="M:PublicDomain.ConsoleRerouter.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ConsoleRerouter"/> class.
            </summary>
            <param name="sb">The sb.</param>
        </member>
        <member name="M:PublicDomain.ConsoleRerouter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ConsoleRerouter"/> class.
            </summary>
            <param name="consoleOut">The console out.</param>
        </member>
        <member name="M:PublicDomain.ConsoleRerouter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ConsoleRerouter"/> class.
            </summary>
            <param name="consoleOut">The console out.</param>
            <param name="useOutForError">if set to <c>true</c> [use out for error].</param>
        </member>
        <member name="M:PublicDomain.ConsoleRerouter.#ctor(System.IO.TextWriter,System.IO.TextWriter,System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:PublicDomain.ConsoleRerouter"/> class.
            </summary>
            <param name="consoleOut">The console out.</param>
            <param name="consoleError">The console error.</param>
            <param name="consoleIn">The console in.</param>
        </member>
        <member name="M:PublicDomain.ConsoleRerouter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:PublicDomain.ConsoleRerouter.Out">
            <summary>
            Gets or sets the out.
            </summary>
            <value>The out.</value>
        </member>
        <member name="P:PublicDomain.ConsoleRerouter.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:PublicDomain.ConsoleRerouter.In">
            <summary>
            Gets or sets the in.
            </summary>
            <value>The in.</value>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptContinueStatement">
            <summary>
            
            </summary>
        </member>
        <member name="T:PublicDomain.EcmaScript.EcmaScriptBreakStatement">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
